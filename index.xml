<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CUONG SAI</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>CUONG SAI</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>vi-en</language><copyright>© 2020 Cuong Sai. All Rights Reserved</copyright><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu47efca792e1e7000f9078d7b8f1dac48_31011_512x512_fill_lanczos_center_2.PNG</url>
      <title>CUONG SAI</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cách dùng keras và tensorflow trong R. So sánh R interface và Python interface cho keras.</title>
      <link>/post/r-python-machine-learning/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/r-python-machine-learning/</guid>
      <description>


&lt;hr /&gt;
&lt;p&gt;Nội dung của bài bao gồm:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#sec1&#34;&gt;1. Cài đặt môi trường làm việc để kết hợp R và Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#sec2&#34;&gt;2. So sánh R interface và Python interface cho keras với bài toán MNIST nổi tiếng&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;sec1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1 Cài đặt&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.1 Cài đặt keras và tensorflow trong R&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Để cài đặt Keras và Tensorflow trong R các bạn dùng các lệnh sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;keras&amp;quot;)
install.packages(“tensorflow”)
library(keras)
install_keras()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.2 Cài đặt keras và tensorflow trong Python (sử dụng anaconda)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Để làm việc về khoa học dữ liệu với ngôn ngữ &lt;code&gt;Python&lt;/code&gt;, một cách đơn giản nhất là tải về và cài đặt &lt;code&gt;Anaconda&lt;/code&gt; - nền tảng (&lt;code&gt;platform&lt;/code&gt;) mã nguồn mở về khoa học dữ liệu thông dụng nhất hiện nay hỗ trợ làm việc với &lt;code&gt;Python&lt;/code&gt; và &lt;code&gt;R&lt;/code&gt;. Nếu chưa biết cách sử dụng &lt;code&gt;R&lt;/code&gt; trong &lt;code&gt;Anaconda&lt;/code&gt; thì các bạn có thể đọc bài hướng dẫn trước tại &lt;a href=&#34;https://svcuong.github.io/post/r-jupyter/r-jupyter/&#34;&gt;đây&lt;/a&gt;. Download và cài đặt &lt;code&gt;Anaconda&lt;/code&gt; tại &lt;a href=&#34;https://www.anaconda.com/products/individual&#34;&gt;đây&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lưu ý:&lt;/code&gt; trong khi cài các đặt bạn nhớ là tích vào mục &lt;code&gt;Add Anaconda to my PATH environment variable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/conda0.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sau khi đã cài xong &lt;code&gt;Anaconda&lt;/code&gt;, các bạn vào &lt;code&gt;Anaconda Prompt&lt;/code&gt; để tạo một môi trường mới chứa các thư viện cần thiết như sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda create -n r-env python=3.7 scikit-learn pandas numpy matplotlib keras tensorflow&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/conda1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Câu lệnh trên có nghĩa là:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Khởi tạo môi trường anaconda mới với tên &lt;code&gt;r-env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cài &lt;code&gt;python&lt;/code&gt; phiên bản 3.7 với các thư viện scikit-learn, pandas, numpy, matplotlib, keras và tensorflow cho môi trường này&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kiểm tra xem môi trường &lt;code&gt;r-env&lt;/code&gt; đã được tạo trong &lt;code&gt;Anaconda&lt;/code&gt; chưa bằng lệnh &lt;code&gt;conda env list&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/conda2.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3 Thiết lập môi trường làm việc để sử dụng kết hợp R và Python trong R&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Để sử dụng &lt;code&gt;Python&lt;/code&gt; trong &lt;code&gt;R&lt;/code&gt; chúng ta sử dụng gói &lt;code&gt;reticulate&lt;/code&gt;. Để biết cách kết hợp &lt;code&gt;R&lt;/code&gt; và &lt;code&gt;Python&lt;/code&gt; trong &lt;code&gt;R&lt;/code&gt; các bạn có thể đọc bài trước tại &lt;a href=&#34;https://svcuong.github.io/post/s-d-ng-k-t-h-p-r-va-python-trong-data-science/&#34;&gt;đây&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nạp thư viện &lt;code&gt;reticulate&lt;/code&gt; và sử dụng hàm &lt;code&gt;conda_list()&lt;/code&gt; để kiểm tra danh sách môi trường &lt;code&gt;Anaconda&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)
conda_list()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    name                                               python
## 1 r-env C:\\Users\\svcuo\\Anaconda3\\envs\\r-env\\python.exe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vậy là đã có môi trường &lt;code&gt;r-env&lt;/code&gt; mới khởi tạo. Để chọn môi trường này sử dụng trong &lt;code&gt;R&lt;/code&gt; chúng ta sử dụng hàm &lt;code&gt;use_condaenv()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;use_condaenv(&amp;quot;r-env&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sec2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2. So sánh R interface và Python interface cho keras với bài toán MNIST nổi tiếng&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Chú ý&lt;/code&gt;: do sử dụng kết hợp &lt;code&gt;R&lt;/code&gt; và &lt;code&gt;Python&lt;/code&gt; trong cùng một &lt;code&gt;R Notebook&lt;/code&gt; nên tôi sẽ chú thích &lt;code&gt;R&lt;/code&gt; với mỗi &lt;code&gt;R code chunk&lt;/code&gt; và &lt;code&gt;Python&lt;/code&gt; với mỗi &lt;code&gt;Python code chunk&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;sử-dụng-r-interface-cho-keras&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;2.1 Sử dụng R interface cho keras&lt;/h4&gt;
&lt;p&gt;Nạp tập dữ liệu &lt;code&gt;MNIST&lt;/code&gt; từ &lt;code&gt;keras&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R code
library(keras)
mnist &amp;lt;- dataset_mnist()
train_images &amp;lt;- mnist$train$x
train_labels &amp;lt;- mnist$train$y
test_images &amp;lt;- mnist$test$x
test_labels &amp;lt;- mnist$test$y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R code
dim(train_images)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 60000    28    28&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(train_labels)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 60000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(test_images)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10000    28    28&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(test_labels)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thử hiển thị 5th digit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R code
digit &amp;lt;- train_images[5,,]
plot(as.raster(digit, max = 255))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/r-python-machine-learning/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;
&lt;strong&gt;Hướng dẫn thao tác với tensors trong R:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R code
slice1 &amp;lt;- train_images[10:99,,]
dim(slice1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 90 28 28&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R code
slice2 &amp;lt;- train_images[10:99,1:28,1:28]
dim(slice2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 90 28 28&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;slice3 &amp;lt;- train_images[, 15:28, 15:28]
dim(slice3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 60000    14    14&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Thiết kế cấu trúc network model:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R code
model &amp;lt;- keras_model_sequential() %&amp;gt;%
  layer_dense(units = 512, activation = &amp;quot;relu&amp;quot;, input_shape = c(28 * 28)) %&amp;gt;%
  layer_dense(units = 10, activation = &amp;quot;softmax&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Model Summary :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R code
summary(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Model: &amp;quot;sequential&amp;quot;
## ________________________________________________________________________________
## Layer (type)                        Output Shape                    Param #     
## ================================================================================
## dense (Dense)                       (None, 512)                     401920      
## ________________________________________________________________________________
## dense_1 (Dense)                     (None, 10)                      5130        
## ================================================================================
## Total params: 407,050
## Trainable params: 407,050
## Non-trainable params: 0
## ________________________________________________________________________________&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bước tiếp theo, compile model với &lt;code&gt;loss function, optimizer và metrics&lt;/code&gt; tương ứng:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model %&amp;gt;% compile(
  optimizer = &amp;quot;rmsprop&amp;quot;,
  loss = &amp;quot;categorical_crossentropy&amp;quot;,
  metrics = c(&amp;quot;accuracy&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chuẩn bị dữ liệu để huấn luyện mô hình:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;train_images &amp;lt;- array_reshape(train_images, c(60000, 28 * 28))
train_images &amp;lt;- train_images / 255
test_images &amp;lt;- array_reshape(test_images, c(10000, 28 * 28))
test_images &amp;lt;- test_images / 255&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;train_labels &amp;lt;- to_categorical(train_labels)
test_labels &amp;lt;- to_categorical(test_labels)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Huấn luyện mô hình:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model %&amp;gt;% fit(
  train_images, 
  train_labels, 
  epochs = 5, 
  batch_size = 128)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Đánh giá độ chính xác của mô hình:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metrics &amp;lt;- model %&amp;gt;% evaluate(test_images, test_labels)
metrics&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $loss
## [1] 0.06532291
## 
## $accuracy
## [1] 0.9802&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dự đoán với dữ liệu mới:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model %&amp;gt;% predict_classes(test_images[1:10,])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 7 2 1 0 4 1 4 9 5 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.2 Sử dụng Python interface cho keras trong môi trường R&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nạp tập dữ liệu &lt;code&gt;MNIST&lt;/code&gt; từ &lt;code&gt;keras&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
from keras.datasets import mnist&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using TensorFlow backend.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(train_images, train_labels), (test_images, test_labels) = mnist.load_data()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
train_images.shape&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (60000, 28, 28)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
train_labels.shape&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (60000,)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
test_images.shape&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (10000, 28, 28)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
test_labels.shape&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (10000,)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Thiết kế cấu trúc network model:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
from keras import models
from keras import layers

model = models.Sequential()
model.add(layers.Dense(512, activation=&amp;#39;relu&amp;#39;, input_shape=(28 * 28,)))
model.add(layers.Dense(10, activation=&amp;#39;softmax&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compile model với &lt;code&gt;loss function, optimizer và metrics&lt;/code&gt; tương ứng:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
model.compile(optimizer=&amp;#39;rmsprop&amp;#39;,
loss=&amp;#39;categorical_crossentropy&amp;#39;,
metrics=[&amp;#39;accuracy&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chuẩn bị dữ liệu để huấn luyện mô hình:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
train_images = train_images.reshape((60000, 28 * 28))
train_images = train_images.astype(&amp;#39;float32&amp;#39;) / 255
test_images = test_images.reshape((10000, 28 * 28))
test_images = test_images.astype(&amp;#39;float32&amp;#39;) / 255&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
from keras.utils import to_categorical
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Huấn luyện mô hình:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
model.fit(train_images, train_labels, epochs=5, batch_size=128)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Đánh giá độ chính xác của mô hình:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
test_loss, test_acc = model.evaluate(test_images, test_labels)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;test_acc:&amp;#39;, test_acc)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## test_acc: 0.980400025844574&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dự đoán với dữ liệu mới:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
model.predict_classes(test_images[:10,:])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([7, 2, 1, 0, 4, 1, 4, 9, 5, 9], dtype=int64)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Cách thêm và sử dụng R trong Jupyter Notebook</title>
      <link>/post/r-jupyter/r-jupyter/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/r-jupyter/r-jupyter/</guid>
      <description>


&lt;p&gt;Để cài đặt và sử dụng &lt;code&gt;R&lt;/code&gt; + &lt;code&gt;r-essentials packages&lt;/code&gt; trong Jupyter Notebook có 2 cách sau:&lt;/p&gt;
&lt;div id=&#34;cách-1-dùng-anaconda-navigation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cách 1: Dùng Anaconda Navigation&lt;/h2&gt;
&lt;p&gt;Bước 1. Mở Anaconda &lt;code&gt;Navigator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-jupyter1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Bước 2. Chọn &lt;code&gt;Environments&lt;/code&gt; để tạo môi trường Anaconda mới. Click &lt;code&gt;Create&lt;/code&gt; và tích chọn &lt;code&gt;r&lt;/code&gt; cũng như phiên bản &lt;code&gt;Python&lt;/code&gt; cần thiết:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-jupyter2.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Bước 3. Mở &lt;code&gt;Jupyter Notebook&lt;/code&gt; trong môi trường mới tạo có chứa &lt;code&gt;R package&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-jupyter3.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cách-2-sử-dụng-anaconda-prompt&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cách 2: Sử dụng Anaconda &lt;code&gt;Prompt&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Bước 1. Mở Anaconda &lt;code&gt;Prompt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-python3.png&#34; /&gt;
Bước 2. Tạo và &lt;code&gt;active&lt;/code&gt; môi trường anaconda mới bằng lệnh sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda create -n ENV_NAME
conda activate ENV_NAME&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bước 3. Cài &lt;code&gt;r-irkernel&lt;/code&gt; cho môi trường anaconda mới tạo bằng lệnh sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda install -c r r-irkernel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bước 4. Mở Jupyter Notebook trong môi trường anaconda chứa R mới khởi tạo bằng lệnh:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jupyter notebook&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sau khi đã mở &lt;code&gt;Jupyter Notebook&lt;/code&gt; trong môi trường Anaconda mới tạo có chứa &lt;code&gt;R&lt;/code&gt;, để tạo một &lt;code&gt;notebook&lt;/code&gt; mới cho ngôn ngữ &lt;code&gt;R&lt;/code&gt;, chọn &lt;code&gt;New&lt;/code&gt; rồi chọn &lt;code&gt;R&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-jupyter4.PNG&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tips-cho-cài-r-packages-trong-môi-trường-anaconda&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tips cho cài &lt;code&gt;R packages&lt;/code&gt; trong môi trường Anaconda:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Active&lt;/code&gt; môi trường Anaconda có chứa R từ &lt;code&gt;Anaconda Prompt&lt;/code&gt; và gõ lệnh cài &lt;code&gt;R package&lt;/code&gt; như sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda install r-NAME_PACKAGE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ví dụ cài gói &lt;code&gt;ggplot2&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda install r-ggplot2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nếu không cài được thì chúng ta có thể:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Launching R&lt;/code&gt; trực tiếp trong &lt;code&gt;Anaconda Prompt&lt;/code&gt; và dùng lệnh &lt;code&gt;install.packages(&#34;NAME_PACKAGE&#34;)&lt;/code&gt; để cài đặt package như khi sử dụng R.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hoặc dùng cách sau:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;conda install conda-build
conda skeleton cran &amp;lt;something_on_cran&amp;gt;
conda build r-&amp;lt;something_on_cran_lowercased&amp;gt;
conda install -c local r-&amp;lt;something_on_cran_lowercased&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Cách sử dụng các toán tử pipes trong R</title>
      <link>/post/pipes/</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/pipes/</guid>
      <description>


&lt;p&gt;Sự ra đời của các toán tử &lt;code&gt;pipes&lt;/code&gt; trong package &lt;a href=&#34;https://magrittr.tidyverse.org/reference/index.html&#34;&gt;magrittr&lt;/a&gt;
đã tạo ra những thay đổi lớn mang tính cách mạng cho ngôn ngữ &lt;code&gt;R&lt;/code&gt;. Biết cách sử dụng linh hoạt các toán tử này chính là chìa khóa để rút ngắn thời gian viết &lt;code&gt;code&lt;/code&gt; cũng giúp làm cho &lt;code&gt;code&lt;/code&gt; dễ đọc và dễ bảo trì hơn.&lt;/p&gt;
&lt;p&gt;Ở bài này tôi &lt;code&gt;note&lt;/code&gt; lại cách dùng của 4 toán tử &lt;code&gt;pipes&lt;/code&gt; cho bạn nào cần:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%&amp;gt;%&lt;/code&gt; : Forward-pipe operator&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%&amp;lt;&amp;gt;%&lt;/code&gt; : Compound assignment pipe-operator&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%T&amp;gt;%&lt;/code&gt; : Tee Operator&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%$%&lt;/code&gt; : Exposition pipe-operator&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mục đích của việc sử dụng các toán tử &lt;code&gt;pipes&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tránh gọi lồng các hàm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Giảm việc tạo và sử dụng các biến trung gian&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tổ chức tập hợp các câu lệnh thành một chuỗi thống nhất, dễ hiểu.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nạp các thư viện cần thiết vào phiên làm việc của R để thực hành:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(magrittr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Chú ý&lt;/code&gt;: Khi nạp gói &lt;code&gt;tidyverse&lt;/code&gt; thì pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; được nạp tự động, tuy nhiên để dùng các toán từ khác thì chúng ta cần nạp thêm cả gói &lt;code&gt;magrittr&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;toán-tử-forward-pipe-operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Toán tử &lt;code&gt;%&amp;gt;%&lt;/code&gt; (forward-pipe operator)&lt;/h2&gt;
&lt;p&gt;Đây là &lt;code&gt;pipe&lt;/code&gt; được sử dụng nhiều nhất trong R, hầu như mỗi công việc thực hiện trên R tôi đều sử dụng nó rất nhiều lần.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nguyên lý của pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt;:&lt;/strong&gt; chuyển toàn bộ vế bên trái (có thể là kết quả của hàm đi trước) thành dữ liệu đầu vào cho hàm bên phải tạo thành một dòng chảy dữ liệu từ trái qua phải.&lt;/p&gt;
&lt;p&gt;Ví dụ với tập dữ liệu &lt;code&gt;diamonds&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(diamonds)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 10
##   carat cut       color clarity depth table price     x     y     z
##   &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;     &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
## 2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
## 3 0.23  Good      E     VS1      56.9    65   327  4.05  4.07  2.31
## 4 0.290 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
## 5 0.31  Good      J     SI2      63.3    58   335  4.34  4.35  2.75
## 6 0.24  Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;gt;%
  filter(color == &amp;quot;I&amp;quot;) %&amp;gt;%
  group_by(cut) %&amp;gt;%
  summarize(price = mean(price))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   cut       price
##   &amp;lt;ord&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Fair      4685.
## 2 Good      5079.
## 3 Very Good 5256.
## 4 Premium   5946.
## 5 Ideal     4452.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tương đương với cách truyền thống như sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds_1 &amp;lt;- filter(diamonds, color == &amp;quot;I&amp;quot;)
diamonds_2 &amp;lt;- group_by(diamonds_1, cut)
(diamonds_3 &amp;lt;- summarize(diamonds_2, price = mean(price)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   cut       price
##   &amp;lt;ord&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Fair      4685.
## 2 Good      5079.
## 3 Very Good 5256.
## 4 Premium   5946.
## 5 Ideal     4452.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;toán-tử-compound-assignment-pipe-operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Toán tử &lt;code&gt;%&amp;lt;&amp;gt;%&lt;/code&gt; (compound assignment pipe-operator)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nguyên lý của pipe &lt;code&gt;%&amp;lt;&amp;gt;%:&lt;/code&gt;&lt;/strong&gt; Thực hiện nhiệm vụ tương tự như với toán tử &lt;code&gt;%&amp;gt;%&lt;/code&gt;, tuy nhiên kết quả cuối cùng của dòng chảy dữ liệu được gán lại vào đối tượng ban đầu của dòng chảy.&lt;/p&gt;
&lt;p&gt;Ví dụ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;lt;&amp;gt;%
  filter(color == &amp;quot;I&amp;quot;) %&amp;gt;% select(carat, cut, color)
diamonds&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5,422 x 3
##    carat cut       color
##    &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;     &amp;lt;ord&amp;gt;
##  1 0.290 Premium   I    
##  2 0.24  Very Good I    
##  3 0.3   Ideal     I    
##  4 0.3   Good      I    
##  5 0.24  Premium   I    
##  6 0.33  Ideal     I    
##  7 0.33  Ideal     I    
##  8 0.32  Ideal     I    
##  9 0.3   Ideal     I    
## 10 0.3   Very Good I    
## # ... with 5,412 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;toán-tử-t-tee-operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Toán tử &lt;code&gt;%T%&lt;/code&gt; (Tee Operator)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nguyên lý của pipe &lt;code&gt;%T&amp;gt;%&lt;/code&gt;:&lt;/strong&gt; Dòng chảy dữ liệu trong toán tử này có thể được hình dung tương tự như ống nước hình chữ T. Dữ liệu đầu vào của 1 hàm đi trước sẽ được truyền cho 2 nhánh tương ứng cho hai hàm phía sau&lt;/p&gt;
&lt;p&gt;Ví dụ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rnorm(200) %&amp;gt;%
    matrix(ncol = 2) %T&amp;gt;%
    plot %&amp;gt;%
    colSums&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-30-pipes.vn_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## [1]  18.50063 -16.36514&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tương đương với:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rnorm(200) %&amp;gt;%
    matrix(ncol = 2) %&amp;gt;%
    { plot(.); . } %&amp;gt;%
    colSums&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-30-pipes.vn_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## [1]  -2.381452 -16.977761&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hoặc viết theo cách truyền thống:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m &amp;lt;- matrix(rnorm(200), ncol = 2)
plot(m)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-30-pipes.vn_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colSums(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -4.1285323  0.6322695&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;toán-tử-exposition-pipe-operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;4. Toán tử &lt;code&gt;%$%&lt;/code&gt; (exposition pipe-operator)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nguyên lý của pipe &lt;code&gt;%$%&lt;/code&gt;:&lt;/strong&gt; Toán tử cho phép trích xuất đích danh một đối tượng trong kết quả của hàm đi trước để sử dụng như dữ liệu đầu vào cho hàm đi sau.&lt;/p&gt;
&lt;p&gt;Ví dụ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris %&amp;gt;%
    subset(Sepal.Length &amp;gt; mean(Sepal.Length)) %$%
    cor(Sepal.Length, Sepal.Width)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3361992&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tương đương với việc sử dụng hàm with():&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;with(subset(iris, Sepal.Length &amp;gt; mean(Sepal.Length)),
     cor(Sepal.Length, Sepal.Width))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3361992&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Biến đổi và trực quan hóa dữ liệu Covid-19 từ John Hopkins database với R</title>
      <link>/post/covid-19-r/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/covid-19-r/</guid>
      <description>


&lt;p&gt;&lt;code&gt;Covid-19&lt;/code&gt; là một đại dịch bệnh truyền nhiễm với tác nhân là virus &lt;code&gt;SARS-CoV-2&lt;/code&gt;, hiện đang ảnh hưởng và gây thiệt hại nặng nề trên phạm vi toàn cầu. Kể từ khi đại dịch &lt;code&gt;Covid-19&lt;/code&gt; bắt đầu xuất hiện ở Vũ Hán - Trung Quốc đến nay, cái tên trường Đại học &lt;code&gt;Jonhs Hopkins&lt;/code&gt; (Mỹ) được nhắc đi nhắc lại hằng ngày trên các phương tiện truyền thông và là một trong những cụm từ được trích dẫn nhiều nhất. Lý do đó là Đại học &lt;code&gt;Johns Hopkins&lt;/code&gt; đã phát triển một trong những hệ thống theo dõi dữ liệu &lt;code&gt;COVID-19&lt;/code&gt; bền bỉ và đáng tin cậy nhất trên thế giới cho đến nay.&lt;/p&gt;
&lt;p&gt;Ở bài trước tôi đã giới thiệu cách download và trực quan hóa dữ liệu &lt;code&gt;Covid-19&lt;/code&gt; từ &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;John Hopkins database&lt;/a&gt; sử dụng ngôn ngữ &lt;code&gt;Python&lt;/code&gt;, cụ thể là sử dụng thư viện &lt;code&gt;pandas&lt;/code&gt; để làm sạch và biến đổi dữ liệu và &lt;code&gt;maplotlib&lt;/code&gt; để trực quan hóa dữ liệu. Ở bài này để chứng minh &lt;code&gt;R&lt;/code&gt; là ngôn ngữ nổi trội trong biến đổi và trực quan hóa dữ liệu, tôi cũng thực hiện công việc tương tự như với &lt;code&gt;Python&lt;/code&gt;. Cụ thể là sử dụng thư viện &lt;code&gt;dplyr&lt;/code&gt; và &lt;code&gt;ggplot2&lt;/code&gt; trong hệ sinh thái &lt;code&gt;tidyverse&lt;/code&gt; kết hợp với toán tử &lt;code&gt;pipes&lt;/code&gt; khiến cho việc làm sạch, biến đổi và trực quan hóa dữ liệu trở nên vô cùng đơn giản - chỉ bằng vài dòng &lt;code&gt;code&lt;/code&gt;. Để so sánh sự khác biệt các bạn có thể đọc lại bài trước về &lt;code&gt;Python&lt;/code&gt; tại &lt;a href=&#34;https://svcuong.github.io/post/covid-19-python/&#34;&gt;đây&lt;/a&gt;. Để biết thêm về toán tử pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; cũng như cách dùng các &lt;code&gt;pipes&lt;/code&gt; khác trong &lt;code&gt;R&lt;/code&gt; các bạn có thể đọc tại &lt;a href=&#34;https://svcuong.github.io/post/pipes/&#34;&gt;đây&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nội dung chính của bài bao gồm:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#sec1&#34;&gt;1. Download &amp;amp; chuẩn bị dữ liệu Covid-19 sử dụng thư viện dplyr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#sec2&#34;&gt;2. Trực quan hóa dữ liệu Covid-19 sử dụng thư viện ggplot2&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;sec1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Download và chuẩn bị dữ liệu&lt;/h2&gt;
&lt;p&gt;Nạp gói &lt;code&gt;tidyverse&lt;/code&gt; vào phiên làm việc của &lt;code&gt;R&lt;/code&gt; để thực hành:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Download 3 tập dữ liệu từ &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;John Hopkins database&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Confirmed:&lt;/code&gt; (Số trường hợp mới phát hiện)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Deaths:&lt;/code&gt; (Số trường hợp tử vong)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Recovered:&lt;/code&gt; (Số trường hợp hồi phục)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url_confd = &amp;#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&amp;#39;
url_death = &amp;#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&amp;#39;
url_recvd = &amp;#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&amp;#39;

df_confd_raw = read.csv(url_confd)
df_death_raw = read.csv(url_death)
df_recvd_raw = read.csv(url_recvd)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Các tập dữ liệu này được lưu ở dạng &lt;code&gt;wide format&lt;/code&gt; do đó chúng ta cần chuyển chúng dạng &lt;code&gt;long fromat&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Chuyển tập dữ liệu df_confd từ wide format sang long fromat
df_confd &amp;lt;- df_confd_raw %&amp;gt;% gather(key=&amp;quot;Date&amp;quot;, value=&amp;quot;Confirmed&amp;quot;, -c(Country.Region, Province.State, Lat, Long)) %&amp;gt;% group_by(Country.Region, Date) %&amp;gt;% summarize(Confirmed=sum(Confirmed))

# Chuyển tập dữ liệu df_death từ wide format sang long fromat
df_death &amp;lt;- df_death_raw %&amp;gt;% gather(key=&amp;quot;Date&amp;quot;, value=&amp;quot;Deaths&amp;quot;, -c(Country.Region, Province.State, Lat, Long)) %&amp;gt;% group_by(Country.Region, Date) %&amp;gt;% summarize(Deaths=sum(Deaths))


# Chuyển tập dữ liệu df_recvd từ wide format sang long fromat
df_recvd &amp;lt;- df_recvd_raw %&amp;gt;% gather(key=&amp;quot;Date&amp;quot;, value=&amp;quot;Recovered&amp;quot;, -c(Country.Region, Province.State, Lat, Long)) %&amp;gt;% group_by(Country.Region, Date) %&amp;gt;% summarize(Recovered=sum(Recovered))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra dữ liệu sau khi đã chuyển:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(df_confd)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
## # Groups:   Country.Region [1]
##   Country.Region Date     Confirmed
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;
## 1 Afghanistan    X1.22.20         0
## 2 Afghanistan    X1.23.20         0
## 3 Afghanistan    X1.24.20         0
## 4 Afghanistan    X1.25.20         0
## 5 Afghanistan    X1.26.20         0
## 6 Afghanistan    X1.27.20         0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(df_death)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
## # Groups:   Country.Region [1]
##   Country.Region Date     Deaths
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
## 1 Afghanistan    X1.22.20      0
## 2 Afghanistan    X1.23.20      0
## 3 Afghanistan    X1.24.20      0
## 4 Afghanistan    X1.25.20      0
## 5 Afghanistan    X1.26.20      0
## 6 Afghanistan    X1.27.20      0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(df_recvd)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
## # Groups:   Country.Region [1]
##   Country.Region Date     Recovered
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;
## 1 Afghanistan    X1.22.20         0
## 2 Afghanistan    X1.23.20         0
## 3 Afghanistan    X1.24.20         0
## 4 Afghanistan    X1.25.20         0
## 5 Afghanistan    X1.26.20         0
## 6 Afghanistan    X1.27.20         0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gộp 3 tập dữ liệu này thành 1 &lt;code&gt;dataframe&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_df &amp;lt;- full_join(df_confd, df_death) %&amp;gt;% full_join(df_recvd)
head(final_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
## # Groups:   Country.Region [1]
##   Country.Region Date     Confirmed Deaths Recovered
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;
## 1 Afghanistan    X1.22.20         0      0         0
## 2 Afghanistan    X1.23.20         0      0         0
## 3 Afghanistan    X1.24.20         0      0         0
## 4 Afghanistan    X1.25.20         0      0         0
## 5 Afghanistan    X1.26.20         0      0         0
## 6 Afghanistan    X1.27.20         0      0         0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chuyển cột dữ liệu &lt;code&gt;Date&lt;/code&gt; về định dạng &lt;code&gt;date&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_df$Date &amp;lt;- final_df$Date %&amp;gt;% sub(&amp;quot;X&amp;quot;, &amp;quot;&amp;quot;,.)%&amp;gt;% as.Date(&amp;quot;%m.%d.%y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra &lt;code&gt;dataframe&lt;/code&gt; thu được:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(final_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
## # Groups:   Country.Region [1]
##   Country.Region Date       Confirmed Deaths Recovered
##   &amp;lt;chr&amp;gt;          &amp;lt;date&amp;gt;         &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;
## 1 Afghanistan    2020-01-22         0      0         0
## 2 Afghanistan    2020-01-23         0      0         0
## 3 Afghanistan    2020-01-24         0      0         0
## 4 Afghanistan    2020-01-25         0      0         0
## 5 Afghanistan    2020-01-26         0      0         0
## 6 Afghanistan    2020-01-27         0      0         0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra kích thước của bảng dữ liệu thu được:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(final_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 41548     5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra khoảng thời gian của dữ liệu được thu thập:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;First date:&amp;#39;, min(final_df$Date)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;First date: 2020-01-22&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Current date:&amp;#39;, max(final_df$Date)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Current date: 2020-08-29&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra &lt;code&gt;missing values (NaN)&lt;/code&gt; trong tập dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colSums(is.na(final_df))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Country.Region           Date      Confirmed         Deaths      Recovered 
##              0              0              0              0              0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sec2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Trực quan hóa dữ liệu với &lt;code&gt;ggplot2&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2.1 Tổng quan tình hình &lt;code&gt;Covid -19&lt;/code&gt; trên toàn thế giới tính tới thời điểm đang viết bài này:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kiểm tra tổng số nước trên toàn thế giới trong tập dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(unique(final_df$Country.Region))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 188&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tổng các &lt;code&gt;cases&lt;/code&gt; trên toàn thế giới:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Tính tổng các cases
df &amp;lt;- final_df[,3:5] %&amp;gt;% summarise_all(funs(sum))
# Thêm cột Active
df$Active &amp;lt;- df$Confirmed -df$Deaths - df$Recovered
df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 4
##    Confirmed   Deaths Recovered    Active
##        &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;
## 1 1517642903 68133485 824551027 624958391&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Tạo data frame các cacses để vẽ pie chart
df1 &amp;lt;- data.frame(Cases = colnames(df), n = as.vector(unlist(df)))

# Tạo pie chart
ggplot(df1, aes (x=&amp;quot;&amp;quot;, y = n, fill = factor(Cases))) + 
  geom_col(position = &amp;#39;stack&amp;#39;, width = 1) +
  geom_text(aes(label = paste(round(n / sum(n) * 100, 1), &amp;quot;%&amp;quot;), x = 1.3),
            position = position_stack(vjust = 0.5)) +
  theme_void() +
  labs(fill = &amp;quot;Cases&amp;quot;,
       x = NULL,
       y = NULL,
       title = &amp;quot;Pie Chart of Covid-19 cases in the world&amp;quot;) +
  coord_polar(&amp;quot;y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 Top 10 nước có số &lt;code&gt;cases&lt;/code&gt; lớn nhất&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tính tổng các &lt;code&gt;cases&lt;/code&gt; của từng nước tính đến thời điểm hiện tại:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_countries &amp;lt;- final_df %&amp;gt;% select(-Date) %&amp;gt;% group_by(Country.Region) %&amp;gt;% summarise_all(funs(sum))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;confirmed cases&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Lọc top 10 nước theo Confirmed Cases
confirmed &amp;lt;- df_countries %&amp;gt;% arrange(desc(Confirmed)) %&amp;gt;% slice(1:10)
confirmed$Country.Region &amp;lt;- factor(confirmed$Country.Region, levels=unique(confirmed$Country.Region))
# Vẽ barplot
ggplot(confirmed, aes(x=Confirmed, y=Country.Region, fill= Country.Region))+
  geom_bar(stat=&amp;#39;identity&amp;#39;)+
  ggtitle(&amp;quot;Top 10 Countries (Confirmed cases)&amp;quot;) +
  theme_bw()+
  theme(legend.position=&amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;Death cases&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Lọc top 10 nước theo Confirmed Cases
deaths&amp;lt;- df_countries %&amp;gt;% arrange(desc(Deaths)) %&amp;gt;% slice(1:10)

deaths$Country.Region &amp;lt;- factor(deaths$Country.Region, levels=unique(deaths$Country.Region))
ggplot(deaths, aes(x=Deaths, y=Country.Region, fill= Country.Region))+
  geom_bar(stat=&amp;#39;identity&amp;#39;)+
  ggtitle(&amp;quot;Top 10 Countries (Deaths)&amp;quot;) +
  theme_bw()+
  theme(legend.position=&amp;quot;none&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;Recovered Cases&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Lọc top 10 nước theo Confirmed Cases
recovered &amp;lt;- df_countries %&amp;gt;% arrange(desc(Recovered)) %&amp;gt;% slice(1:10)
recovered$Country.Region &amp;lt;- factor(recovered$Country.Region, levels=unique(recovered$Country.Region))
ggplot(recovered, aes(x=Recovered, y=Country.Region, fill= Country.Region))+
  geom_bar(stat=&amp;#39;identity&amp;#39;)+
  ggtitle(&amp;quot;Top 10 Countries (Recovered Cases)&amp;quot;) +
  theme_bw()+
  theme(legend.position=&amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3 Mức độ phát triển của Covid-19 theo thời gian trên toàn thế giới&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tính tổng các &lt;code&gt;cases&lt;/code&gt; trên toàn thế giới theo thời gian&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world &amp;lt;- final_df %&amp;gt;% group_by(Date) %&amp;gt;% summarize(Confirmed=sum(Confirmed), Deaths=sum(Deaths), Recovered=sum(Recovered))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Confirmed cases&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(world, aes(x=Date, y=Confirmed)) + geom_bar(stat=&amp;quot;identity&amp;quot;, width=0.2, color = &amp;quot;blue&amp;quot;) +
  theme_bw() +
  labs(title = &amp;quot;Confirmed Cases In Each Days&amp;quot;, x= &amp;quot;Date&amp;quot;, y= &amp;quot;Confirmed cases&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Deaths&lt;/code&gt; trên toàn thế giới theo thời gian:`&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(world, aes(x=Date, y=Deaths)) + geom_bar(stat=&amp;quot;identity&amp;quot;, width=0.2, color = &amp;quot;green&amp;quot;) +
  theme_bw() +
  labs(title = &amp;quot;Deaths In Each Day&amp;quot;, x= &amp;quot;Date&amp;quot;, y= &amp;quot;Death cases&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Recovered cases&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(world, aes(x=Date, y=Recovered)) + geom_bar(stat=&amp;quot;identity&amp;quot;, width=0.2, color = &amp;quot;purple&amp;quot;) +
  theme_bw() +
  labs(title = &amp;quot;Recovered cases In Each Day&amp;quot;, x= &amp;quot;Date&amp;quot;, y= &amp;quot;Recovered cases&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.4 Hiển thị tất cả các cases trên thế giới theo thời gian&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world %&amp;gt;% gather(&amp;quot;Cases&amp;quot;, &amp;quot;value&amp;quot;, -Date) %&amp;gt;%
ggplot(aes(x=Date, y=value, colour=Cases)) + geom_bar(stat=&amp;quot;identity&amp;quot;, width=0.2, fill=&amp;quot;white&amp;quot;) +
  labs(title = &amp;quot;Covid-19 Global Cases&amp;quot;, x= &amp;quot;Date&amp;quot;, y= &amp;quot;Daily cases&amp;quot;)+
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world %&amp;gt;% gather(&amp;quot;Cases&amp;quot;, &amp;quot;value&amp;quot;, -Date) %&amp;gt;%
ggplot(aes(x=Date, y=value, colour=Cases)) + geom_line(, size = 1) +
  labs(title = &amp;quot;Covid-19 Global Cases&amp;quot;, x= &amp;quot;Date&amp;quot;, y= &amp;quot;Daily cases&amp;quot;)+
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.5 So sánh sự phát triển của COVID-19 theo thời gian giữa các nước&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So sánh Việt Nam, Mỹ, Nga:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_df %&amp;gt;% filter(Country.Region == &amp;quot;Vietnam&amp;quot;) %&amp;gt;% gather(&amp;quot;Cases&amp;quot;, &amp;quot;value&amp;quot;, -Country.Region, -Date) %&amp;gt;%
ggplot(aes(x=Date, y=value, colour=Cases)) + geom_line(, size = 1) +
  labs(title = &amp;quot;COVID-19 cases of Vietnam&amp;quot;, x= &amp;quot;Date&amp;quot;, y= &amp;quot;Daily cases&amp;quot;)+
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_df %&amp;gt;% filter(Country.Region == &amp;quot;US&amp;quot;) %&amp;gt;% gather(&amp;quot;Cases&amp;quot;, &amp;quot;value&amp;quot;, -Country.Region, -Date) %&amp;gt;%
ggplot(aes(x=Date, y=value, colour=Cases)) + geom_line(, size = 1) +
  labs(title = &amp;quot;COVID-19 cases of US&amp;quot;, x= &amp;quot;Date&amp;quot;, y= &amp;quot;Daily cases&amp;quot;)+
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_df %&amp;gt;% filter(Country.Region == &amp;quot;Russia&amp;quot;) %&amp;gt;% gather(&amp;quot;Cases&amp;quot;, &amp;quot;value&amp;quot;, -Country.Region, -Date) %&amp;gt;%
ggplot(aes(x=Date, y=value, colour=Cases)) + geom_line(, size = 1) +
  labs(title = &amp;quot;COVID-19 cases of Russia&amp;quot;, x= &amp;quot;Date&amp;quot;, y= &amp;quot;Daily cases&amp;quot;)+
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-28-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Do thực hiện công việc tương tự như &lt;code&gt;Python&lt;/code&gt; nhưng mà nhanh quá, nên tôi thử tạo thêm bản đồ phân bố dịch này nữa:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Chuẩn bị dữ liệu
country &amp;lt;- final_df %&amp;gt;% group_by(Country.Region) %&amp;gt;% mutate(Cumconfirmed=cumsum(Confirmed))

world &amp;lt;- country %&amp;gt;% group_by(Date) %&amp;gt;% summarize(Confirmed=sum(Confirmed), Cumconfirmed=sum(Cumconfirmed), Deaths=sum(Deaths), Recovered=sum(Recovered)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Map
countrytotal &amp;lt;- country %&amp;gt;% group_by(Country.Region) %&amp;gt;% summarize(Cumconfirmed=sum(Confirmed), Cumdeaths=sum(Deaths), Cumrecovered=sum(Recovered))
# Basemap from package tmap
library(tmap)
data(World)

# Combine basemap data với covid data
list &amp;lt;- which(!countrytotal$Country.Region %in% World$name)
countrytotal$country &amp;lt;- as.character(countrytotal$Country.Region)
countrytotal$country[list] &amp;lt;-
  c(&amp;quot;Andorra&amp;quot;, &amp;quot;Antigua and Barbuda&amp;quot;, &amp;quot;Bahrain&amp;quot;,
    &amp;quot;Barbados&amp;quot;, &amp;quot;Bosnia and Herz.&amp;quot;, &amp;quot;Myanmar&amp;quot;,
    &amp;quot;Cape Verde&amp;quot;, &amp;quot;Central African Rep.&amp;quot;, &amp;quot;Congo&amp;quot;,
    &amp;quot;Dem. Rep. Congo&amp;quot;, &amp;quot;Czech Rep.&amp;quot;, &amp;quot;Diamond Princess&amp;quot;,
    &amp;quot;Dominica&amp;quot;, &amp;quot;Dominican Rep.&amp;quot;, &amp;quot;Eq. Guinea&amp;quot;,
    &amp;quot;Swaziland&amp;quot;, &amp;quot;Grenada&amp;quot;, &amp;quot;Holy See&amp;quot;,
    &amp;quot;Korea&amp;quot;, &amp;quot;Lao PDR&amp;quot;, &amp;quot;Liechtenstein&amp;quot;,
    &amp;quot;Maldives&amp;quot;, &amp;quot;Malta&amp;quot;, &amp;quot;Mauritius&amp;quot;,
    &amp;quot;Monaco&amp;quot;, &amp;quot;MS Zaandam&amp;quot;, &amp;quot;Macedonia&amp;quot;,
    &amp;quot;Saint Kitts and Nevis&amp;quot;, &amp;quot;Saint Lucia&amp;quot;, &amp;quot;Saint Vincent and the Grenadines&amp;quot;,
    &amp;quot;San Marino&amp;quot;, &amp;quot;Sao Tome and Principe&amp;quot;, &amp;quot;Seychelles&amp;quot;,
    &amp;quot;Singapore&amp;quot;, &amp;quot;S. Sudan&amp;quot;, &amp;quot;Taiwan&amp;quot;,
    &amp;quot;United States&amp;quot;, &amp;quot;Palestine&amp;quot;, &amp;quot;W. Sahara&amp;quot;)
World$country &amp;lt;- World$name
worldmap &amp;lt;- left_join(World, countrytotal, by=&amp;quot;country&amp;quot;)
worldmap$cumconfirmed[is.na(worldmap$Cumconfirmed)] &amp;lt;- 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Map
ggplot(data = worldmap) + geom_sf(aes(fill=Cumconfirmed), color=&amp;quot;black&amp;quot;) +
  ggtitle(&amp;quot;World Map of Confirmed Covid Cases&amp;quot;,
          subtitle=&amp;quot;Total Cases on  August  29, 2020&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/covid-19-r/index_files/figure-html/unnamed-chunk-31-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Download và trực quan hóa dữ liệu Covid-19 từ John Hopkins database (sử dụng Python code)</title>
      <link>/post/covid-19-python/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/covid-19-python/</guid>
      <description>&lt;p&gt;&lt;code&gt;Covid-19&lt;/code&gt; là một đại dịch bệnh truyền nhiễm với tác nhân là virus &lt;code&gt;SARS-CoV-2&lt;/code&gt;, hiện đang ảnh hưởng và gây thiệt hại nặng nề trên phạm vi toàn cầu. Kể từ khi đại dịch &lt;code&gt;Covid-19&lt;/code&gt; bắt đầu xuất hiện ở Vũ Hán - Trung Quốc đến nay, cái tên trường Đại học Jonhs Hopkins (Mỹ) được nhắc đi nhắc lại hằng ngày trên các phương tiện truyền thông và là một trong những cụm từ được trích dẫn nhiều nhất. Lý do đó là Đại học Johns Hopkins đã phát triển một trong những hệ thống theo dõi dữ liệu COVID-19 bền bỉ và đáng tin cậy nhất trên thế giới cho đến nay.&lt;/p&gt;
&lt;p&gt;Dữ liệu Covid-19 được đại học &lt;code&gt;John Hopkins&lt;/code&gt; thu thập và cập nhật hàng ngày tại đây 
&lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Hopkins database&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Trong bài này để hiểu hơn về đại dịch này tôi sẽ hướng dẫn các bạn cách download dữ liệu Covid-19 từ 
&lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Hopkins database&lt;/a&gt; và thực hành các thao tác chuẩn bị dữ liệu (làm sạch và biến đổi) với thư viện &lt;code&gt;pandas&lt;/code&gt; và trực quan hóa dữ liệu với thư viện &lt;code&gt;maplotlib&lt;/code&gt; sử dụng ngôn ngữ Python. Sau khi đọc xong bài này các bạn sẽ nắm được:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cách download dữ liệu Covid-19 từ &lt;code&gt;Jonh Hopkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cách làm sạch và biến đổi dữ liệu dạng &lt;code&gt;data frame&lt;/code&gt; với thư viện &lt;code&gt;pandas&lt;/code&gt;: xử lý dữ liệu bị thiếu, gộp các dataframes, chuyển đổi dữ liệu từ dạng &lt;code&gt;wide format&lt;/code&gt; sang dạng &lt;code&gt;long fromat&lt;/code&gt;, subset,&amp;hellip;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cách trực quan hóa dữ liệu &lt;code&gt;Covid-19&lt;/code&gt; sử dụng thư viện &lt;code&gt;matplotlib&lt;/code&gt;: Pie chart, Bar chart, Line chart, Multi-Line Chart, xử lý dữ liệu &lt;code&gt;date&lt;/code&gt; trong vẽ biểu đồ,&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Từ đó các bạn có thể phát triển các kỹ thuật trên thành các &lt;code&gt;Data visualization Dashboards&lt;/code&gt; hoặc là web tương tác để &lt;code&gt;tracking&lt;/code&gt; tình hình &lt;code&gt;Covid-19&lt;/code&gt; trên toàn thế giới tương tự như 
&lt;a href=&#34;https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Hopkins University Dashboard&lt;/a&gt;, 
&lt;a href=&#34;https://covid19.who.int/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WHO COVID-19 Dashboard&lt;/a&gt;,&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;nội-dung-chính-của-bài-bao-gồm&#34;&gt;Nội dung chính của bài bao gồm:&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;#prepare-data&#34;&gt;1. Download &amp;amp; chuẩn bị dữ liệu Covid-19 sử dụng thư viện pandas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;#data-visualization&#34;&gt;2. Trực quan hóa dữ liệu Covid-19 sử dụng thư viện matploblib&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;prepare-data&#34;&gt;1. Download và chuẩn bị dữ liệu&lt;/h2&gt;
&lt;p&gt;Trước hết để thực hành chúng ta cần nạp các thư viện cần thiết trên &lt;code&gt;Python&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime, timedelta
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Để thực hành tôi sẽ load 3 tập dữ liệu sau từ kho dữ liệu qua &lt;code&gt;url_links&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Confirmed:&lt;/code&gt; (Số trường hợp mới phát hiện)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Deaths:&lt;/code&gt; (Số trường hợp tử vong)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Recovered:&lt;/code&gt; (Số trường hợp hồi phục)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url_confd = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39;
url_death = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39;
url_recvd = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&#39;
df_confd = pd.read_csv(url_confd)
df_death = pd.read_csv(url_death)
df_recvd = pd.read_csv(url_recvd)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra thông tin các tập dữ liệu này:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df_confd.info())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 266 entries, 0 to 265
Columns: 224 entries, Province/State to 8/28/20
dtypes: float64(2), int64(220), object(2)
memory usage: 465.6+ KB
None
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df_death.info())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 266 entries, 0 to 265
Columns: 224 entries, Province/State to 8/28/20
dtypes: float64(2), int64(220), object(2)
memory usage: 465.6+ KB
None
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df_recvd.info())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 253 entries, 0 to 252
Columns: 223 entries, Province/State to 8/27/20
dtypes: float64(2), int64(219), object(2)
memory usage: 440.9+ KB
None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra 5 hàng đầu tiên của tập dữ liệu &lt;code&gt;df_confd&lt;/code&gt; (2 tập còn lại tương tự):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df_confd.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long  1/22/20  1/23/20  \
0            NaN    Afghanistan  33.93911  67.709953        0        0   
1            NaN        Albania  41.15330  20.168300        0        0   
2            NaN        Algeria  28.03390   1.659600        0        0   
3            NaN        Andorra  42.50630   1.521800        0        0   
4            NaN         Angola -11.20270  17.873900        0        0   

   1/24/20  1/25/20  1/26/20  1/27/20  ...  8/19/20  8/20/20  8/21/20  \
0        0        0        0        0  ...    37599    37856    37894   
1        0        0        0        0  ...     7812     7967     8119   
2        0        0        0        0  ...    39847    40258    40667   
3        0        0        0        0  ...     1024     1024     1045   
4        0        0        0        0  ...     2015     2044     2068   

   8/22/20  8/23/20  8/24/20  8/25/20  8/26/20  8/27/20  8/28/20  
0    37953    37999    38054    38070    38113    38129    38140  
1     8275     8427     8605     8759     8927     9083     9195  
2    41068    41460    41858    42228    42619    43016    43403  
3     1045     1045     1060     1060     1098     1098     1124  
4     2134     2171     2222     2283     2332     2415     2471  

[5 rows x 224 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trích xuất thông tin về ngày từ tập dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dates = df_confd.columns[4:]
print(dates)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Index([&#39;1/22/20&#39;, &#39;1/23/20&#39;, &#39;1/24/20&#39;, &#39;1/25/20&#39;, &#39;1/26/20&#39;, &#39;1/27/20&#39;,
       &#39;1/28/20&#39;, &#39;1/29/20&#39;, &#39;1/30/20&#39;, &#39;1/31/20&#39;,
       ...
       &#39;8/19/20&#39;, &#39;8/20/20&#39;, &#39;8/21/20&#39;, &#39;8/22/20&#39;, &#39;8/23/20&#39;, &#39;8/24/20&#39;,
       &#39;8/25/20&#39;, &#39;8/26/20&#39;, &#39;8/27/20&#39;, &#39;8/28/20&#39;],
      dtype=&#39;object&#39;, length=220)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Các tập dữ liệu này được lưu ở dạng &lt;code&gt;wide format&lt;/code&gt; do đó chúng ta cần chuyển chúng dạng &lt;code&gt;long fromat&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dates = df_confd.columns[4:]
long_df_confd = df_confd.melt(id_vars=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;], 
                            value_vars=dates, var_name=&#39;Date&#39;, value_name=&#39;Confirmed&#39;)

long_df_death = df_death.melt(id_vars=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;], 
                            value_vars=dates, var_name=&#39;Date&#39;, value_name=&#39;Deaths&#39;)

long_df_recvd = df_recvd.melt(id_vars=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;], 
                            value_vars=dates, var_name=&#39;Date&#39;, value_name=&#39;Recovered&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra dữ liệu sau khi đã chuyển:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(long_df_confd.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long     Date  Confirmed
0            NaN    Afghanistan  33.93911  67.709953  1/22/20          0
1            NaN        Albania  41.15330  20.168300  1/22/20          0
2            NaN        Algeria  28.03390   1.659600  1/22/20          0
3            NaN        Andorra  42.50630   1.521800  1/22/20          0
4            NaN         Angola -11.20270  17.873900  1/22/20          0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(long_df_death.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long     Date  Deaths
0            NaN    Afghanistan  33.93911  67.709953  1/22/20       0
1            NaN        Albania  41.15330  20.168300  1/22/20       0
2            NaN        Algeria  28.03390   1.659600  1/22/20       0
3            NaN        Andorra  42.50630   1.521800  1/22/20       0
4            NaN         Angola -11.20270  17.873900  1/22/20       0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(long_df_recvd.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long     Date  Recovered
0            NaN    Afghanistan  33.93911  67.709953  1/22/20          0
1            NaN        Albania  41.15330  20.168300  1/22/20          0
2            NaN        Algeria  28.03390   1.659600  1/22/20          0
3            NaN        Andorra  42.50630   1.521800  1/22/20          0
4            NaN         Angola -11.20270  17.873900  1/22/20          0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gộp 3 tập dữ liệu này thành 1 dataframe:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df = pd.merge(left=long_df_confd, right=long_df_death, how=&#39;left&#39;,
                      on=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Date&#39;, &#39;Lat&#39;, &#39;Long&#39;])
final_df = pd.merge(left=final_df, right=long_df_recvd, how=&#39;left&#39;,
                      on=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Date&#39;, &#39;Lat&#39;, &#39;Long&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chuyển cột dữ liệu ngày về dạng &lt;code&gt;date&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df[&#39;Date&#39;] = pd.to_datetime(final_df[&#39;Date&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra bảng dữ liệu thu được:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(final_df.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long       Date  Confirmed  \
0            NaN    Afghanistan  33.93911  67.709953 2020-01-22          0   
1            NaN        Albania  41.15330  20.168300 2020-01-22          0   
2            NaN        Algeria  28.03390   1.659600 2020-01-22          0   
3            NaN        Andorra  42.50630   1.521800 2020-01-22          0   
4            NaN         Angola -11.20270  17.873900 2020-01-22          0   

   Deaths  Recovered  
0       0        0.0  
1       0        0.0  
2       0        0.0  
3       0        0.0  
4       0        0.0  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra kích thước của bảng dữ liệu thu được:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(final_df.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(58520, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra khoảng thời gian của dữ liệu được thu thập:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = final_df.Date.value_counts().sort_index()
print(&#39;Ngày bắt đầu là:&#39;,a.index[0])
print(&#39;Ngày hiện tại là:&#39;,a.index[-1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Ngày bắt đầu là: 2020-01-22 00:00:00
Ngày hiện tại là: 2020-08-28 00:00:00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra &lt;code&gt;missing values (NaN)&lt;/code&gt; trong tập dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df.isna().sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Province/State    40515
Country/Region        0
Lat                   0
Long                  0
Date                  0
Confirmed             0
Deaths                0
Recovered          4161
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Đánh giá phần trăm &lt;code&gt;missing values&lt;/code&gt; của từng cột dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;NAN = [(c, final_df[c].isna().mean()*100) for c in final_df]
NAN = pd.DataFrame(NAN, columns=[&amp;quot;column_name&amp;quot;, &amp;quot;percentage&amp;quot;])
print(NAN)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;      column_name  percentage
0  Province/State   69.548872
1  Country/Region    0.000000
2             Lat    0.000000
3            Long    0.000000
4            Date    0.000000
5       Confirmed    0.000000
6          Deaths    0.000000
7       Recovered    7.142857
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ta thấy cột &lt;code&gt;Province/State&lt;/code&gt; có gần &lt;code&gt;69.55%&lt;/code&gt; dữ liệu bị thiếu và cột &lt;code&gt;Recovered&lt;/code&gt; có &lt;code&gt;7,14%&lt;/code&gt;. Vì vậy chúng ta cần xử lý các giá trị thiếu này:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Thay thế nan thành 0 cho cột Recovered
final_df[&#39;Recovered&#39;] = final_df[&#39;Recovered&#39;].fillna(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Thay thế nan thành Unknown cho cột Province/State
final_df[&amp;quot;Province/State&amp;quot;]= final_df[&amp;quot;Province/State&amp;quot;].fillna(&#39;Unknown&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra xem trong dữ liệu còn &lt;code&gt;missing values&lt;/code&gt; không:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df.isna().sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Province/State    0
Country/Region    0
Lat               0
Long              0
Date              0
Confirmed         0
Deaths            0
Recovered         0
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra kiểu dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(final_df.dtypes)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Province/State            object
Country/Region            object
Lat                      float64
Long                     float64
Date              datetime64[ns]
Confirmed                  int64
Deaths                     int64
Recovered                float64
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thay đổi kiểu dữ liệu cho các cột &lt;code&gt;Confirmed, Deaths và Recovered&lt;/code&gt; thành &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df[[&amp;quot;Confirmed&amp;quot;,&amp;quot;Deaths&amp;quot;,&amp;quot;Recovered&amp;quot;]] = final_df[[&amp;quot;Confirmed&amp;quot;,&amp;quot;Deaths&amp;quot;,&amp;quot;Recovered&amp;quot;]].astype(int)
print(final_df.dtypes)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Province/State            object
Country/Region            object
Lat                      float64
Long                     float64
Date              datetime64[ns]
Confirmed                  int32
Deaths                     int32
Recovered                  int32
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tạo thuộc tính mới &lt;code&gt;Active&lt;/code&gt; (Số trường hợp còn đang nhiễm sau khi đã trừ đi số trường hợp tử vong và hồi phục): 
$$Active = Confirmed - Deaths - Recovered$$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df[&#39;Active&#39;] = final_df[&#39;Confirmed&#39;] - final_df[&#39;Deaths&#39;] - final_df[&#39;Recovered&#39;]
print(final_df.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long       Date  Confirmed  \
0        Unknown    Afghanistan  33.93911  67.709953 2020-01-22          0   
1        Unknown        Albania  41.15330  20.168300 2020-01-22          0   
2        Unknown        Algeria  28.03390   1.659600 2020-01-22          0   
3        Unknown        Andorra  42.50630   1.521800 2020-01-22          0   
4        Unknown         Angola -11.20270  17.873900 2020-01-22          0   

   Deaths  Recovered  Active  
0       0          0       0  
1       0          0       0  
2       0          0       0  
3       0          0       0  
4       0          0       0  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data-visualization&#34;&gt;2. Trực quan hóa dữ liệu&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2.1 Tổng quan tình hình Covid -19 trên toàn thế giới tính tới thời điểm đang viết bài này:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kiểm tra tổng số nước trên toàn thế giới trong tập dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(final_df[&#39;Country/Region&#39;].unique())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;188
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tổng các cases trên toàn thế giới:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(pd.to_numeric(final_df[[&#39;Confirmed&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;, &#39;Active&#39;]].sum()),dtype=np.float64).transpose()
df[&#39;Last date&#39;] = max(final_df[&#39;Date&#39;])
print(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;      Confirmed      Deaths    Recovered       Active  Last date
0  1.492646e+09  67290986.0  798778726.0  626576735.0 2020-08-28
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tạo &lt;code&gt;Pie chart&lt;/code&gt; so sánh các cases trên toàn thế giới:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cases = [&#39;Confirmed&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;, &#39;Active&#39;]
colors = [&#39;gold&#39;, &#39;yellowgreen&#39;, &#39;lightcoral&#39;, &#39;lightskyblue&#39;]
explode = (0.1, 0, 0, 0)  # explode 1st slice
sizes = sum(df.loc[:, &#39;Confirmed&#39;:&#39;Active&#39;].values)
explode = (0.1, 0, 0, 0)  # explode 1st slice

# Plot
f = plt.figure(figsize=(8,8))
plt.pie(sizes, explode=explode, 
        textprops=dict(size=15,color=&#39;black&#39;),
        labels=cases, 
        colors=colors,
        autopct=&#39;%1.1f%%&#39;, 
        shadow=True, 
        startangle=140)
plt.axis(&#39;equal&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_54_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 Top 10 nước có số trường hợp (confirmed, deaths, recovered and active cases) lớn nhất&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tính tổng các &lt;code&gt;cases&lt;/code&gt; của từng nước tính đến thười điểm hiện tại:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_countries = final_df.copy().drop([&#39;Lat&#39;,&#39;Long&#39;,&#39;Province/State&#39;, &#39;Date&#39;],axis =1)
df_countries = df_countries.groupby([&amp;quot;Country/Region&amp;quot;]).sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;confirmed cases&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = plt.figure(figsize=(10,5))
f.add_subplot(111)
plt.axes(axisbelow=True)
plt.barh(df_countries.sort_values(&#39;Confirmed&#39;)[&amp;quot;Confirmed&amp;quot;].index[-10:],df_countries.sort_values(&#39;Confirmed&#39;)[&amp;quot;Confirmed&amp;quot;].values[-10:],color=&amp;quot;darkcyan&amp;quot;)
plt.tick_params(size=5,labelsize = 13)
plt.xlabel(&amp;quot;Confirmed Cases&amp;quot;,fontsize=18)
plt.title(&amp;quot;Top 10 Countries (Confirmed Cases)&amp;quot;,fontsize=20)
plt.grid(alpha=0.3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_59_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;Deaths&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = plt.figure(figsize=(10,5))
f.add_subplot(111)

plt.axes(axisbelow=True)
plt.barh(df_countries.sort_values(&#39;Deaths&#39;)[&amp;quot;Deaths&amp;quot;].index[-10:],df_countries.sort_values(&#39;Deaths&#39;)[&amp;quot;Deaths&amp;quot;].values[-10:],color=&amp;quot;crimson&amp;quot;)
plt.tick_params(size=5,labelsize = 13)
plt.xlabel(&amp;quot;Deaths Cases&amp;quot;,fontsize=18)
plt.title(&amp;quot;Top 10 Countries (Deaths)&amp;quot;,fontsize=20)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_61_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;Recovered Cases&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = plt.figure(figsize=(10,5))
f.add_subplot(111)

plt.axes(axisbelow=True)
plt.barh(df_countries.sort_values(&#39;Recovered&#39;)[&amp;quot;Recovered&amp;quot;].index[-10:],df_countries.sort_values(&#39;Recovered&#39;)[&amp;quot;Recovered&amp;quot;].values[-10:],color=&amp;quot;limegreen&amp;quot;)
plt.tick_params(size=5,labelsize = 13)
plt.xlabel(&amp;quot;Recovered Cases&amp;quot;,fontsize=18)
plt.title(&amp;quot;Top 10 Countries (Recovered Cases)&amp;quot;,fontsize=20)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_63_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;Active Cases&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = plt.figure(figsize=(10,5))
f.add_subplot(111)

plt.axes(axisbelow=True)
plt.barh(df_countries.sort_values(&#39;Active&#39;)[&amp;quot;Active&amp;quot;].index[-10:],df_countries.sort_values(&#39;Active&#39;)[&amp;quot;Active&amp;quot;].values[-10:],color=&amp;quot;darkorange&amp;quot;)
plt.tick_params(size=5,labelsize = 13)
plt.xlabel(&amp;quot;Active Cases&amp;quot;,fontsize=18)
plt.title(&amp;quot;Top 10 Countries (Active Cases)&amp;quot;,fontsize=20)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_65_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3 Mức độ phát triển của Covid-19 theo thời gian trên toàn thế giới&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tính tổng các &lt;code&gt;cases&lt;/code&gt; trên toàn thế giới theo thời gian&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_world = final_df.groupby([&amp;quot;Date&amp;quot;])[[&amp;quot;Confirmed&amp;quot;,&amp;quot;Active&amp;quot;,&amp;quot;Recovered&amp;quot;,&amp;quot;Deaths&amp;quot;]].sum().reset_index()
df_world.set_index(&#39;Date&#39;,inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Confirmed cases&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(10, 6))

# Add x-axis and y-axis
ax.bar(df_world.index.values,
        df_world[&#39;Confirmed&#39;],
        color=&#39;blue&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Confirmed cases&amp;quot;,
       title=&amp;quot;Confirmed Cases In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_70_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Deaths&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(10, 6))

# Add x-axis and y-axis
ax.bar(df_world.index.values,
        df_world[&#39;Deaths&#39;],
        color=&#39;red&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Deaths&amp;quot;,
       title=&amp;quot;Deaths In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_72_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Recovered cases&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(10, 6))

# Add x-axis and y-axis
ax.bar(df_world.index.values,
        df_world[&#39;Recovered&#39;],
        color=&#39;purple&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Recovered cases&amp;quot;,
       title=&amp;quot;Recovered Cases In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_74_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Active Cases&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(10, 6))

# Add x-axis and y-axis
ax.bar(df_world.index.values,
        df_world[&#39;Active&#39;],
        color= &#39;green&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Active Cases&amp;quot;,
       title=&amp;quot;Active Cases In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_76_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.4 Hiển thị tất cả các cases trên thế giới theo thời gian&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(12, 6))

# Add x-axis and y-axis
ax.plot(df_world.index.values,
        df_world[&#39;Confirmed&#39;],
        color=&#39;blue&#39;, label = &#39;Confirmed Cases&#39;)

ax.plot(df_world.index.values,
        df_world[&#39;Deaths&#39;],
        color=&#39;red&#39;, label = &#39;Deaths&#39;)

ax.plot(df_world.index.values,
        df_world[&#39;Recovered&#39;],
        color=&#39;purple&#39;, label = &#39;Recovered Cases&#39;)


ax.plot(df_world.index.values,
        df_world[&#39;Active&#39;],
        color= &#39;green&#39;,  label= &#39;Active Cases&#39;)


# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Cases&amp;quot;,
       title=&amp;quot;COVID-19 Cases In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.legend(loc=&amp;quot;upper left&amp;quot;)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_78_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.5 Tổng số lượng các quốc gia trên thế giới xuất hiện dịch bệnh Covid-19 theo thời gian&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Tính tổng số lượng các nước xuất hiện dịch Covid-19 theo thời gian
case_nums_country = df_confd.groupby(&amp;quot;Country/Region&amp;quot;).sum().drop([&#39;Lat&#39;,&#39;Long&#39;],axis =1).apply(lambda x: x[x &amp;gt; 0].count(), axis =0)
d = [datetime.strptime(date,&#39;%m/%d/%y&#39;).strftime(&amp;quot;%d %b&amp;quot;) for date in case_nums_country.index]

f = plt.figure(figsize=(10,5))
f.add_subplot(111)
marker_style = dict(c=&amp;quot;crimson&amp;quot;,linewidth=1, linestyle=&#39;-&#39;, marker=&#39;o&#39;,markersize=4, markerfacecolor=&#39;blue&#39;)
plt.plot(df_world.index.values, case_nums_country,**marker_style)
plt.setp(ax.get_xticklabels(), rotation=90)
plt.xlabel(&amp;quot;Dates&amp;quot;,fontsize=10)
plt.grid(alpha = 0.3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_80_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.6 So sánh sự phát triển của COVID-19 theo thời gian giữa các nước&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So sánh Việt Nam, Mỹ, Nga:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Vietnam = final_df[final_df[&#39;Country/Region&#39;] == &#39;Vietnam&#39;]
df_Russia = final_df[final_df[&#39;Country/Region&#39;] == &#39;Russia&#39;]
df_US = final_df[final_df[&#39;Country/Region&#39;] == &#39;US&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do Mỹ và Nga cùng có số lượng các &lt;code&gt;cases&lt;/code&gt; lớn nên biểu thị vào cùng một biểu đồ:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(12, 6))

# Add x-axis and y-axis
ax.plot(df_US[&#39;Date&#39;],
        df_US[&#39;Confirmed&#39;],
        color=&#39;blue&#39;, label = &#39;Confirmed Cases of US&#39;)

ax.plot(df_US[&#39;Date&#39;],
        df_US[&#39;Active&#39;],
        &#39;-.&#39;,
        color=&#39;blue&#39;, label = &#39;Active Cases of US&#39;)

ax.plot(df_US[&#39;Date&#39;],
        df_US[&#39;Recovered&#39;],
        &#39;--&#39;,
        color=&#39;blue&#39;, label = &#39;Recovered Cases of US&#39;)

ax.plot(df_Russia[&#39;Date&#39;],
        df_Russia[&#39;Confirmed&#39;],
        color=&#39;red&#39;, label = &#39;Confirmed Cases of Russia&#39;)

ax.plot(df_Russia[&#39;Date&#39;],
        df_Russia[&#39;Active&#39;],
        &#39;-.&#39;,
        color=&#39;red&#39;, label = &#39;Active Cases of Russia&#39;)

ax.plot(df_Russia[&#39;Date&#39;],
        df_Russia[&#39;Recovered&#39;],
        &#39;--&#39;,
        color=&#39;red&#39;, label = &#39;Recovered Cases of Russia&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Cases&amp;quot;,
       title=&amp;quot;Confirmed Cases of COVID-19 of Russia vs US&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.legend(loc=&amp;quot;upper left&amp;quot;)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_84_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Việt nam có tổng số các &lt;code&gt;cases&lt;/code&gt; nhỏ hơn rất nhiều so với Russia và Mỹ nên nếu biểu thị vào cùng 1 biểu đồ thì sẽ rất khó nhìn. Do vậy tôi biểu diễn Việt Nam riêng:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(figsize=(12, 6))

# Add x-axis and y-axis


ax.plot(df_Vietnam[&#39;Date&#39;],
        df_Vietnam[&#39;Confirmed&#39;],
        color=&amp;quot;red&amp;quot;, label = &#39;Confirmed Cases of Vietnam&#39;)

ax.plot(df_Vietnam[&#39;Date&#39;],
        df_Vietnam[&#39;Deaths&#39;],
        &#39;-.&#39;,
        color=&amp;quot;black&amp;quot;, label = &#39;Death Case of Vietnam&#39;)

ax.plot(df_Vietnam[&#39;Date&#39;],
        df_Vietnam[&#39;Active&#39;],
        &#39;-.&#39;,
        color=&amp;quot;blue&amp;quot;, label = &#39;Active Cases of Vietnam&#39;)

ax.plot(df_Vietnam[&#39;Date&#39;],
        df_Vietnam[&#39;Recovered&#39;],
        &#39;--&#39;,
        color=&amp;quot;green&amp;quot;, label = &#39;Recovered Cases of Vietnam&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Cases&amp;quot;,
       title=&amp;quot;COVID-19 cases of Vietnam&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.legend(loc=&amp;quot;upper left&amp;quot;)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_86_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ý  nghĩa của biểu đồ tán xạ (scatter plot) trong dự đoán và đánh giá chất lượng mô hình dự đoán.</title>
      <link>/post/scatter-plot/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/scatter-plot/</guid>
      <description>


&lt;hr /&gt;
&lt;p&gt;Nội dung của bài bao gồm:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#sec1&#34;&gt;1. Ý nghĩa của biểu đồ tán xạ trong bài toán dự đoán&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#sec2&#34;&gt;2. Cách vẽ biểu đồ tán xạ trong R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#sec3&#34;&gt;3. Dùng biểu đồ tán xạ để đánh giá chất lượng mô hình dự đoán&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;sec1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Ý nghĩa của biểu đồ tán xạ&lt;/h2&gt;
&lt;p&gt;Biểu đồ tán xạ (&lt;code&gt;scatter plot&lt;/code&gt;) là một dạng biểu đồ được dùng rất phổ biến trong khoa học với mục đích đánh giá mối tương quan giữa hai biến. Trong bài toán đự đoán (&lt;code&gt;forecasting&lt;/code&gt;), sử dụng &lt;code&gt;scatter plot&lt;/code&gt; cho phép chúng ta đánh giá được mức độ tương quan giữa các thuộc tính với nhau cũng như với các biến đầu ra của mô hình cần dự đoán, điều này cho phép lựa chọn được những chiến lược phù hợp trong quá trình chuẩn bị dữ liệu và xây dựng mô hình dự đoán.&lt;/p&gt;
&lt;p&gt;Có nhiều cách phân chia sự tương quan giữa hai biến số. Nhưng một cách tổng quát nhất thì chúng ta có thể chia làm 2 loại chính là có tương quan và không tương quan (giữa hai biến số không có mối tương quan nào với nhau).&lt;/p&gt;
&lt;p&gt;Trong tương quan thì có thể có các trường hợp sau đây:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Tương quan thuận (tương quan dương):&lt;/em&gt; Là mối tương quan trong đó sự gia tăng của biến số này dẫn đến sự gia tăng của biến số kia. Tương quan thuận được phân ra thành &lt;em&gt;tương quan thuận mạnh&lt;/em&gt; và &lt;em&gt;tương quan thuận yếu&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Tương quan nghịch (tương quan âm):&lt;/em&gt; Là mối tương quan trong đó sự gia tăng của biến số này sẽ làm giảm giá trị của biến số kia. Tương quan ngịch được phân ra thành &lt;em&gt;tương quan nghịch mạnh&lt;/em&gt; và &lt;em&gt;tương quan nghịch yếu&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Tương quan phức tạp&lt;/em&gt;: Là trường hợp mà hai biến có tương quan với nhau, tuy nhiên mối quan hệ giữa chúng không thể xác định một cách rõ ràng&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/scatter-plot.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Độ tương quan (&lt;code&gt;correlation&lt;/code&gt;) giữa hai biến &lt;code&gt;x&lt;/code&gt; và &lt;code&gt;y&lt;/code&gt; được tính bằng công thức sau:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
r = \frac{\sum(x_t - \bar{x})(y_t - \bar{y})}{\sqrt{\sum(x_t - \bar{x})^2\sum(y_t - \bar{y})^2}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Giá trị của &lt;code&gt;r&lt;/code&gt; luôn nằm trong khoảng -1 đến 1, với giá trị âm (&lt;code&gt;negative&lt;/code&gt;) thể hiện độ tương quan nghịch và giá trị dương (&lt;code&gt;positive&lt;/code&gt;) thể hiện độ tương quan thuận. Ví dụ về mức độ tương quan khác nhau theo giá trị &lt;code&gt;r&lt;/code&gt; thể hiện ở hình dưới:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/corr.PNG&#34; alt=&#34;Nguồn ảnh: Rob J Hyndman. Forecasting: Principles and Practice&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;a href=&#34;https://otexts.com/fpp2/scatterplots.html&#34;&gt;Nguồn ảnh: Rob J Hyndman. Forecasting: Principles and Practice&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;sec2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Cách vẽ biểu đồ tán xạ trong R&lt;/h2&gt;
&lt;p&gt;Để thực hành tôi sử dụng bộ dữ liệu &lt;code&gt;mtcars&lt;/code&gt; bao gồm thông tin về độ tiêu thụ nhiên liệu và 10 đặc tính khác nhau của 32 loại xe hơi. Ví dụ một số thuộc tính từ tập dữ liệu:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mpg:&lt;/code&gt; tiêu thụ nhiên liệu (dặm/gallon),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl:&lt;/code&gt; số xy lanh,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hp:&lt;/code&gt; công suất,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drat:&lt;/code&gt; tỷ số xoắn&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nạp dữ liệu vào phiên làm việc của R và kiểm tra 1 số hàng đầu tiên của tập dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dataset &amp;lt;- mtcars
head(dataset)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thử tính giá trị của &lt;code&gt;r&lt;/code&gt; thủ công bằng công thức ở trên:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- dataset$wt
y &amp;lt;- dataset$mpg
mean_x &amp;lt;- mean(dataset$wt)
mean_y &amp;lt;- mean(dataset$mpg)
r &amp;lt;- sum((x-mean_x)*(y-mean_y))/sqrt(sum((x-mean_x)^2)*sum((y-mean_y)^2))
r&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.8676594&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra xem kết quả tính &lt;code&gt;r&lt;/code&gt; có đúng không bằng hàm &lt;code&gt;cor()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor(dataset$wt, dataset$mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.8676594&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.1 Vẽ scatter plot Sử dụng &lt;code&gt;R base&lt;/code&gt; funtions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vẽ biểu độ tán xạ giữa hai thuộc tính &lt;code&gt;wt&lt;/code&gt; và &lt;code&gt;mpg&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(dataset$wt, dataset$mpg, col = &amp;quot;blue&amp;quot;, 
     main = &amp;quot;Scatter Plot for mtcars dataset&amp;quot;, 
     xlab=&amp;quot;Car Weight &amp;quot;, ylab=&amp;quot;Miles Per Gallon&amp;quot;)
# Thêm fit lines (regression line)
abline(lm(dataset$mpg~dataset$wt), col=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-26-scatter-plot.vn_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cách vẽ biểu đồ Scatter Matrix sử dụng hàm &lt;code&gt;pairs()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pairs(dataset[,1:4], pch = 19, col = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-26-scatter-plot.vn_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 Vẽ scatter plot sử dụng &lt;code&gt;ggplot2&lt;/code&gt; và các gói được phát triển trên cơ sở &lt;code&gt;ggplot2&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vẽ biểu độ tán xạ giữa hai thuộc tính &lt;code&gt;wt&lt;/code&gt; và &lt;code&gt;mpg&lt;/code&gt; sử dụng &lt;code&gt;ggplot2&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
ggplot(dataset, aes(x = wt, y = mpg)) +geom_point() +
  geom_smooth(method=&amp;#39;lm&amp;#39;, formula= y~x) #   Thêm regression line&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-26-scatter-plot.vn_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Vẽ scatter plot cho hai biến &lt;code&gt;wt&lt;/code&gt; và &lt;code&gt;mpg&lt;/code&gt; theo groups của thuộc tính &lt;code&gt;cyl&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dataset$cyl &amp;lt;- as.factor(dataset$cyl)
ggplot(dataset, aes(x = wt, y = mpg)) +
    geom_point(aes(color = cyl))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-26-scatter-plot.vn_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Thêm correlation coefficients &lt;code&gt;R&lt;/code&gt; và &lt;code&gt;p-values&lt;/code&gt; vào &lt;code&gt;scatter ggplot&lt;/code&gt; sử dụng gói &lt;code&gt;ggpubr&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggpubr)
sp &amp;lt;- ggscatter(dataset, x = &amp;quot;wt&amp;quot;, y = &amp;quot;mpg&amp;quot;,
   color = &amp;quot;cyl&amp;quot;, palette = &amp;quot;jco&amp;quot;,
   add = &amp;quot;reg.line&amp;quot;, conf.int = TRUE)
sp + stat_cor(aes(color = cyl), label.x = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-26-scatter-plot.vn_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Giải thích ý nghĩa của trị số &lt;code&gt;P-value&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Để hiểu về trị sô &lt;code&gt;p-value&lt;/code&gt; chúng ta cần phải hiểu về qui trình kiểm định thống kê.&lt;/p&gt;
&lt;p&gt;Qui trình kiểm định thống kê (&lt;code&gt;test of significance&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bước 1:&lt;/em&gt; Phát biểu &lt;code&gt;giả thuyết vô hiệu (null hypothesis - $H_0$)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bước 2:&lt;/em&gt; Thu thập dữ liệu (D)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bước 3:&lt;/em&gt; Tính xác xuất của D nếu &lt;span class=&#34;math inline&#34;&gt;\(H_0\)&lt;/span&gt; là đúng
&lt;span class=&#34;math display&#34;&gt;\[P= P_r(D|H_0)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Trị số &lt;code&gt;p&lt;/code&gt; chính là xác suất của dữ liệu xảy ra nếu giả thuyết vô hiệu là đúng (probability of observinf the data if the null hypothesis is true). Một kết quả được coi là có ý nghĩa thống kê nếu &lt;code&gt;p &amp;lt; 0.05&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lưu ý&lt;/code&gt;: trị số &lt;code&gt;p&lt;/code&gt; không có nghĩa là xác xuất của một giả thuyết - &lt;span class=&#34;math inline&#34;&gt;\(P(H_0)\)&lt;/span&gt;. Ví dụ &lt;code&gt;p = 0.08&lt;/code&gt; &lt;strong&gt;không&lt;/strong&gt; có nghĩa là &lt;span class=&#34;math inline&#34;&gt;\(P(H_0) = 0.08\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Trong trường hợp của chúng ta thì giả thuyết vô hiệu chính là không có tương quan giữa hai biến.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cách vẽ biểu đồ Scatter Matrix sử dụng gói &lt;code&gt;GGally&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(GGally)
ggpairs(dataset[,1:5], title=&amp;quot;A scatterplot matrix&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-26-scatter-plot.vn_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sec3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Dùng biểu đồ tán xạ để đánh giá chất lượng mô hình dự đoán&lt;/h2&gt;
&lt;p&gt;Trong thực thế thì không tồn tại mô hình dự đoán với độ chính xác tuyệt đối, mọi mô hình luôn cho sai số dự báo (&lt;code&gt;forecast error&lt;/code&gt;): &lt;span class=&#34;math inline&#34;&gt;\(E = y - y&amp;#39;\)&lt;/span&gt; thể hiện độ chênh lệnh giữa giá trị thực và giá trị dự đoán. Để đánh giá độ chính xác của một mô hình dự đoán người ta thường dùng một số thước đo như là:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Trung bình sai số tuyệt đồi (Mean absolute error)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[MAE = \frac{\sum_{i=1}^{n}(|e_i|)}{n}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Trong đó, &lt;span class=&#34;math inline&#34;&gt;\(e_i = y_i - \hat{y_i}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Trung bình sai số tương đối (Mean absolute percent error)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[MAPE = \frac{\sum_{i=1}^{n}\frac{|e_i|}{y_i}}{n}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Trung bình bình phương sai số (Mean squared error)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[MSE = \frac{\sum_{i=1}^{n}e_i^2}{n}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Căn bậc hai trung bình bình phương (Root mean squared error)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\sqrt{MSE = \frac{\sum_{i=1}^{n}e_i^2}{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;Tuy nhiên việc sử dụng chỉ những thước đo này là chưa đủ và đôi khi có thể dẫn đến đánh giá sai chất lượng mô hình dự đoán. Để biết tại sao là chưa đủ các bạn có thể đọc một số công bố khoa học của chúng tôi như là:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://forvis.github.io/&#34;&gt;1. Forcast Evaluation Framework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://forvis.github.io/our-publications/1.pdf&#34;&gt;2. Data Schemas for Forecasting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vixra.org/pdf/1903.0354v1.pdf&#34;&gt;3. Data Formats and Visual Tools for Forecast Evaluation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://forvis.github.io/our-publications/5.pdf&#34;&gt;4. Measuring forecasting accuracy: The case of judgmental adjustments to SKU-level demand forecasts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Trong phạm vi post này tôi sẽ giới thiệu với các bạn cách đánh giá chất lượng của các mô hình dự đoán bằng cách sử dụng &lt;code&gt;scatter plot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Để đánh giá chất lượng mô hình dự đoán bằng &lt;code&gt;scatter plot&lt;/code&gt; chúng ta cần tạo một &lt;code&gt;scatter plot&lt;/code&gt; với trục &lt;code&gt;Oy&lt;/code&gt; là giá trị thực (&lt;code&gt;y&lt;/code&gt;) và trục &lt;code&gt;Ox&lt;/code&gt; là giá trị dự đoán (&lt;code&gt;y&#39;&lt;/code&gt;). Tập hợp các điểm mà tại đó giá trị dự đoán bằng với giá trị thực &lt;span class=&#34;math inline&#34;&gt;\(y = y&amp;#39;\)&lt;/span&gt; (hay &lt;span class=&#34;math inline&#34;&gt;\(E = 0\)&lt;/span&gt;) tạo thành một đường thẳng gọi là &lt;code&gt;perfect forecast line&lt;/code&gt;. Vì vậy mỗi giá trị dự đoán tương ứng với giá trị thực sẽ có tọa độ là: &lt;span class=&#34;math inline&#34;&gt;\(y_i&amp;#39; = y_i + e_i\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/error.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tập hợp các cặp điểm (&lt;code&gt;yy&#39;&lt;/code&gt;) còn lại (không nằm trên đường &lt;code&gt;perfect forecast&lt;/code&gt;) sẽ tạo thành một đám mây phân tán xạ dọc theo đường &lt;code&gt;perfect forecast&lt;/code&gt;. Mức độ tán xạ (độ lệnh) của các điểm so với đường &lt;code&gt;perfect forecast&lt;/code&gt; cho phép chúng ta đánh giá được độ chính xác của mô hình dự đoán. Biểu đố tán xạ trong trường hợp này được gọi là &lt;code&gt;Prediction-Realization Diagram (PRD)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/prd.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Trong PRD, nếu phần lớn các điểm phân bố dọc theo đường &lt;code&gt;perfect forecast&lt;/code&gt; và có rất ít hoặc không có các điểm phân tán cách xa đường này thì mô hình dự đoán đó có chất lượng tốt. Trường hợp ngược lại có nghĩa là mô hình có chất lượng kém.&lt;/p&gt;
&lt;p&gt;Để minh họa tôi sẽ sử dụng &lt;code&gt;PRD&lt;/code&gt; để so sánh các mô hình dự đoán khác nhau được sử dụng trong cuộc thi dự đoán thế giới &lt;a href=&#34;https://forecasters.org/resources/time-series-data/m3-competition/&#34;&gt;M3 forecasting competition&lt;/a&gt;. Trong cuộc thi này, &lt;code&gt;22&lt;/code&gt; mô hình được sử dụng để test với &lt;code&gt;3003&lt;/code&gt; tập dữ liệu chuỗi thời gian khác nhau.&lt;/p&gt;
&lt;p&gt;Dữ liệu này đã được tôi xử lý và lưu trong gói &lt;code&gt;forvision&lt;/code&gt; nằm trong &lt;a href=&#34;https://forvis.github.io/&#34;&gt;Forecast evaluation framework&lt;/a&gt; được chúng tôi thực hiện vào năm 2018. Để biết thêm thông tin các bạn có thể đọc ở &lt;code&gt;website&lt;/code&gt; của dự án tại &lt;a href=&#34;https://forvis.github.io/&#34;&gt;đây&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Để tải gói &lt;code&gt;forvision&lt;/code&gt; về cài đặt trong R các bạn dùng lệnh sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;forvis/forvision&amp;quot;, build_vignettes = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nạp gói &lt;code&gt;forvision&lt;/code&gt; và xuất dữ liệu để thực hành:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(forvision)
m3_dataset &amp;lt;- createAFTS(m3_yearly_ts, m3_yearly_fc)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra tập dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(m3_dataset)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 8
##   series_id category value timestamp method_id forecast horizon origin_timestamp
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt;            &amp;lt;int&amp;gt;
## 1 Y641      OTHER     6060      1841 NAIVE2       5230        1             1840
## 2 Y641      OTHER     6060      1841 SINGLE       5352.       1             1840
## 3 Y641      OTHER     6060      1841 HOLT         5216.       1             1840
## 4 Y641      OTHER     6060      1841 DAMPEN       4962.       1             1840
## 5 Y641      OTHER     6060      1841 WINTER       5216.       1             1840
## 6 Y641      OTHER     6060      1841 COMB S-H~    5177.       1             1840&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vẽ scatter plot (&lt;code&gt;PRD&lt;/code&gt;) để so sánh chất lượng các mô hình khác nhau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m3_dataset$method_id &amp;lt;- as.factor(m3_dataset$method_id)
# Plot
gp &amp;lt;- ggplot() +
  geom_point(data = m3_dataset, ggplot2::aes(x = forecast, y= value,colour = method_id,shape = method_id)) +
  scale_shape_manual(values=1:nlevels(m3_dataset$method_id))+
  geom_line(data = m3_dataset, ggplot2::aes(x = value, y=value, linetype = &amp;quot;perfect forecast&amp;quot;)) +
  ggtitle(&amp;quot;Prediction-Realization Diagram&amp;quot;) +
  guides(linetype = ggplot2::guide_legend(&amp;quot;&amp;quot;))
gp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-26-scatter-plot.vn_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Chỉ so sánh 4 mô hình &lt;code&gt;c(&#34;ARARMA&#34;, &#34;DAMPEN&#34;, &#34;ForcX&#34;, &#34;WINTER&#34;)&lt;/code&gt; với nhau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m3_dataset &amp;lt;-  dplyr::filter(m3_dataset[1:2000,], method_id %in% c(&amp;quot;ARARMA&amp;quot;, &amp;quot;DAMPEN&amp;quot;, &amp;quot;ForcX&amp;quot;, &amp;quot;WINTER&amp;quot;))
m3_dataset$method_id &amp;lt;- as.factor(m3_dataset$method_id)
# Plot
gp &amp;lt;- ggplot()+
  geom_point(data = m3_dataset, ggplot2::aes(x = forecast, y= value,colour = method_id, shape = method_id)) +
  scale_shape_manual(values=1:nlevels(m3_dataset$method_id))+
  geom_line(data = m3_dataset, ggplot2::aes(x = value, y=value, linetype = &amp;quot;perfect forecast&amp;quot;), size = 1) +
  ggtitle(&amp;quot;Prediction-Realization Diagram&amp;quot;) +
  guides(linetype = ggplot2::guide_legend(&amp;quot;&amp;quot;))
gp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-26-scatter-plot.vn_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Thử sử dụng jupyter notebook để viết posts cho blog. Machine Learning Project Template với Python</title>
      <link>/post/jupyter/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/jupyter/</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Note lại các bước để viết posts cho blog sử dụng jupyter notebook&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bước 1: Tạo Jupyter notebook&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Tạo thư mục chứa post mới
mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/

# chuyển đến thư mục mới tạo
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/

# Tạo một jupyter notebook với tên là index
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bước 2: Tạo post metadata&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cần tạo metadata cho post  ở cell đầu tiên của jupyter notebook như sau:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other metadata here...
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bước 3: Convert notebook to Markdown&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.  Machine Learning Project Template với Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 Một Machine Learning Project sẽ gồm các bước cơ bản sau:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bước 1: Chuẩn bị vấn đề:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nạp các thư viện cần thiết&lt;/li&gt;
&lt;li&gt;Load tập dữ liệu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bước 2: Thăm dò dữ liệu (data exploring)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thống kê mô tả&lt;/li&gt;
&lt;li&gt;Trực quan hóa dữ liệu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bước 3. Chuẩn bị dữ liệu&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Làm sạch dữ liệu (data cleaning)&lt;/li&gt;
&lt;li&gt;Lựa chọn và biến đổi thuộc tính&lt;/li&gt;
&lt;li&gt;Chuẩn hóa dữ liệu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bước 4. Đánh giá các algorithms&lt;/p&gt;
&lt;p&gt;Bước 5. Impove accuracy&lt;/p&gt;
&lt;p&gt;Bước 6. Final model&lt;/p&gt;
&lt;h3 id=&#34;22-thực-hành-với-bài-toán-regresion&#34;&gt;2.2 Thực hành với bài toán Regresion&lt;/h3&gt;
&lt;h3 id=&#34;bước-1-chuẩn-bị-vấn-đề&#34;&gt;Bước 1. Chuẩn bị vấn đề&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Nạp các thư viện cần thiết
import numpy as np
from numpy import arange
import matplotlib.pyplot as plt
from pandas import read_csv
from pandas import set_option
#from pandas.tools.plotting import scatter_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.metrics import mean_squared_error
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load dữ liệu
url = &#39;https://raw.githubusercontent.com/svcuong/Datasets/master/boston.csv&#39;
dataset = read_csv(url, index_col=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bước 2. Thăm dò dữ liệu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bước 2.1: Thống kê mô tả&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Kiểm tra kích thước dữ liệu
dataset.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(506, 14)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Kiểm tra kiểu dữ liệu của thuộc tính
dataset.dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;crim       float64
zn         float64
indus      float64
chas         int64
nox        float64
rm         float64
age        float64
dis        float64
rad          int64
tax          int64
ptratio    float64
black      float64
lstat      float64
medv       float64
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hiển thị 10 hàng dữ liệu đầu tiên
print(dataset.head(10))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;       crim    zn  indus  chas    nox     rm    age     dis  rad  tax  \
1   0.00632  18.0   2.31     0  0.538  6.575   65.2  4.0900    1  296   
2   0.02731   0.0   7.07     0  0.469  6.421   78.9  4.9671    2  242   
3   0.02729   0.0   7.07     0  0.469  7.185   61.1  4.9671    2  242   
4   0.03237   0.0   2.18     0  0.458  6.998   45.8  6.0622    3  222   
5   0.06905   0.0   2.18     0  0.458  7.147   54.2  6.0622    3  222   
6   0.02985   0.0   2.18     0  0.458  6.430   58.7  6.0622    3  222   
7   0.08829  12.5   7.87     0  0.524  6.012   66.6  5.5605    5  311   
8   0.14455  12.5   7.87     0  0.524  6.172   96.1  5.9505    5  311   
9   0.21124  12.5   7.87     0  0.524  5.631  100.0  6.0821    5  311   
10  0.17004  12.5   7.87     0  0.524  6.004   85.9  6.5921    5  311   

    ptratio   black  lstat  medv  
1      15.3  396.90   4.98  24.0  
2      17.8  396.90   9.14  21.6  
3      17.8  392.83   4.03  34.7  
4      18.7  394.63   2.94  33.4  
5      18.7  396.90   5.33  36.2  
6      18.7  394.12   5.21  28.7  
7      15.2  395.60  12.43  22.9  
8      15.2  396.90  19.15  27.1  
9      15.2  386.63  29.93  16.5  
10     15.2  386.71  17.10  18.9  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# kiểm tra phân bố dữ liệu của từng thuộc tính
print(dataset.describe())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;             crim          zn       indus        chas         nox          rm  \
count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   
mean     3.613524   11.363636   11.136779    0.069170    0.554695    6.284634   
std      8.601545   23.322453    6.860353    0.253994    0.115878    0.702617   
min      0.006320    0.000000    0.460000    0.000000    0.385000    3.561000   
25%      0.082045    0.000000    5.190000    0.000000    0.449000    5.885500   
50%      0.256510    0.000000    9.690000    0.000000    0.538000    6.208500   
75%      3.677082   12.500000   18.100000    0.000000    0.624000    6.623500   
max     88.976200  100.000000   27.740000    1.000000    0.871000    8.780000   

              age         dis         rad         tax     ptratio       black  \
count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   
mean    68.574901    3.795043    9.549407  408.237154   18.455534  356.674032   
std     28.148861    2.105710    8.707259  168.537116    2.164946   91.294864   
min      2.900000    1.129600    1.000000  187.000000   12.600000    0.320000   
25%     45.025000    2.100175    4.000000  279.000000   17.400000  375.377500   
50%     77.500000    3.207450    5.000000  330.000000   19.050000  391.440000   
75%     94.075000    5.188425   24.000000  666.000000   20.200000  396.225000   
max    100.000000   12.126500   24.000000  711.000000   22.000000  396.900000   

            lstat        medv  
count  506.000000  506.000000  
mean    12.653063   22.532806  
std      7.141062    9.197104  
min      1.730000    5.000000  
25%      6.950000   17.025000  
50%     11.360000   21.200000  
75%     16.955000   25.000000  
max     37.970000   50.000000  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Kiểm tra độ tương quan giữa các biến dạng numeric
print(dataset.corr(method = &#39;pearson&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;             crim        zn     indus      chas       nox        rm       age  \
crim     1.000000 -0.200469  0.406583 -0.055892  0.420972 -0.219247  0.352734   
zn      -0.200469  1.000000 -0.533828 -0.042697 -0.516604  0.311991 -0.569537   
indus    0.406583 -0.533828  1.000000  0.062938  0.763651 -0.391676  0.644779   
chas    -0.055892 -0.042697  0.062938  1.000000  0.091203  0.091251  0.086518   
nox      0.420972 -0.516604  0.763651  0.091203  1.000000 -0.302188  0.731470   
rm      -0.219247  0.311991 -0.391676  0.091251 -0.302188  1.000000 -0.240265   
age      0.352734 -0.569537  0.644779  0.086518  0.731470 -0.240265  1.000000   
dis     -0.379670  0.664408 -0.708027 -0.099176 -0.769230  0.205246 -0.747881   
rad      0.625505 -0.311948  0.595129 -0.007368  0.611441 -0.209847  0.456022   
tax      0.582764 -0.314563  0.720760 -0.035587  0.668023 -0.292048  0.506456   
ptratio  0.289946 -0.391679  0.383248 -0.121515  0.188933 -0.355501  0.261515   
black   -0.385064  0.175520 -0.356977  0.048788 -0.380051  0.128069 -0.273534   
lstat    0.455621 -0.412995  0.603800 -0.053929  0.590879 -0.613808  0.602339   
medv    -0.388305  0.360445 -0.483725  0.175260 -0.427321  0.695360 -0.376955   

              dis       rad       tax   ptratio     black     lstat      medv  
crim    -0.379670  0.625505  0.582764  0.289946 -0.385064  0.455621 -0.388305  
zn       0.664408 -0.311948 -0.314563 -0.391679  0.175520 -0.412995  0.360445  
indus   -0.708027  0.595129  0.720760  0.383248 -0.356977  0.603800 -0.483725  
chas    -0.099176 -0.007368 -0.035587 -0.121515  0.048788 -0.053929  0.175260  
nox     -0.769230  0.611441  0.668023  0.188933 -0.380051  0.590879 -0.427321  
rm       0.205246 -0.209847 -0.292048 -0.355501  0.128069 -0.613808  0.695360  
age     -0.747881  0.456022  0.506456  0.261515 -0.273534  0.602339 -0.376955  
dis      1.000000 -0.494588 -0.534432 -0.232471  0.291512 -0.496996  0.249929  
rad     -0.494588  1.000000  0.910228  0.464741 -0.444413  0.488676 -0.381626  
tax     -0.534432  0.910228  1.000000  0.460853 -0.441808  0.543993 -0.468536  
ptratio -0.232471  0.464741  0.460853  1.000000 -0.177383  0.374044 -0.507787  
black    0.291512 -0.444413 -0.441808 -0.177383  1.000000 -0.366087  0.333461  
lstat   -0.496996  0.488676  0.543993  0.374044 -0.366087  1.000000 -0.737663  
medv     0.249929 -0.381626 -0.468536 -0.507787  0.333461 -0.737663  1.000000  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Bước 2.2: Trực quan hóa dữ liệu&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Histograms cho từng thuộc tính
dataset.hist(figsize=(12,8))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_21_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Boxplot cho từng thuộc tính
dataset.plot(kind=&#39;box&#39;, figsize=(12,5))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_22_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# correlation matrix
fig = plt.figure(figsize=(14, 6))
ax = fig.add_subplot(111)
cax = ax.matshow(dataset.corr(), vmin=-1, vmax=1, interpolation=&#39;none&#39;)
fig.colorbar(cax)
ticks = numpy.arange(0,14,1)
ax.set_xticks(ticks)
ax.set_yticks(ticks)
ax.set_xticklabels(names)
ax.set_yticklabels(names)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_23_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bước 3: Chuẩn bị dữ liệu&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Split-out validation dataset
array = dataset.values
X = array[:,0:13]
Y = array[:,13]
validation_size = 0.20
seed = 7
X_train, X_validation, Y_train, Y_validation = train_test_split(X, Y,
test_size=validation_size, random_state=seed)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bước 4: Đánh giá algorithms&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Test options and evaluation metric
num_folds = 10
seed = 7
scoring = &#39;neg_mean_squared_error&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Spot-Check Algorithms
models = []
models.append((&#39;LR&#39;, LinearRegression()))
models.append((&#39;LASSO&#39;, Lasso()))
models.append((&#39;EN&#39;, ElasticNet()))
models.append((&#39;KNN&#39;, KNeighborsRegressor()))
models.append((&#39;CART&#39;, DecisionTreeRegressor()))
models.append((&#39;SVR&#39;, SVR()))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import warnings
warnings.filterwarnings(&#39;ignore&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# evaluate each model in turn
results = []
names = []
for name, model in models:
    kfold = KFold(n_splits=num_folds, random_state=seed)
    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)
    results.append(cv_results)
    names.append(name)
    msg = &amp;quot;%s: %f (%f)&amp;quot; % (name, cv_results.mean(), cv_results.std())
    print(msg)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;LR: -21.379856 (9.414264)
LASSO: -26.423561 (11.651110)
EN: -27.502259 (12.305022)
KNN: -41.896488 (13.901688)
CART: -26.016351 (15.164680)
SVR: -67.827886 (29.049138)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Compare Algorithms
fig = pyplot.figure(figsize=(10, 6))
fig.suptitle(&#39;Algorithm Comparison&#39;)
ax = fig.add_subplot(111)
pyplot.boxplot(results)
ax.set_xticklabels(names)
pyplot.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_31_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bước 5: Improve Results With Tuning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tôi sẽ hướng dẫn ở một bài khác&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bước 6: Finalize model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tôi sẽ hướng dẫn ở một bài khác&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phương pháp Ensemble Learning trong Machine Learning: Boosting, Bagging, Stacking (Sử dụng R code)</title>
      <link>/post/ensemble-learning/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/ensemble-learning/</guid>
      <description>


&lt;p&gt;Trong &lt;code&gt;machine learning&lt;/code&gt; tồn tại định lý &lt;em&gt;“không có bữa trưa miễn phí”&lt;/em&gt; (&lt;code&gt;No free lunch theorem&lt;/code&gt;), tức là không tồn tại một thuật toán mà luôn tốt cho mọi ứng dụng và mọi tập dữ liệu, vì các thuật toán &lt;code&gt;machiner learning&lt;/code&gt; thường dựa trên một tập các tham số (&lt;code&gt;hyperparameters&lt;/code&gt;) hoặc một giả thiết nhất định nào đó về phân bố dữ liệu. Vì vậy để tìm được những thuật toán phù hợp cho tập &lt;code&gt;dataset&lt;/code&gt; của mình có thể các bạn sẽ cần nhiều thời gian để &lt;code&gt;test&lt;/code&gt; các thuật toán khác nhau. Rồi từ đó thực hiện hiệu chỉnh các tham số (&lt;code&gt;tuning hyperparameters&lt;/code&gt;) của thuật toán để thu được độ chính xác cao nhất.&lt;/p&gt;
&lt;p&gt;Một cách khác có thể sử dụng để tăng độ chính xác trên tập &lt;code&gt;dataset&lt;/code&gt; của bạn là kết hợp (&lt;code&gt;combine&lt;/code&gt;) một số mô hình với nhau. Phương pháp này gọi là &lt;code&gt;esemble learning&lt;/code&gt;. Ý tưởng của việc &lt;code&gt;combine&lt;/code&gt; các mô hình khác nhau xuất phát từ một suy nghĩ hợp lý là: các mô hình khác nhau có khả năng khác nhau, có thể thực hiện tốt nhất các loại công việc khác nhau (&lt;code&gt;subtasks&lt;/code&gt;), khi kết hợp các mô hình này với nhau một cách hợp lý thì sẽ tạo thành một mô hình kết hợp (&lt;code&gt;combined model&lt;/code&gt;) mạnh có khả năng cải thiện hiệu suât tổng thể (&lt;code&gt;overall performance&lt;/code&gt;) so với việc chỉ dùng các mô hình một cách đơn lẻ.&lt;/p&gt;
&lt;p&gt;Các phương pháp &lt;code&gt;Ensemble Learning&lt;/code&gt; được chia thành 3 loại sau đây:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Bagging&lt;/code&gt; (đóng bao)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Boosting&lt;/code&gt; (tăng cường)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stacking&lt;/code&gt; (Xếp chồng)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trong post này, trước hết tôi sẽ giới thiệu 3 kỹ thuật &lt;code&gt;ensemble learning&lt;/code&gt; kể trên, sau đó là cách sử dụng thư viện &lt;code&gt;caret&lt;/code&gt; và &lt;code&gt;caretEnsemble&lt;/code&gt; trong &lt;code&gt;R&lt;/code&gt; để triển khai chúng và áp dụng vào bài toán cụ thể.&lt;/p&gt;
&lt;p&gt;Để cài đặt 2 thư viện này ta dùng lệnh &lt;code&gt;install.packages(.)&lt;/code&gt; với tham số đầu vào là tên thư viện muốn cài:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;caret&amp;quot;)
intall.packages(&amp;quot;caretEnsemble&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Đôi nét về thư viện caret&lt;/strong&gt;: Ngôn ngữ &lt;code&gt;R&lt;/code&gt; khác biệt bởi số lượng rất lớn các &lt;code&gt;packages&lt;/code&gt; chuyên dụng khác nhau cho phép xây dựng các mô hình dự đoán. Tuy nhiên đây cũng chính là khuyết điểm, khi có quá nhiều các gói triển khai &lt;code&gt;machine learning algorithms&lt;/code&gt; dưới dạng các
hàm &lt;code&gt;rải rác&lt;/code&gt; đòi hỏi ta cần nhiều thời gian để tìm kiếm và nắm vững những đặc trưng về cú pháp cũng như cách sử dụng của từng hàm. Để giải quyết vấn đề này &lt;a href=&#34;https://www.linkedin.com/in/max-kuhn-864a9110&#34;&gt;Max Kuhn&lt;/a&gt; đã xây dựng một giao diện phổ quát cho phép truy cập và sử dụng các &lt;code&gt;machine learning algorithms&lt;/code&gt; từ cái gói khác nhau được triển khai trên ngôn ngữ &lt;code&gt;R&lt;/code&gt;. Kết quả chính là package &lt;a href=&#34;https://cran.r-project.org/web/packages/caret/caret.pdf&#34;&gt;caret&lt;/a&gt; (viết tắt từ Classification and Regression Training), được công bố đầu tiên vào năm 2008 tại tạp chí phần mềm thống kê &lt;a href=&#34;https://www.jstatsoft.org/article/view/v028i05&#34;&gt;Journal of Statistical Software&lt;/a&gt;. Gói &lt;code&gt;caret&lt;/code&gt; giúp chúng ta tiết kiệm được rất nhiều thời gian trong quá trình phân tích và xây dựng các &lt;code&gt;models&lt;/code&gt;. Dưới đây là một số
đặc trưng cơ bản của gói &lt;code&gt;caret&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sử dụng cú pháp lệnh chung (phổ quát) không phụ thuộc vào cú pháp của các hàm gốc (các hàm triển khai các machine learningalgorithms)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tự động tìm kiếm những giá trị tối ưu cho các &lt;code&gt;hyperparameters&lt;/code&gt; của mô hình (&lt;code&gt;tuning parameters&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Có khả năng tổ chức tính toán song song để tăng đáng kể tốc độ quá trình huấn luyện mô hình&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sử dụng &lt;code&gt;Caret&lt;/code&gt; cho phép giải quyết hầu hết các nhiệm vụ trong &lt;code&gt;machine learning&lt;/code&gt; từ tiền xủ lý cho đến đánh giá mô hình&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1. Phân biệt 3 kỹ thuật boosting, baggig và statcking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bagging&lt;/strong&gt; xây dựng một lượng lớn các &lt;code&gt;models&lt;/code&gt; (thường là &lt;code&gt;cùng loại&lt;/code&gt;) trên những &lt;code&gt;subsamples&lt;/code&gt; khác nhau từ tập &lt;code&gt;training dataset&lt;/code&gt; một cách song song nhằm đưa ra dự đoán tốt hơn.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boosting&lt;/strong&gt; xây dựng một lượng lớn các &lt;code&gt;models&lt;/code&gt; (thường là &lt;code&gt;cùng loại&lt;/code&gt;). Tuy nhiên quá trình huấn luyện trong phương pháp này diễn ra tuần tự theo chuỗi (sequence). Trong chuỗi này mỗi &lt;code&gt;model&lt;/code&gt; sau sẽ học cách sửa những &lt;code&gt;errors&lt;/code&gt; của &lt;code&gt;model&lt;/code&gt; trước (hay nói cách khác là dữ liệu mà &lt;code&gt;model&lt;/code&gt; trước dự đoán sai).&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/boosting-bagging.png&#34; alt=&#34;Nguồn ảnh&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;a href=&#34;https://www.datacamp.com/community/tutorials/adaboost-classifier-python&#34;&gt;Nguồn ảnh&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Stacking&lt;/strong&gt; xây dựng một số &lt;code&gt;models&lt;/code&gt; (thường là &lt;code&gt;khác loại&lt;/code&gt;) và một mô hình &lt;code&gt;supervisor model&lt;/code&gt;, mô hình này sẽ học cách kết hợp kết quả dự báo của một số mô hình một cách tốt nhất.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/stacking.png&#34; alt=&#34;Nguồn ảnh&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/stacking-in-machine-learning/&#34;&gt;Nguồn ảnh&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. Thực hành&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nạp các thư viện cần dùng vào phiên làm việc của &lt;code&gt;R&lt;/code&gt; để thực hành:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(caret)
library(caretEnsemble) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra số lượng các machine learning algorithms trong R được hỗ trợ bởi &lt;code&gt;caret&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carets &amp;lt;- getModelInfo()
carets.names &amp;lt;- names(carets)
length(carets.names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 238&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.1 Dữ liệu để thực hành&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Để thực hành tôi lựa chọn bài toán phân loại nhị phân (&lt;code&gt;binary classification&lt;/code&gt;) với tập dữ liệu &lt;code&gt;ionoshene&lt;/code&gt;. Trong bài toán này chúng ta cần dự đoán xem cao tần trả vể từ năng lượng của các hạt trong khí quyển có cấu trúc hay là không. Để tìm hiểu thêm về bài toán này các bạn có thể đọc ở &lt;a href=&#34;http://archive.ics.uci.edu/ml/index.php&#34;&gt;đây&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Load dữ liệu từ gói &lt;code&gt;mlbench&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load the dataset
library(mlbench)
data(Ionosphere)
dataset &amp;lt;- Ionosphere&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.1.1 Thống kê mô tả (descriptive statistics)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kiểm tra kích thước tập dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(dataset)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 351  35&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra cấu trúc của tập dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(dataset)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    351 obs. of  35 variables:
##  $ V1   : Factor w/ 2 levels &amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;: 2 2 2 2 2 2 2 1 2 2 ...
##  $ V2   : Factor w/ 1 level &amp;quot;0&amp;quot;: 1 1 1 1 1 1 1 1 1 1 ...
##  $ V3   : num  0.995 1 1 1 1 ...
##  $ V4   : num  -0.0589 -0.1883 -0.0336 -0.4516 -0.024 ...
##  $ V5   : num  0.852 0.93 1 1 0.941 ...
##  $ V6   : num  0.02306 -0.36156 0.00485 1 0.06531 ...
##  $ V7   : num  0.834 -0.109 1 0.712 0.921 ...
##  $ V8   : num  -0.377 -0.936 -0.121 -1 -0.233 ...
##  $ V9   : num  1 1 0.89 0 0.772 ...
##  $ V10  : num  0.0376 -0.0455 0.012 0 -0.164 ...
##  $ V11  : num  0.852 0.509 0.731 0 0.528 ...
##  $ V12  : num  -0.1776 -0.6774 0.0535 0 -0.2028 ...
##  $ V13  : num  0.598 0.344 0.854 0 0.564 ...
##  $ V14  : num  -0.44945 -0.69707 0.00827 0 -0.00712 ...
##  $ V15  : num  0.605 -0.517 0.546 -1 0.344 ...
##  $ V16  : num  -0.38223 -0.97515 0.00299 0.14516 -0.27457 ...
##  $ V17  : num  0.844 0.055 0.838 0.541 0.529 ...
##  $ V18  : num  -0.385 -0.622 -0.136 -0.393 -0.218 ...
##  $ V19  : num  0.582 0.331 0.755 -1 0.451 ...
##  $ V20  : num  -0.3219 -1 -0.0854 -0.5447 -0.1781 ...
##  $ V21  : num  0.5697 -0.1315 0.7089 -0.6997 0.0598 ...
##  $ V22  : num  -0.297 -0.453 -0.275 1 -0.356 ...
##  $ V23  : num  0.3695 -0.1806 0.4339 0 0.0231 ...
##  $ V24  : num  -0.474 -0.357 -0.121 0 -0.529 ...
##  $ V25  : num  0.5681 -0.2033 0.5753 1 0.0329 ...
##  $ V26  : num  -0.512 -0.266 -0.402 0.907 -0.652 ...
##  $ V27  : num  0.411 -0.205 0.59 0.516 0.133 ...
##  $ V28  : num  -0.462 -0.184 -0.221 1 -0.532 ...
##  $ V29  : num  0.2127 -0.1904 0.431 1 0.0243 ...
##  $ V30  : num  -0.341 -0.116 -0.174 -0.201 -0.622 ...
##  $ V31  : num  0.4227 -0.1663 0.6044 0.2568 -0.0571 ...
##  $ V32  : num  -0.5449 -0.0629 -0.2418 1 -0.5957 ...
##  $ V33  : num  0.1864 -0.1374 0.5605 -0.3238 -0.0461 ...
##  $ V34  : num  -0.453 -0.0245 -0.3824 1 -0.657 ...
##  $ Class: Factor w/ 2 levels &amp;quot;bad&amp;quot;,&amp;quot;good&amp;quot;: 2 1 2 1 2 1 2 1 2 1 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hiển thị &lt;code&gt;5&lt;/code&gt; hàng dữ liệu đầu tiên:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(dataset, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   V1 V2      V3       V4      V5       V6       V7       V8      V9      V10
## 1  1  0 0.99539 -0.05889 0.85243  0.02306  0.83398 -0.37708 1.00000  0.03760
## 2  1  0 1.00000 -0.18829 0.93035 -0.36156 -0.10868 -0.93597 1.00000 -0.04549
## 3  1  0 1.00000 -0.03365 1.00000  0.00485  1.00000 -0.12062 0.88965  0.01198
## 4  1  0 1.00000 -0.45161 1.00000  1.00000  0.71216 -1.00000 0.00000  0.00000
## 5  1  0 1.00000 -0.02401 0.94140  0.06531  0.92106 -0.23255 0.77152 -0.16399
##       V11      V12     V13      V14      V15      V16     V17      V18      V19
## 1 0.85243 -0.17755 0.59755 -0.44945  0.60536 -0.38223 0.84356 -0.38542  0.58212
## 2 0.50874 -0.67743 0.34432 -0.69707 -0.51685 -0.97515 0.05499 -0.62237  0.33109
## 3 0.73082  0.05346 0.85443  0.00827  0.54591  0.00299 0.83775 -0.13644  0.75535
## 4 0.00000  0.00000 0.00000  0.00000 -1.00000  0.14516 0.54094 -0.39330 -1.00000
## 5 0.52798 -0.20275 0.56409 -0.00712  0.34395 -0.27457 0.52940 -0.21780  0.45107
##        V20      V21      V22      V23      V24      V25      V26      V27
## 1 -0.32192  0.56971 -0.29674  0.36946 -0.47357  0.56811 -0.51171  0.41078
## 2 -1.00000 -0.13151 -0.45300 -0.18056 -0.35734 -0.20332 -0.26569 -0.20468
## 3 -0.08540  0.70887 -0.27502  0.43385 -0.12062  0.57528 -0.40220  0.58984
## 4 -0.54467 -0.69975  1.00000  0.00000  0.00000  1.00000  0.90695  0.51613
## 5 -0.17813  0.05982 -0.35575  0.02309 -0.52879  0.03286 -0.65158  0.13290
##        V28      V29      V30      V31      V32      V33      V34 Class
## 1 -0.46168  0.21266 -0.34090  0.42267 -0.54487  0.18641 -0.45300  good
## 2 -0.18401 -0.19040 -0.11593 -0.16626 -0.06288 -0.13738 -0.02447   bad
## 3 -0.22145  0.43100 -0.17365  0.60436 -0.24180  0.56045 -0.38238  good
## 4  1.00000  1.00000 -0.20099  0.25682  1.00000 -0.32382  1.00000   bad
## 5 -0.53206  0.02431 -0.62197 -0.05707 -0.59573 -0.04608 -0.65697  good&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra &lt;code&gt;missing values&lt;/code&gt; trong dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(is.na(dataset))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra phân phối của từng thuộc tính:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(dataset)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  V1      V2            V3                V4                 V5         
##  0: 38   0:351   Min.   :-1.0000   Min.   :-1.00000   Min.   :-1.0000  
##  1:313           1st Qu.: 0.4721   1st Qu.:-0.06474   1st Qu.: 0.4127  
##                  Median : 0.8711   Median : 0.01631   Median : 0.8092  
##                  Mean   : 0.6413   Mean   : 0.04437   Mean   : 0.6011  
##                  3rd Qu.: 1.0000   3rd Qu.: 0.19418   3rd Qu.: 1.0000  
##                  Max.   : 1.0000   Max.   : 1.00000   Max.   : 1.0000  
##        V6                V7                V8                 V9          
##  Min.   :-1.0000   Min.   :-1.0000   Min.   :-1.00000   Min.   :-1.00000  
##  1st Qu.:-0.0248   1st Qu.: 0.2113   1st Qu.:-0.05484   1st Qu.: 0.08711  
##  Median : 0.0228   Median : 0.7287   Median : 0.01471   Median : 0.68421  
##  Mean   : 0.1159   Mean   : 0.5501   Mean   : 0.11936   Mean   : 0.51185  
##  3rd Qu.: 0.3347   3rd Qu.: 0.9692   3rd Qu.: 0.44567   3rd Qu.: 0.95324  
##  Max.   : 1.0000   Max.   : 1.0000   Max.   : 1.00000   Max.   : 1.00000  
##       V10                V11                V12                V13         
##  Min.   :-1.00000   Min.   :-1.00000   Min.   :-1.00000   Min.   :-1.0000  
##  1st Qu.:-0.04807   1st Qu.: 0.02112   1st Qu.:-0.06527   1st Qu.: 0.0000  
##  Median : 0.01829   Median : 0.66798   Median : 0.02825   Median : 0.6441  
##  Mean   : 0.18135   Mean   : 0.47618   Mean   : 0.15504   Mean   : 0.4008  
##  3rd Qu.: 0.53419   3rd Qu.: 0.95790   3rd Qu.: 0.48237   3rd Qu.: 0.9555  
##  Max.   : 1.00000   Max.   : 1.00000   Max.   : 1.00000   Max.   : 1.0000  
##       V14                V15               V16                V17         
##  Min.   :-1.00000   Min.   :-1.0000   Min.   :-1.00000   Min.   :-1.0000  
##  1st Qu.:-0.07372   1st Qu.: 0.0000   1st Qu.:-0.08170   1st Qu.: 0.0000  
##  Median : 0.03027   Median : 0.6019   Median : 0.00000   Median : 0.5909  
##  Mean   : 0.09341   Mean   : 0.3442   Mean   : 0.07113   Mean   : 0.3819  
##  3rd Qu.: 0.37486   3rd Qu.: 0.9193   3rd Qu.: 0.30897   3rd Qu.: 0.9357  
##  Max.   : 1.00000   Max.   : 1.0000   Max.   : 1.00000   Max.   : 1.0000  
##       V18                 V19               V20                V21         
##  Min.   :-1.000000   Min.   :-1.0000   Min.   :-1.00000   Min.   :-1.0000  
##  1st Qu.:-0.225690   1st Qu.: 0.0000   1st Qu.:-0.23467   1st Qu.: 0.0000  
##  Median : 0.000000   Median : 0.5762   Median : 0.00000   Median : 0.4991  
##  Mean   :-0.003617   Mean   : 0.3594   Mean   :-0.02402   Mean   : 0.3367  
##  3rd Qu.: 0.195285   3rd Qu.: 0.8993   3rd Qu.: 0.13437   3rd Qu.: 0.8949  
##  Max.   : 1.000000   Max.   : 1.0000   Max.   : 1.00000   Max.   : 1.0000  
##       V22                 V23               V24                V25         
##  Min.   :-1.000000   Min.   :-1.0000   Min.   :-1.00000   Min.   :-1.0000  
##  1st Qu.:-0.243870   1st Qu.: 0.0000   1st Qu.:-0.36689   1st Qu.: 0.0000  
##  Median : 0.000000   Median : 0.5318   Median : 0.00000   Median : 0.5539  
##  Mean   : 0.008296   Mean   : 0.3625   Mean   :-0.05741   Mean   : 0.3961  
##  3rd Qu.: 0.188760   3rd Qu.: 0.9112   3rd Qu.: 0.16463   3rd Qu.: 0.9052  
##  Max.   : 1.000000   Max.   : 1.0000   Max.   : 1.00000   Max.   : 1.0000  
##       V26                V27               V28                V29         
##  Min.   :-1.00000   Min.   :-1.0000   Min.   :-1.00000   Min.   :-1.0000  
##  1st Qu.:-0.33239   1st Qu.: 0.2864   1st Qu.:-0.44316   1st Qu.: 0.0000  
##  Median :-0.01505   Median : 0.7082   Median :-0.01769   Median : 0.4966  
##  Mean   :-0.07119   Mean   : 0.5416   Mean   :-0.06954   Mean   : 0.3784  
##  3rd Qu.: 0.15676   3rd Qu.: 0.9999   3rd Qu.: 0.15354   3rd Qu.: 0.8835  
##  Max.   : 1.00000   Max.   : 1.0000   Max.   : 1.00000   Max.   : 1.0000  
##       V30                V31               V32                 V33         
##  Min.   :-1.00000   Min.   :-1.0000   Min.   :-1.000000   Min.   :-1.0000  
##  1st Qu.:-0.23689   1st Qu.: 0.0000   1st Qu.:-0.242595   1st Qu.: 0.0000  
##  Median : 0.00000   Median : 0.4428   Median : 0.000000   Median : 0.4096  
##  Mean   :-0.02791   Mean   : 0.3525   Mean   :-0.003794   Mean   : 0.3494  
##  3rd Qu.: 0.15407   3rd Qu.: 0.8576   3rd Qu.: 0.200120   3rd Qu.: 0.8138  
##  Max.   : 1.00000   Max.   : 1.0000   Max.   : 1.000000   Max.   : 1.0000  
##       V34            Class    
##  Min.   :-1.00000   bad :126  
##  1st Qu.:-0.16535   good:225  
##  Median : 0.00000             
##  Mean   : 0.01448             
##  3rd Qu.: 0.17166             
##  Max.   : 1.00000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thuộc tính thứ &lt;code&gt;V2&lt;/code&gt; chỉ có 1 giá trị là &lt;code&gt;0&lt;/code&gt; nên có thể loại bỏ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dataset$V2 &amp;lt;- NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chuyển thuộc tính &lt;code&gt;V1&lt;/code&gt; từ &lt;code&gt;factor&lt;/code&gt; sang &lt;code&gt;numeric&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dataset$V1 &amp;lt;- as.numeric(as.character(dataset$V1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra mức độ tương quan (&lt;code&gt;correlation&lt;/code&gt;) giữa các thuộc tính (do số lượng thuộc tính lớn nên tôi chỉ hiển thị tương quan giữa 6 thuộc tính đầu làm mẫu):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor(dataset[,1:6])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              V1         V3           V4         V5          V6          V7
## V1  1.000000000 0.30203392 -0.006528852 0.15615240  0.12760571  0.22186692
## V3  0.302033923 1.00000000  0.143364804 0.47658695  0.02576751  0.44025437
## V4 -0.006528852 0.14336480  1.000000000 0.00115185 -0.19030761 -0.05402953
## V5  0.156152397 0.47658695  0.001151850 1.00000000  0.03832312  0.59707508
## V6  0.127605707 0.02576751 -0.190307607 0.03832312  1.00000000 -0.01022692
## V7  0.221866916 0.44025437 -0.054029528 0.59707508 -0.01022692  1.00000000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.1.2 Trực quan hóa dữ liệu (&lt;code&gt;data visualization&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Do số lượng thuộc tính nhiều nên tôi chỉ thực hiện &lt;code&gt;data visualization&lt;/code&gt; đối 12 thuộc tính đầu của tập dữ liệu.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Histogram&lt;/code&gt; cho 12 thuộc tính đầu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(3,4))
for(i in 1:12) { 
  hist(dataset[,i], main=names(dataset)[i], breaks = 30)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ensemble-learning/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Boxplot&lt;/code&gt; cho 12 thuộc tính đầu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(dataset[, 1:12], col = &amp;quot;orange&amp;quot;, main = &amp;quot;Features Boxplot&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ensemble-learning/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Trong bước này nếu phát hiện trong các thuộc tính có nhiều giá trị ngoại lai (&lt;code&gt;outliers&lt;/code&gt;) thì các bạn có thể đọc post trước của tôi về cách loại bỏ &lt;code&gt;outliers&lt;/code&gt; trong dữ liệu cho &lt;code&gt;machine learning&lt;/code&gt; bằng các phương pháp thống kê tại &lt;a href=&#34;https://svcuong.github.io/post/remove-outliers/&#34;&gt;đây&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1.3 Tiền xử lý dữ liệu (&lt;code&gt;data preprocessing&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Xác định và Loại bỏ các thuộc tính tương quan với nhau cao (&amp;gt;0.75)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Tìm các thuộc tính tương quan với nhau cao
cor_coefficient &amp;lt;- 0.75
correlations &amp;lt;- cor(dataset[,1:13])
highlyCorrelated &amp;lt;- findCorrelation(correlations, cutoff=cor_coefficient)
length(highlyCorrelated)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ở đây không có các thuộc tính tương quan cao với nhau, tuy nhiên nếu có thì các bạn có thể loại bỏ chúng như sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasetFeatures &amp;lt;- dataset[,-highlyCorrelated]
dim(datasetFeatures)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chuẩn hóa giá trị của các thuộc tính (&lt;code&gt;data normalization&lt;/code&gt;) về khoảng &lt;code&gt;[0,1]&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;preProcValues &amp;lt;- preProcess(dataset, method = c(&amp;quot;range&amp;quot;))
data_processed &amp;lt;- predict(preProcValues, dataset)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vậy là dữ liệu của chúng ta đã sẵn sàng để &lt;code&gt;test&lt;/code&gt; các thuật toán &lt;code&gt;ensemble learning&lt;/code&gt; rồi.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2. Thuật toán Boosting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Trong phạm vi post này tôi sẽ test hai thuật toán &lt;code&gt;boosting&lt;/code&gt; khá phổ biến là: &lt;code&gt;C5.0&lt;/code&gt; và &lt;code&gt;Stochastic Gradient Boosting&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Dưới đây là ví dụ huấn luyện hai mô hình này trên &lt;code&gt;R&lt;/code&gt; với các tham số mặc định:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seed &amp;lt;- 10
# tạo một đối tượng control cho cross-validation
control &amp;lt;- trainControl(method=&amp;quot;repeatedcv&amp;quot;, number=10, repeats=3)
# Trong đó
# method = &amp;#39;repeatedcv&amp;#39;: sử dụng cross-validation với các tham số sau:
# number = 10 có nhĩa là quá trình cross-validation cần chia dữ liệu gốc thành 10 phần bằng nhau
# repeats = 3 có nhĩa là quá trình cross-validation sẽ hoàn thành sau 3 lần

# C5.0
set.seed(seed)
fit.c50 &amp;lt;- train(Class~., data=dataset, method=&amp;quot;C5.0&amp;quot;, metric = &amp;quot;Accuracy&amp;quot;, trControl=control)

# Stochastic Gradient Boosting
set.seed(seed)
fit.gbm &amp;lt;- train(Class~., data=dataset, method=&amp;quot;gbm&amp;quot;, metric = &amp;quot;Accuracy&amp;quot;, trControl=control, verbose=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So sánh kết quả hai mô hình:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boosting_results &amp;lt;- resamples(list(c5.0=fit.c50, gbm=fit.gbm))
summary(boosting_results)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## summary.resamples(object = boosting_results)
## 
## Models: c5.0, gbm 
## Number of resamples: 30 
## 
## Accuracy 
##           Min.   1st Qu.    Median      Mean   3rd Qu. Max. NA&amp;#39;s
## c5.0 0.8823529 0.9148810 0.9575163 0.9468627 0.9714286    1    0
## gbm  0.8529412 0.9166667 0.9428571 0.9420184 0.9714286    1    0
## 
## Kappa 
##           Min.   1st Qu.    Median      Mean  3rd Qu. Max. NA&amp;#39;s
## c5.0 0.7213115 0.8157164 0.9069808 0.8806722 0.937833    1    0
## gbm  0.6586345 0.8142060 0.8776224 0.8707906 0.937201    1    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dotplot(boosting_results)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ensemble-learning/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Từ kết quả so sánh ta thấy thuật toán &lt;code&gt;C5.0&lt;/code&gt; cho kết quả chính xác hơn so với &lt;code&gt;Stochastic Gradient Boosting&lt;/code&gt; trong bài toán này (với độ chính xác là &lt;code&gt;94.68%&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3 Thuật toán Bagging&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chúng ta cùng test hai thuật toán thuộc kỹ thuật &lt;code&gt;Bagging&lt;/code&gt; là: &lt;code&gt;Bagged CART&lt;/code&gt; và &lt;code&gt;Random Forest&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Dưới đây là ví dụ huấn luyện hai mô hình này trên &lt;code&gt;R&lt;/code&gt; với các tham số mặc định:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;control &amp;lt;- trainControl(method=&amp;quot;repeatedcv&amp;quot;, number=10, repeats=3)

# Bagged CART
set.seed(seed)
fit.treebag &amp;lt;- train(Class~., data=dataset, method=&amp;quot;treebag&amp;quot;, metric = &amp;quot;Accuracy&amp;quot;, trControl=control)

# Random Forest
set.seed(seed)
fit.rf &amp;lt;- train(Class~., data=dataset, method=&amp;quot;rf&amp;quot;, metric = &amp;quot;Accuracy&amp;quot;, trControl=control)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So sánh kết quả hai mô hình:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bagging_results &amp;lt;- resamples(list(treebag=fit.treebag, rf=fit.rf))
summary(bagging_results)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## summary.resamples(object = bagging_results)
## 
## Models: treebag, rf 
## Number of resamples: 30 
## 
## Accuracy 
##              Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA&amp;#39;s
## treebag 0.8285714 0.8922269 0.9428571 0.9210566 0.9440476 0.9722222    0
## rf      0.8235294 0.9142857 0.9428571 0.9343946 0.9714286 1.0000000    0
## 
## Kappa 
##              Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA&amp;#39;s
## treebag 0.6209386 0.7708291 0.8731884 0.8266350 0.8770749 0.9407895    0
## rf      0.5984252 0.8149436 0.8734173 0.8550575 0.9372010 1.0000000    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dotplot(bagging_results)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ensemble-learning/index_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Từ kết quả so sánh ta thấy thuật toán &lt;code&gt;Random Forest&lt;/code&gt; cho kết quả chính xác hơn so với &lt;code&gt;CART&lt;/code&gt; trong bài toán này (với độ chính xác là &lt;code&gt;93.44%&lt;/code&gt;). Tuy nhiên cả hai thuật toán &lt;code&gt;Bagging&lt;/code&gt; đều có độ chính xác nhỏ hơn so với 2 thuật toán &lt;code&gt;Boosting&lt;/code&gt; trước.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.4. Thuật toán Stacking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Để kết hợp các mô hình &lt;code&gt;machine learning&lt;/code&gt; khác nhau trong &lt;code&gt;R&lt;/code&gt; chúng ta sử dụng thư viện &lt;strong&gt;caretEnsemble&lt;/strong&gt;. Với danh sách các &lt;code&gt;caret models&lt;/code&gt;, hàm &lt;code&gt;caretStack()&lt;/code&gt; của gói này có thể sự dụng để chỉ định mô hình bậc cao hơn, từ đó sẽ học cách tìm sự kết hợp tốt nhất những &lt;code&gt;sub-models&lt;/code&gt; với nhau.&lt;/p&gt;
&lt;p&gt;Ở ví dụ này, tôi sẽ sử dụng 5 &lt;code&gt;sub-models&lt;/code&gt; sau cho tập dữ liệu &lt;code&gt;ionosphere&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linear Discriminate Analysis (&lt;code&gt;LDA&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Classification and Regression Trees (&lt;code&gt;CART&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logistic Regression (&lt;code&gt;GLM&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;k-Nearest Neighbors (&lt;code&gt;kNN&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support Vector Machine with a Radial Basis Kernel Function (&lt;code&gt;SVM&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dưới đây là ví dụ huấn luyện 5 mô hình này trên &lt;code&gt;R&lt;/code&gt; với các tham số mặc định:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;control &amp;lt;- trainControl(method=&amp;quot;repeatedcv&amp;quot;, number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
algorithmList &amp;lt;- c(&amp;#39;lda&amp;#39;, &amp;#39;rpart&amp;#39;, &amp;#39;glm&amp;#39;, &amp;#39;knn&amp;#39;, &amp;#39;svmRadial&amp;#39;)
set.seed(seed)
models &amp;lt;- caretList(Class~., data=dataset, trControl=control, methodList=algorithmList)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So sánh kết quả các mô hình:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results &amp;lt;- resamples(models)
summary(results)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## summary.resamples(object = results)
## 
## Models: lda, rpart, glm, knn, svmRadial 
## Number of resamples: 30 
## 
## Accuracy 
##                Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA&amp;#39;s
## lda       0.7941176 0.8297619 0.8571429 0.8669546 0.9136555 0.9428571    0
## rpart     0.8000000 0.8529412 0.8611111 0.8736819 0.9079365 0.9714286    0
## glm       0.7428571 0.8539916 0.8823529 0.8824214 0.9166667 0.9714286    0
## knn       0.7500000 0.8235294 0.8333333 0.8403097 0.8601190 0.9444444    0
## svmRadial 0.8888889 0.9142857 0.9436508 0.9477591 0.9714286 1.0000000    0
## 
## Kappa 
##                Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA&amp;#39;s
## lda       0.4803493 0.6048824 0.6697323 0.6868903 0.8032314 0.8679245    0
## rpart     0.5648313 0.6586345 0.7024010 0.7193438 0.7900135 0.9397590    0
## glm       0.4578313 0.6618591 0.7267975 0.7371380 0.8163265 0.9368030    0
## knn       0.4087591 0.5641026 0.6196004 0.6199654 0.6770575 0.8754325    0
## svmRadial 0.7419355 0.8142060 0.8776224 0.8847121 0.9375755 1.0000000    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dotplot(results)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ensemble-learning/index_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ta thấy trong các mô hình này thì &lt;code&gt;SVM&lt;/code&gt; cho kết quả chính xác nhất (&lt;code&gt;94.78%&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Giờ chúng ta hãy thử dùng kỹ thuật &lt;code&gt;stacking&lt;/code&gt; để xem có thể cải thiện được độ chính xác không.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Lưu ý&lt;/code&gt;:&lt;/strong&gt; Khi các bạn muốn kết hợp các mô hình với nhau sử dụng kỹ thuật &lt;code&gt;stacking&lt;/code&gt;, thì các bạn cần kiểm chứng rằng kết quả dự báo từ các mô hình này tương quan với nhau thấp. Nếu kết quả dự báo của các &lt;code&gt;sub-models&lt;/code&gt; tương quan cao với nhau (&amp;gt; 0.75) thì có nghĩa là chúng sẽ cho kết quả dự báo tương tự nhau, điều này sẽ làm giảm hiệu quả khi ta kết hợp các mô hình này với nhau.&lt;/p&gt;
&lt;p&gt;Kiểm tra độ tương quan giữa các &lt;code&gt;sub-models&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;modelCor(results)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 lda       rpart         glm       knn svmRadial
## lda       1.0000000 0.379461533 0.277037721 0.4898435 0.3056838
## rpart     0.3794615 1.000000000 0.001889458 0.4040556 0.2539580
## glm       0.2770377 0.001889458 1.000000000 0.1466240 0.4296011
## knn       0.4898435 0.404055597 0.146623958 1.0000000 0.5495574
## svmRadial 0.3056838 0.253957967 0.429601141 0.5495574 1.0000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;splom(results)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ensemble-learning/index_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Nhìn vào kết quả ta có thể thấy các &lt;code&gt;su-models&lt;/code&gt; cho kết quả dự báo tương quan với nhau thấp theo từng cặp. Cặp tương quan với nhau nhất là &lt;code&gt;SVM&lt;/code&gt; và &lt;code&gt;kNN&lt;/code&gt; với độ tương quan &lt;code&gt;0.549&lt;/code&gt;, cũng vẫn nhỏ hơn mức quy địn là cao (&lt;code&gt;&amp;gt;0.75&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Nào chúng ta hãy thử kết hợp &lt;code&gt;predictions&lt;/code&gt; của các &lt;code&gt;sub-models&lt;/code&gt; sử dụng mô hình &lt;code&gt;gml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stackControl &amp;lt;- trainControl(method=&amp;quot;repeatedcv&amp;quot;, number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
set.seed(seed)
stack.glm &amp;lt;- caretStack(models, method=&amp;quot;glm&amp;quot;, metric=&amp;quot;Accuracy&amp;quot;, trControl=stackControl)
print(stack.glm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## A glm ensemble of 5 base models: lda, rpart, glm, knn, svmRadial
## 
## Ensemble results:
## Generalized Linear Model 
## 
## 1053 samples
##    5 predictor
##    2 classes: &amp;#39;bad&amp;#39;, &amp;#39;good&amp;#39; 
## 
## No pre-processing
## Resampling: Cross-Validated (10 fold, repeated 3 times) 
## Summary of sample sizes: 947, 947, 947, 948, 947, 949, ... 
## Resampling results:
## 
##   Accuracy   Kappa    
##   0.9544285  0.9003902&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Độ chính xác cải thiện lên &lt;code&gt;95.44%&lt;/code&gt; so với chỉ sử dụng &lt;code&gt;SVM model&lt;/code&gt; là &lt;code&gt;94.78%&lt;/code&gt;, tuy nhiên cũng chưa có độ chênh lệnh nhiều.&lt;/p&gt;
&lt;p&gt;Tiếp theo tôi thử thử kết hợp &lt;code&gt;predictions&lt;/code&gt; của các &lt;code&gt;sub-models&lt;/code&gt; sử dụng mô hình &lt;code&gt;random forest&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(seed)
stack.rf &amp;lt;- caretStack(models, method=&amp;quot;rf&amp;quot;, metric=&amp;quot;Accuracy&amp;quot;, trControl=stackControl)
print(stack.rf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## A rf ensemble of 5 base models: lda, rpart, glm, knn, svmRadial
## 
## Ensemble results:
## Random Forest 
## 
## 1053 samples
##    5 predictor
##    2 classes: &amp;#39;bad&amp;#39;, &amp;#39;good&amp;#39; 
## 
## No pre-processing
## Resampling: Cross-Validated (10 fold, repeated 3 times) 
## Summary of sample sizes: 947, 947, 947, 948, 947, 949, ... 
## Resampling results across tuning parameters:
## 
##   mtry  Accuracy   Kappa    
##   2     0.9623381  0.9177343
##   3     0.9588700  0.9103978
##   5     0.9569833  0.9064705
## 
## Accuracy was used to select the optimal model using the largest value.
## The final value used for the model was mtry = 2.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Độ chính xác cũng cải thiện hơn so với chỉ dùng &lt;code&gt;svm model&lt;/code&gt; (&lt;code&gt;96.23%&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tham khảo:&lt;/strong&gt;
&lt;a href=&#34;https://machinelearningmastery.com/machine-learning-ensembles-with-r/&#34;&gt;How to Build an Ensemble Of Machine Learning Algorithms in R&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cách scrape một trang web bằng R. Scrape và so sánh dữ liệu lịch sử thị trường  tiền điện tử từ CoinMarketCap</title>
      <link>/post/crypto/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/crypto/</guid>
      <description>


&lt;p&gt;&lt;strong&gt;Web scraping&lt;/strong&gt; là công việc trích xuất dữ liệu từ một trang web. Trong thực tế đôi khi bạn cần thu thập 1 số lượng lớn thông tin từ một số trang web như là giá cổ phiếu, chi tiết sản phẩm, số liệu thống kê thể thao, thông tin liên hệ của công ty,…để phục vụ cho nhiều mục đích khác nhau. Tuy nhiên, việc lấy các thông tin này một cách thủ công thì cần rất nhiều thời gian. Lúc này web scraping chính là cách giúp chúng ta trích xuất dữ liệu từ các trang web một cách tự động. Kỹ thuật này chủ yếu tập trung vào việc chuyển đổi dữ liệu phi cấu trúc (HTML) trên web thành dữ liệu có cấu trúc (cơ sở dữ liệu, bảng tính,…)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CoinMarketCap&lt;/strong&gt; là một trang web chuyên cung cấp dữ liệu về các loại tiền điện tử đang được lưu hành trên thế giới. Nếu bạn là người đã hoặc đang tìm hiểu, đầu tư vào các đồng &lt;code&gt;coins&lt;/code&gt; thì không thể nào bỏ qua trang web cung cấp thông tin về tiền điện tử lớn nhất thế giới này. Với &lt;code&gt;CoinMarketCap&lt;/code&gt; bạn có thể xem rất nhiều lọai thông tin ví dụ như: biến động giá cả các đồng &lt;code&gt;coin&lt;/code&gt;, trữ lượng, khối lượng giao dịch theo từng khoảng thời gian, tỷ giá, xem trang web chính thức hoặc các hoạt động trên mạng xã hội của các đồng &lt;code&gt;coins&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Trong bài này tôi sẽ giới thiệu với các bạn cách sử dụng gói &lt;code&gt;rvest&lt;/code&gt; trong &lt;code&gt;R&lt;/code&gt; để &lt;code&gt;scrape&lt;/code&gt; dữ liệu lịch sử thị trường các loại tiền điện tử từ &lt;code&gt;CoinMarketCap&lt;/code&gt;. Sau đó dùng gói &lt;code&gt;ggplot2&lt;/code&gt; để trực quan hóa dữ liệu nhằm mục đích so sánh biến động giá cả của các đồng coins với nhau trong khoảng thời gian nhất định.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gói rvest&lt;/strong&gt; cũng giống như thư viện &lt;code&gt;BeautifulSoup&lt;/code&gt; trên &lt;code&gt;Python&lt;/code&gt;, là một thư viện &lt;code&gt;R&lt;/code&gt; để trích xuất dữ liệu từ các tập tin &lt;code&gt;HTML&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lưu ý khi scape một trang web:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Không nên tạo quá nhiều &lt;code&gt;request&lt;/code&gt; đến trang web trong 1 thời điểm, vì nó có thể gây ra sập trang web (có thể bị liệt vào tấn công từ chối dịch vụ &lt;code&gt;DDoS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Trang web có thể sẽ thường xuyên thay đổi giao diện, bố cục (&lt;code&gt;HTML&lt;/code&gt;) nên bạn cần thường xuyên cập nhật &lt;code&gt;code&lt;/code&gt; của mình&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nạp các thư viện cần dùng vào phiên làm việc của &lt;code&gt;R&lt;/code&gt; để thực hành:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(jsonlite) # Thư viện cho phép đọc json files
library(rvest) # thư viện để scape web
library(viridis) # Thay đổi bảng màu mặc định ggplot2
library(tidyverse) # Hệ sinh thái các gói hỗ trợ biến đổi (dplyr) và trực quan hóa dữ liệu (ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nếu chưa cài các thư viện trên thì các bạn dùng lệnh &lt;code&gt;install.packages(.)&lt;/code&gt; để cài đặt với tham số đầu vào là tên các thư viện cần cài đặt. Ví dụ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;rvest&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Đầu tiên chúng ta đọc &lt;code&gt;json&lt;/code&gt; file từ trang &lt;code&gt;CoinMarketCap&lt;/code&gt; để biết thông tin về các loại &lt;code&gt;coins&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;json &amp;lt;- &amp;quot;https://s2.coinmarketcap.com/generated/search/quick_search.json&amp;quot;
coins &amp;lt;- read_json(json, simplifyVector = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hiển thị bảng thông tin 10 đồng &lt;code&gt;coins&lt;/code&gt; đầu tiên theo &lt;code&gt;rank&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(coins,10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               name symbol rank            slug
## 1          Bitcoin    BTC    1         bitcoin
## 2         Ethereum    ETH    2        ethereum
## 3              XRP    XRP    3             xrp
## 4           Tether   USDT    4          tether
## 5        Chainlink   LINK    5       chainlink
## 6     Bitcoin Cash    BCH    6    bitcoin-cash
## 7         Litecoin    LTC    7        litecoin
## 8       Bitcoin SV    BSV    8      bitcoin-sv
## 9  Crypto.com Coin    CRO    9 crypto-com-coin
## 10    Binance Coin    BNB   10    binance-coin
##                                   tokens   id
## 1                  Bitcoin, bitcoin, BTC    1
## 2                Ethereum, ethereum, ETH 1027
## 3                          XRP, xrp, XRP   52
## 4                   Tether, tether, USDT  825
## 5             Chainlink, chainlink, LINK 1975
## 6        Bitcoin Cash, bitcoin-cash, BCH 1831
## 7                Litecoin, litecoin, LTC    2
## 8            Bitcoin SV, bitcoin-sv, BSV 3602
## 9  Crypto.com Coin, crypto-com-coin, CRO 3635
## 10       Binance Coin, binance-coin, BNB 1839&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra tổng số lượng đồng tiền kỹ thuật số đang lưu hành trên &lt;code&gt;CoinMarketCap&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(coins)[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4869&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Để ví dụ, trong bài này tôi sẽ so sánh thông tin 10 đồng &lt;code&gt;coins&lt;/code&gt; đầu tiên có rank từ 2 đến 11:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Lấy thông tin về tên, symbol và slug của 10 đồng coins có rank = [2:11]
coinslug &amp;lt;- coins$slug[2:11]
coinname &amp;lt;- coins$name[2:11]
coinsymbol &amp;lt;- coins$symbol[2:11]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Tạo hàm để get dữ liệu coins.&lt;/strong&gt; Khi ta vào mục &lt;code&gt;historical data&lt;/code&gt; (như hình bên dưới) để xem thông tin của từng loại &lt;code&gt;coin&lt;/code&gt; trên trang &lt;code&gt;CoinMarketCap&lt;/code&gt;, ta thấy trong đường &lt;code&gt;link&lt;/code&gt; có &lt;code&gt;3&lt;/code&gt; thông tin quan trọng đó là:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slug&lt;/code&gt;: Slug của loại coin đó (như đường link trong hình dưới là &lt;code&gt;bitcoin&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt;: Ngày bắt đầu của khoảng thời gian ta muốn xem thông tin&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt;: ngày kết thúc của khoảng thời gian ta muốn xem thông tin&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/post/2020-08-21-crypto.vn_files/bitcoin.PNG&#34; alt=&#34;Screenshot từ trang CoinMarketCap&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;Screenshot&lt;/code&gt; từ trang &lt;a href=&#34;https://coinmarketcap.com/currencies/bitcoin/historical-data/?start=20200722&amp;amp;end=20200822&#34;&gt;CoinMarketCap&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Vì vậy ta sẽ viết hàm để &lt;code&gt;get&lt;/code&gt; dữ liệu dựa vào &lt;code&gt;3&lt;/code&gt; thông tin trên như sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Tạo hàm get dữ liệu coin
get_data_coin &amp;lt;- function(coin, start_date, end_date){
  # coin: slug của coin
  # start_date: Ngày bắt đầu lấy dữ liệu
  # end_date: Ngày kết thúc lấy dữ liệu
  # Tạo đường link từ 3 thông tin đầu vào
  historyurl &amp;lt;- paste0(&amp;quot;https://coinmarketcap.com/currencies/&amp;quot;,
                      coin,
                      &amp;quot;/historical-data/?start=&amp;quot;,
                      start_date,
                      &amp;quot;&amp;amp;end=&amp;quot;,
                      end_date)
  
  # Đọc dữ liệu từ web
  url &amp;lt;-read_html(historyurl)
  data &amp;lt;- data.frame(html_table(url)[[3]])
  data$Slug &amp;lt;- coin
  return(data)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ví dụ sử dụng hàm &lt;code&gt;get_data_coin()&lt;/code&gt; vừa tạo để lấy dữ liệu lịch sử của &lt;code&gt;10&lt;/code&gt; loại coins trên từ ngày &lt;code&gt;21/08/2019&lt;/code&gt; dến ngày &lt;code&gt;21/08/2020&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Nhập ngày bắt đầu và và kết thúc trong khoảng thời gian muốn xem theo định đạng &amp;quot;Năm-Tháng-Ngày&amp;quot;
start_date = 20190821
end_date = 20200821
# Tạo list trống để lưu dữ liệu coins
results_data &amp;lt;- list()

# Lưu dữ liệu từng loại coin trong danh sách 10 coins ở trên vào list trống
for (i in (1:length(coinslug))){
  results_data[[i]] &amp;lt;- get_data_coin(coin = coinslug[i], start_date = start_date, end_date = end_date)
}

# Gộp data.frame của từng loại coin trong list vào thành 1 bảng
results_data &amp;lt;- do.call(rbind, results_data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Để kiểm tra dữ liệu thu được, ta hiển thị &lt;code&gt;10&lt;/code&gt; hàng dữ liệu đầu tiên trong bẳng bằng lệnh &lt;code&gt;head()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(results_data, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Date  Open.   High    Low Close..         Volume     Market.Cap
## 1  Aug 22, 2020 389.03 396.47 382.81  395.84 10,131,847,985 44,448,918,222
## 2  Aug 21, 2020 416.15 418.64 387.44  389.13 11,781,796,374 43,690,315,907
## 3  Aug 20, 2020 406.76 418.73 404.03  416.44 10,043,032,427 46,751,356,941
## 4  Aug 19, 2020 423.74 427.02 396.68  406.46 13,137,391,167 45,625,864,918
## 5  Aug 18, 2020 429.67 432.58 419.67  423.67 11,978,984,079 47,551,407,033
## 6  Aug 17, 2020 433.97 442.73 422.65  429.53 13,227,089,410 48,203,426,751
## 7  Aug 16, 2020 433.35 436.27 415.09  433.79 12,168,816,874 48,675,162,267
## 8  Aug 15, 2020 437.56 441.75 429.87  433.35 12,416,067,894 48,620,820,125
## 9  Aug 14, 2020 428.68 444.58 423.35  437.40 15,064,589,987 49,068,474,083
## 10 Aug 13, 2020 390.84 432.90 379.71  428.74 18,480,303,526 48,091,569,052
##        Slug
## 1  ethereum
## 2  ethereum
## 3  ethereum
## 4  ethereum
## 5  ethereum
## 6  ethereum
## 7  ethereum
## 8  ethereum
## 9  ethereum
## 10 ethereum&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thêm thông tin gồm &lt;code&gt;name&lt;/code&gt; và &lt;code&gt;symbol&lt;/code&gt; của từng &lt;code&gt;coin&lt;/code&gt; vào bảng dữ liệu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;coinnames &amp;lt;- data.frame(
        Name = as.character(coinname),
        Symbol = as.character(coinsymbol),
        Slug = as.character(coinslug))
df &amp;lt;- full_join(coinnames, results_data, by = &amp;quot;Slug&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Để kiểm tra bảng dữ liệu mới thu được, ta hiển thị &lt;code&gt;10&lt;/code&gt; hàng dữ liệu đầu tiên trong bảng:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(df, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        Name Symbol     Slug         Date  Open.   High    Low Close..
## 1  Ethereum    ETH ethereum Aug 22, 2020 389.03 396.47 382.81  395.84
## 2  Ethereum    ETH ethereum Aug 21, 2020 416.15 418.64 387.44  389.13
## 3  Ethereum    ETH ethereum Aug 20, 2020 406.76 418.73 404.03  416.44
## 4  Ethereum    ETH ethereum Aug 19, 2020 423.74 427.02 396.68  406.46
## 5  Ethereum    ETH ethereum Aug 18, 2020 429.67 432.58 419.67  423.67
## 6  Ethereum    ETH ethereum Aug 17, 2020 433.97 442.73 422.65  429.53
## 7  Ethereum    ETH ethereum Aug 16, 2020 433.35 436.27 415.09  433.79
## 8  Ethereum    ETH ethereum Aug 15, 2020 437.56 441.75 429.87  433.35
## 9  Ethereum    ETH ethereum Aug 14, 2020 428.68 444.58 423.35  437.40
## 10 Ethereum    ETH ethereum Aug 13, 2020 390.84 432.90 379.71  428.74
##            Volume     Market.Cap
## 1  10,131,847,985 44,448,918,222
## 2  11,781,796,374 43,690,315,907
## 3  10,043,032,427 46,751,356,941
## 4  13,137,391,167 45,625,864,918
## 5  11,978,984,079 47,551,407,033
## 6  13,227,089,410 48,203,426,751
## 7  12,168,816,874 48,675,162,267
## 8  12,416,067,894 48,620,820,125
## 9  15,064,589,987 49,068,474,083
## 10 18,480,303,526 48,091,569,052&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ta thấy cột &lt;code&gt;Date&lt;/code&gt; ở dạng &lt;code&gt;character&lt;/code&gt; nên cần chuyển về dạng &lt;code&gt;date&lt;/code&gt; như sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df$Date &amp;lt;- lubridate::mdy(unlist(df$Date))
head(df, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        Name Symbol     Slug       Date  Open.   High    Low Close..
## 1  Ethereum    ETH ethereum 2020-08-22 389.03 396.47 382.81  395.84
## 2  Ethereum    ETH ethereum 2020-08-21 416.15 418.64 387.44  389.13
## 3  Ethereum    ETH ethereum 2020-08-20 406.76 418.73 404.03  416.44
## 4  Ethereum    ETH ethereum 2020-08-19 423.74 427.02 396.68  406.46
## 5  Ethereum    ETH ethereum 2020-08-18 429.67 432.58 419.67  423.67
## 6  Ethereum    ETH ethereum 2020-08-17 433.97 442.73 422.65  429.53
## 7  Ethereum    ETH ethereum 2020-08-16 433.35 436.27 415.09  433.79
## 8  Ethereum    ETH ethereum 2020-08-15 437.56 441.75 429.87  433.35
## 9  Ethereum    ETH ethereum 2020-08-14 428.68 444.58 423.35  437.40
## 10 Ethereum    ETH ethereum 2020-08-13 390.84 432.90 379.71  428.74
##            Volume     Market.Cap
## 1  10,131,847,985 44,448,918,222
## 2  11,781,796,374 43,690,315,907
## 3  10,043,032,427 46,751,356,941
## 4  13,137,391,167 45,625,864,918
## 5  11,978,984,079 47,551,407,033
## 6  13,227,089,410 48,203,426,751
## 7  12,168,816,874 48,675,162,267
## 8  12,416,067,894 48,620,820,125
## 9  15,064,589,987 49,068,474,083
## 10 18,480,303,526 48,091,569,052&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dùng thư viện &lt;code&gt;ggplot2&lt;/code&gt; để trực quan hóa và so sánh biến động giá cả của các loại &lt;code&gt;coins&lt;/code&gt; trong khoảng thời gian từ ngày &lt;code&gt;21/08/2019&lt;/code&gt; dến ngày &lt;code&gt;21/08/2020&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Chỉ so sánh thông tìn các cột Open, High, Low, Close
df &amp;lt;- df[,1:8]

# Chuyển bẳng dữ liệu từ dạng bảng rộng về dài
library(tidyr)
df$Name&amp;lt;- factor(df$Name)
df_tall &amp;lt;- df%&amp;gt;% gather(key = s, value = value, -Name, -Symbol, -Slug, -Date)
df_tall$s &amp;lt;- factor(df_tall$s, levels=unique(as.character(df_tall$s)))

# Vẽ biểu đồ so sánh thông tin
ggplot(df_tall, aes(x = Date, y = value, color = Name)) +
geom_line(size = 0.75) +
xlab(&amp;quot;Time&amp;quot;)+
facet_wrap(~s, ncol = 2, scales = &amp;quot;free_y&amp;quot;)+
theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/crypto/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;1152&#34; /&gt;
Khi đã có dữ liệu rồi tiếp theo chúng ta có thể xây dựng các mô hình dự báo để đự đoán giá các loại &lt;code&gt;coins&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chú thích:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Open&lt;/code&gt;: Giá mở cửa&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Close&lt;/code&gt;: Giá đóng cửa&lt;/li&gt;
&lt;li&gt;&lt;code&gt;High&lt;/code&gt;: Mức giá cao nhất&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Low&lt;/code&gt;: Mức giá thấp nhất&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;4&lt;/code&gt; bộ phận này cấu thành nên một &lt;code&gt;nến&lt;/code&gt; giao dịch đại diện cho sự lên xuống của giá trị một loại tài sản trong một khoảng thời gian cố định. Điểm &lt;code&gt;“open”&lt;/code&gt; của nến đại diện cho mức giá của loại tài sản khi bắt đầu khoảng thời gian giao dịch, trong khi &lt;code&gt;“close”&lt;/code&gt; là mức giá khi kết thúc thời gian giao dịch. Còn &lt;code&gt;“high”&lt;/code&gt; và &lt;code&gt;“low”&lt;/code&gt; lần lượt là các mức giá cao nhất và thấp nhất đạt được trong phiên giao dịch.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/post/2020-08-21-crypto.vn_files/Candlestick-Anatomy.jpg&#34; alt=&#34;Các bộ phận của một nến giao dịch, với nến tăng (màu xanh) và nếu giảm (màu đỏ)&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Các bộ phận của một nến giao dịch, với nến &lt;code&gt;tăng&lt;/code&gt; (màu xanh) và nếu &lt;code&gt;giảm&lt;/code&gt; (màu đỏ)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data visualization với ggplot2. Chuyển đổi từ ggplot2 objects sang biểu đồ tương tác plotly</title>
      <link>/post/ggplot-plotly/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/ggplot-plotly/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Nạp các thư viện cần thiết vào phiên làm việc của R&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(ggplot2)
library(plotly)
library(dygraphs)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Get&lt;/code&gt; dữ liệu &lt;code&gt;bitcoin&lt;/code&gt; từ trang &lt;code&gt;CoinMarketcap&lt;/code&gt; để thực hiện data visualization:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get history data of bitcoin 28/04/2013 - 23/08/2020
url &amp;lt;-read_html(&amp;quot;https://coinmarketcap.com/currencies/bitcoin/historical-data/?start=20130428&amp;amp;end=20200823&amp;quot;)
data &amp;lt;- url %&amp;gt;% html_table()
df &amp;lt;- data[[3]]
df &amp;lt;- as_tibble(df)
colnames(df) &amp;lt;- c(&amp;quot;date&amp;quot;, &amp;quot;open&amp;quot;, &amp;quot;high&amp;quot;, &amp;quot;low&amp;quot;, &amp;quot;close&amp;quot;, &amp;quot;volume&amp;quot;, &amp;quot;market_cap&amp;quot;)

# Chuyển cột date từ dạng strings về &amp;#39;date&amp;#39;
df$date &amp;lt;- lubridate::mdy(df$date) 

# bỏ dấu &amp;#39;,&amp;#39; trong các giá trị của dữ liệu 
df$close &amp;lt;-  gsub(&amp;quot;,&amp;quot;, &amp;quot;&amp;quot;, df$close)

# Chuyển dữ liệu cột close về dạng numeric
df$close &amp;lt;- as.numeric(df$close)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra bảng dữ liệu thu được:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,676 x 7
##    date       open      high      low        close volume         market_cap    
##    &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;         
##  1 2020-08-24 11,663.69 11,807.63 11,623.25 11775. 20,681,511,755 217,477,962,6~
##  2 2020-08-23 11,679.70 11,713.43 11,559.92 11665. 18,482,062,658 215,439,967,3~
##  3 2020-08-22 11,585.48 11,689.41 11,448.81 11682. 20,224,191,306 215,742,068,8~
##  4 2020-08-21 11,878.03 11,899.26 11,564.98 11592. 23,762,425,999 214,082,401,8~
##  5 2020-08-20 11,761.50 11,900.41 11,710.06 11878. 20,175,242,945 219,350,310,3~
##  6 2020-08-19 11,990.88 12,028.92 11,687.33 11758. 24,502,851,117 217,122,068,3~
##  7 2020-08-18 12,251.90 12,335.71 11,954.53 11991. 26,043,227,672 221,413,097,5~
##  8 2020-08-17 11,895.66 12,359.06 11,806.70 12254. 28,227,687,027 226,261,747,5~
##  9 2020-08-16 11,866.69 11,934.90 11,737.19 11893. 20,583,375,490 219,576,092,1~
## 10 2020-08-15 11,768.70 11,963.20 11,768.70 11866. 23,354,924,400 219,064,372,7~
## # ... with 2,666 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cách &lt;code&gt;scrape&lt;/code&gt; một trang web bằng R và &lt;code&gt;get&lt;/code&gt; dữ liệu lịch sử thị trường tiền điện tử các bạn có thể đọc ở bài trước của tôi tại &lt;a href=&#34;https://svcuong.github.io/post/crypto/&#34;&gt;đây&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Data visualization với &lt;code&gt;ggplot2&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot using ggplot2
pp &amp;lt;- ggplot(data = df, aes(x = date, y = close)) 
pp &amp;lt;- pp + geom_line(colour = &amp;quot;blue&amp;quot;) 
pp &amp;lt;- pp + labs(title = &amp;quot;Historical data for Bitcoin&amp;quot;,
     subtitle = &amp;quot;Accessing Bitcoin Data&amp;quot;,
     caption = &amp;quot;sources: Bitcoin (BTC); https://coinmarketcap.com&amp;quot;,
     x = &amp;quot;Date&amp;quot;,
     y = &amp;quot;Close&amp;quot;)
pp &amp;lt;- pp + theme_bw()
pp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-23-ggplot-plotly-dygraphs_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Để chuyển &lt;code&gt;ggplot2 object&lt;/code&gt; về dạng biểu đồ tương tác &lt;code&gt;plotly&lt;/code&gt; ta dùng hàm &lt;code&gt;ggplotly()&lt;/code&gt; trong thư viện &lt;code&gt;plotly&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplotly(pp)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[15823,15824,15825,15826,15827,15828,15829,15830,15831,15832,15833,15834,15835,15836,15837,15838,15839,15840,15841,15842,15843,15844,15845,15846,15847,15848,15849,15850,15851,15852,15853,15854,15855,15856,15857,15858,15859,15860,15861,15862,15863,15864,15865,15866,15867,15868,15869,15870,15871,15872,15873,15874,15875,15876,15877,15878,15879,15880,15881,15882,15883,15884,15885,15886,15887,15888,15889,15890,15891,15892,15893,15894,15895,15896,15897,15898,15899,15900,15901,15902,15903,15904,15905,15906,15907,15908,15909,15910,15911,15912,15913,15914,15915,15916,15917,15918,15919,15920,15921,15922,15923,15924,15925,15926,15927,15928,15929,15930,15931,15932,15933,15934,15935,15936,15937,15938,15939,15940,15941,15942,15943,15944,15945,15946,15947,15948,15949,15950,15951,15952,15953,15954,15955,15956,15957,15958,15959,15960,15961,15962,15963,15964,15965,15966,15967,15968,15969,15970,15971,15972,15973,15974,15975,15976,15977,15978,15979,15980,15981,15982,15983,15984,15985,15986,15987,15988,15989,15990,15991,15992,15993,15994,15995,15996,15997,15998,15999,16000,16001,16002,16003,16004,16005,16006,16007,16008,16009,16010,16011,16012,16013,16014,16015,16016,16017,16018,16019,16020,16021,16022,16023,16024,16025,16026,16027,16028,16029,16030,16031,16032,16033,16034,16035,16036,16037,16038,16039,16040,16041,16042,16043,16044,16045,16046,16047,16048,16049,16050,16051,16052,16053,16054,16055,16056,16057,16058,16059,16060,16061,16062,16063,16064,16065,16066,16067,16068,16069,16070,16071,16072,16073,16074,16075,16076,16077,16078,16079,16080,16081,16082,16083,16084,16085,16086,16087,16088,16089,16090,16091,16092,16093,16094,16095,16096,16097,16098,16099,16100,16101,16102,16103,16104,16105,16106,16107,16108,16109,16110,16111,16112,16113,16114,16115,16116,16117,16118,16119,16120,16121,16122,16123,16124,16125,16126,16127,16128,16129,16130,16131,16132,16133,16134,16135,16136,16137,16138,16139,16140,16141,16142,16143,16144,16145,16146,16147,16148,16149,16150,16151,16152,16153,16154,16155,16156,16157,16158,16159,16160,16161,16162,16163,16164,16165,16166,16167,16168,16169,16170,16171,16172,16173,16174,16175,16176,16177,16178,16179,16180,16181,16182,16183,16184,16185,16186,16187,16188,16189,16190,16191,16192,16193,16194,16195,16196,16197,16198,16199,16200,16201,16202,16203,16204,16205,16206,16207,16208,16209,16210,16211,16212,16213,16214,16215,16216,16217,16218,16219,16220,16221,16222,16223,16224,16225,16226,16227,16228,16229,16230,16231,16232,16233,16234,16235,16236,16237,16238,16239,16240,16241,16242,16243,16244,16245,16246,16247,16248,16249,16250,16251,16252,16253,16254,16255,16256,16257,16258,16259,16260,16261,16262,16263,16264,16265,16266,16267,16268,16269,16270,16271,16272,16273,16274,16275,16276,16277,16278,16279,16280,16281,16282,16283,16284,16285,16286,16287,16288,16289,16290,16291,16292,16293,16294,16295,16296,16297,16298,16299,16300,16301,16302,16303,16304,16305,16306,16307,16308,16309,16310,16311,16312,16313,16314,16315,16316,16317,16318,16319,16320,16321,16322,16323,16324,16325,16326,16327,16328,16329,16330,16331,16332,16333,16334,16335,16336,16337,16338,16339,16340,16341,16342,16343,16344,16345,16346,16347,16348,16349,16350,16351,16352,16353,16354,16355,16356,16357,16358,16359,16360,16361,16362,16363,16364,16365,16366,16367,16368,16369,16370,16371,16372,16373,16374,16375,16376,16377,16378,16379,16380,16381,16382,16383,16384,16385,16386,16387,16388,16389,16390,16391,16392,16393,16394,16395,16396,16397,16398,16399,16400,16401,16402,16403,16404,16405,16406,16407,16408,16409,16410,16411,16412,16413,16414,16415,16416,16417,16418,16419,16420,16421,16422,16423,16424,16425,16426,16427,16428,16429,16430,16431,16432,16433,16434,16435,16436,16437,16438,16439,16440,16441,16442,16443,16444,16445,16446,16447,16448,16449,16450,16451,16452,16453,16454,16455,16456,16457,16458,16459,16460,16461,16462,16463,16464,16465,16466,16467,16468,16469,16470,16471,16472,16473,16474,16475,16476,16477,16478,16479,16480,16481,16482,16483,16484,16485,16486,16487,16488,16489,16490,16491,16492,16493,16494,16495,16496,16497,16498,16499,16500,16501,16502,16503,16504,16505,16506,16507,16508,16509,16510,16511,16512,16513,16514,16515,16516,16517,16518,16519,16520,16521,16522,16523,16524,16525,16526,16527,16528,16529,16530,16531,16532,16533,16534,16535,16536,16537,16538,16539,16540,16541,16542,16543,16544,16545,16546,16547,16548,16549,16550,16551,16552,16553,16554,16555,16556,16557,16558,16559,16560,16561,16562,16563,16564,16565,16566,16567,16568,16569,16570,16571,16572,16573,16574,16575,16576,16577,16578,16579,16580,16581,16582,16583,16584,16585,16586,16587,16588,16589,16590,16591,16592,16593,16594,16595,16596,16597,16598,16599,16600,16601,16602,16603,16604,16605,16606,16607,16608,16609,16610,16611,16612,16613,16614,16615,16616,16617,16618,16619,16620,16621,16622,16623,16624,16625,16626,16627,16628,16629,16630,16631,16632,16633,16634,16635,16636,16637,16638,16639,16640,16641,16642,16643,16644,16645,16646,16647,16648,16649,16650,16651,16652,16653,16654,16655,16656,16657,16658,16659,16660,16661,16662,16663,16664,16665,16666,16667,16668,16669,16670,16671,16672,16673,16674,16675,16676,16677,16678,16679,16680,16681,16682,16683,16684,16685,16686,16687,16688,16689,16690,16691,16692,16693,16694,16695,16696,16697,16698,16699,16700,16701,16702,16703,16704,16705,16706,16707,16708,16709,16710,16711,16712,16713,16714,16715,16716,16717,16718,16719,16720,16721,16722,16723,16724,16725,16726,16727,16728,16729,16730,16731,16732,16733,16734,16735,16736,16737,16738,16739,16740,16741,16742,16743,16744,16745,16746,16747,16748,16749,16750,16751,16752,16753,16754,16755,16756,16757,16758,16759,16760,16761,16762,16763,16764,16765,16766,16767,16768,16769,16770,16771,16772,16773,16774,16775,16776,16777,16778,16779,16780,16781,16782,16783,16784,16785,16786,16787,16788,16789,16790,16791,16792,16793,16794,16795,16796,16797,16798,16799,16800,16801,16802,16803,16804,16805,16806,16807,16808,16809,16810,16811,16812,16813,16814,16815,16816,16817,16818,16819,16820,16821,16822,16823,16824,16825,16826,16827,16828,16829,16830,16831,16832,16833,16834,16835,16836,16837,16838,16839,16840,16841,16842,16843,16844,16845,16846,16847,16848,16849,16850,16851,16852,16853,16854,16855,16856,16857,16858,16859,16860,16861,16862,16863,16864,16865,16866,16867,16868,16869,16870,16871,16872,16873,16874,16875,16876,16877,16878,16879,16880,16881,16882,16883,16884,16885,16886,16887,16888,16889,16890,16891,16892,16893,16894,16895,16896,16897,16898,16899,16900,16901,16902,16903,16904,16905,16906,16907,16908,16909,16910,16911,16912,16913,16914,16915,16916,16917,16918,16919,16920,16921,16922,16923,16924,16925,16926,16927,16928,16929,16930,16931,16932,16933,16934,16935,16936,16937,16938,16939,16940,16941,16942,16943,16944,16945,16946,16947,16948,16949,16950,16951,16952,16953,16954,16955,16956,16957,16958,16959,16960,16961,16962,16963,16964,16965,16966,16967,16968,16969,16970,16971,16972,16973,16974,16975,16976,16977,16978,16979,16980,16981,16982,16983,16984,16985,16986,16987,16988,16989,16990,16991,16992,16993,16994,16995,16996,16997,16998,16999,17000,17001,17002,17003,17004,17005,17006,17007,17008,17009,17010,17011,17012,17013,17014,17015,17016,17017,17018,17019,17020,17021,17022,17023,17024,17025,17026,17027,17028,17029,17030,17031,17032,17033,17034,17035,17036,17037,17038,17039,17040,17041,17042,17043,17044,17045,17046,17047,17048,17049,17050,17051,17052,17053,17054,17055,17056,17057,17058,17059,17060,17061,17062,17063,17064,17065,17066,17067,17068,17069,17070,17071,17072,17073,17074,17075,17076,17077,17078,17079,17080,17081,17082,17083,17084,17085,17086,17087,17088,17089,17090,17091,17092,17093,17094,17095,17096,17097,17098,17099,17100,17101,17102,17103,17104,17105,17106,17107,17108,17109,17110,17111,17112,17113,17114,17115,17116,17117,17118,17119,17120,17121,17122,17123,17124,17125,17126,17127,17128,17129,17130,17131,17132,17133,17134,17135,17136,17137,17138,17139,17140,17141,17142,17143,17144,17145,17146,17147,17148,17149,17150,17151,17152,17153,17154,17155,17156,17157,17158,17159,17160,17161,17162,17163,17164,17165,17166,17167,17168,17169,17170,17171,17172,17173,17174,17175,17176,17177,17178,17179,17180,17181,17182,17183,17184,17185,17186,17187,17188,17189,17190,17191,17192,17193,17194,17195,17196,17197,17198,17199,17200,17201,17202,17203,17204,17205,17206,17207,17208,17209,17210,17211,17212,17213,17214,17215,17216,17217,17218,17219,17220,17221,17222,17223,17224,17225,17226,17227,17228,17229,17230,17231,17232,17233,17234,17235,17236,17237,17238,17239,17240,17241,17242,17243,17244,17245,17246,17247,17248,17249,17250,17251,17252,17253,17254,17255,17256,17257,17258,17259,17260,17261,17262,17263,17264,17265,17266,17267,17268,17269,17270,17271,17272,17273,17274,17275,17276,17277,17278,17279,17280,17281,17282,17283,17284,17285,17286,17287,17288,17289,17290,17291,17292,17293,17294,17295,17296,17297,17298,17299,17300,17301,17302,17303,17304,17305,17306,17307,17308,17309,17310,17311,17312,17313,17314,17315,17316,17317,17318,17319,17320,17321,17322,17323,17324,17325,17326,17327,17328,17329,17330,17331,17332,17333,17334,17335,17336,17337,17338,17339,17340,17341,17342,17343,17344,17345,17346,17347,17348,17349,17350,17351,17352,17353,17354,17355,17356,17357,17358,17359,17360,17361,17362,17363,17364,17365,17366,17367,17368,17369,17370,17371,17372,17373,17374,17375,17376,17377,17378,17379,17380,17381,17382,17383,17384,17385,17386,17387,17388,17389,17390,17391,17392,17393,17394,17395,17396,17397,17398,17399,17400,17401,17402,17403,17404,17405,17406,17407,17408,17409,17410,17411,17412,17413,17414,17415,17416,17417,17418,17419,17420,17421,17422,17423,17424,17425,17426,17427,17428,17429,17430,17431,17432,17433,17434,17435,17436,17437,17438,17439,17440,17441,17442,17443,17444,17445,17446,17447,17448,17449,17450,17451,17452,17453,17454,17455,17456,17457,17458,17459,17460,17461,17462,17463,17464,17465,17466,17467,17468,17469,17470,17471,17472,17473,17474,17475,17476,17477,17478,17479,17480,17481,17482,17483,17484,17485,17486,17487,17488,17489,17490,17491,17492,17493,17494,17495,17496,17497,17498,17499,17500,17501,17502,17503,17504,17505,17506,17507,17508,17509,17510,17511,17512,17513,17514,17515,17516,17517,17518,17519,17520,17521,17522,17523,17524,17525,17526,17527,17528,17529,17530,17531,17532,17533,17534,17535,17536,17537,17538,17539,17540,17541,17542,17543,17544,17545,17546,17547,17548,17549,17550,17551,17552,17553,17554,17555,17556,17557,17558,17559,17560,17561,17562,17563,17564,17565,17566,17567,17568,17569,17570,17571,17572,17573,17574,17575,17576,17577,17578,17579,17580,17581,17582,17583,17584,17585,17586,17587,17588,17589,17590,17591,17592,17593,17594,17595,17596,17597,17598,17599,17600,17601,17602,17603,17604,17605,17606,17607,17608,17609,17610,17611,17612,17613,17614,17615,17616,17617,17618,17619,17620,17621,17622,17623,17624,17625,17626,17627,17628,17629,17630,17631,17632,17633,17634,17635,17636,17637,17638,17639,17640,17641,17642,17643,17644,17645,17646,17647,17648,17649,17650,17651,17652,17653,17654,17655,17656,17657,17658,17659,17660,17661,17662,17663,17664,17665,17666,17667,17668,17669,17670,17671,17672,17673,17674,17675,17676,17677,17678,17679,17680,17681,17682,17683,17684,17685,17686,17687,17688,17689,17690,17691,17692,17693,17694,17695,17696,17697,17698,17699,17700,17701,17702,17703,17704,17705,17706,17707,17708,17709,17710,17711,17712,17713,17714,17715,17716,17717,17718,17719,17720,17721,17722,17723,17724,17725,17726,17727,17728,17729,17730,17731,17732,17733,17734,17735,17736,17737,17738,17739,17740,17741,17742,17743,17744,17745,17746,17747,17748,17749,17750,17751,17752,17753,17754,17755,17756,17757,17758,17759,17760,17761,17762,17763,17764,17765,17766,17767,17768,17769,17770,17771,17772,17773,17774,17775,17776,17777,17778,17779,17780,17781,17782,17783,17784,17785,17786,17787,17788,17789,17790,17791,17792,17793,17794,17795,17796,17797,17798,17799,17800,17801,17802,17803,17804,17805,17806,17807,17808,17809,17810,17811,17812,17813,17814,17815,17816,17817,17818,17819,17820,17821,17822,17823,17824,17825,17826,17827,17828,17829,17830,17831,17832,17833,17834,17835,17836,17837,17838,17839,17840,17841,17842,17843,17844,17845,17846,17847,17848,17849,17850,17851,17852,17853,17854,17855,17856,17857,17858,17859,17860,17861,17862,17863,17864,17865,17866,17867,17868,17869,17870,17871,17872,17873,17874,17875,17876,17877,17878,17879,17880,17881,17882,17883,17884,17885,17886,17887,17888,17889,17890,17891,17892,17893,17894,17895,17896,17897,17898,17899,17900,17901,17902,17903,17904,17905,17906,17907,17908,17909,17910,17911,17912,17913,17914,17915,17916,17917,17918,17919,17920,17921,17922,17923,17924,17925,17926,17927,17928,17929,17930,17931,17932,17933,17934,17935,17936,17937,17938,17939,17940,17941,17942,17943,17944,17945,17946,17947,17948,17949,17950,17951,17952,17953,17954,17955,17956,17957,17958,17959,17960,17961,17962,17963,17964,17965,17966,17967,17968,17969,17970,17971,17972,17973,17974,17975,17976,17977,17978,17979,17980,17981,17982,17983,17984,17985,17986,17987,17988,17989,17990,17991,17992,17993,17994,17995,17996,17997,17998,17999,18000,18001,18002,18003,18004,18005,18006,18007,18008,18009,18010,18011,18012,18013,18014,18015,18016,18017,18018,18019,18020,18021,18022,18023,18024,18025,18026,18027,18028,18029,18030,18031,18032,18033,18034,18035,18036,18037,18038,18039,18040,18041,18042,18043,18044,18045,18046,18047,18048,18049,18050,18051,18052,18053,18054,18055,18056,18057,18058,18059,18060,18061,18062,18063,18064,18065,18066,18067,18068,18069,18070,18071,18072,18073,18074,18075,18076,18077,18078,18079,18080,18081,18082,18083,18084,18085,18086,18087,18088,18089,18090,18091,18092,18093,18094,18095,18096,18097,18098,18099,18100,18101,18102,18103,18104,18105,18106,18107,18108,18109,18110,18111,18112,18113,18114,18115,18116,18117,18118,18119,18120,18121,18122,18123,18124,18125,18126,18127,18128,18129,18130,18131,18132,18133,18134,18135,18136,18137,18138,18139,18140,18141,18142,18143,18144,18145,18146,18147,18148,18149,18150,18151,18152,18153,18154,18155,18156,18157,18158,18159,18160,18161,18162,18163,18164,18165,18166,18167,18168,18169,18170,18171,18172,18173,18174,18175,18176,18177,18178,18179,18180,18181,18182,18183,18184,18185,18186,18187,18188,18189,18190,18191,18192,18193,18194,18195,18196,18197,18198,18199,18200,18201,18202,18203,18204,18205,18206,18207,18208,18209,18210,18211,18212,18213,18214,18215,18216,18217,18218,18219,18220,18221,18222,18223,18224,18225,18226,18227,18228,18229,18230,18231,18232,18233,18234,18235,18236,18237,18238,18239,18240,18241,18242,18243,18244,18245,18246,18247,18248,18249,18250,18251,18252,18253,18254,18255,18256,18257,18258,18259,18260,18261,18262,18263,18264,18265,18266,18267,18268,18269,18270,18271,18272,18273,18274,18275,18276,18277,18278,18279,18280,18281,18282,18283,18284,18285,18286,18287,18288,18289,18290,18291,18292,18293,18294,18295,18296,18297,18298,18299,18300,18301,18302,18303,18304,18305,18306,18307,18308,18309,18310,18311,18312,18313,18314,18315,18316,18317,18318,18319,18320,18321,18322,18323,18324,18325,18326,18327,18328,18329,18330,18331,18332,18333,18334,18335,18336,18337,18338,18339,18340,18341,18342,18343,18344,18345,18346,18347,18348,18349,18350,18351,18352,18353,18354,18355,18356,18357,18358,18359,18360,18361,18362,18363,18364,18365,18366,18367,18368,18369,18370,18371,18372,18373,18374,18375,18376,18377,18378,18379,18380,18381,18382,18383,18384,18385,18386,18387,18388,18389,18390,18391,18392,18393,18394,18395,18396,18397,18398,18399,18400,18401,18402,18403,18404,18405,18406,18407,18408,18409,18410,18411,18412,18413,18414,18415,18416,18417,18418,18419,18420,18421,18422,18423,18424,18425,18426,18427,18428,18429,18430,18431,18432,18433,18434,18435,18436,18437,18438,18439,18440,18441,18442,18443,18444,18445,18446,18447,18448,18449,18450,18451,18452,18453,18454,18455,18456,18457,18458,18459,18460,18461,18462,18463,18464,18465,18466,18467,18468,18469,18470,18471,18472,18473,18474,18475,18476,18477,18478,18479,18480,18481,18482,18483,18484,18485,18486,18487,18488,18489,18490,18491,18492,18493,18494,18495,18496,18497,18498],&#34;ytext&#34;:[&#34;date: 2013-04-28&lt;br /&gt;close:   134.21&#34;,&#34;date: 2013-04-29&lt;br /&gt;close:   144.54&#34;,&#34;date: 2013-04-30&lt;br /&gt;close:   139.00&#34;,&#34;date: 2013-05-01&lt;br /&gt;close:   116.99&#34;,&#34;date: 2013-05-02&lt;br /&gt;close:   105.21&#34;,&#34;date: 2013-05-03&lt;br /&gt;close:    97.75&#34;,&#34;date: 2013-05-04&lt;br /&gt;close:   112.50&#34;,&#34;date: 2013-05-05&lt;br /&gt;close:   115.91&#34;,&#34;date: 2013-05-06&lt;br /&gt;close:   112.30&#34;,&#34;date: 2013-05-07&lt;br /&gt;close:   111.50&#34;,&#34;date: 2013-05-08&lt;br /&gt;close:   113.57&#34;,&#34;date: 2013-05-09&lt;br /&gt;close:   112.67&#34;,&#34;date: 2013-05-10&lt;br /&gt;close:   117.20&#34;,&#34;date: 2013-05-11&lt;br /&gt;close:   115.24&#34;,&#34;date: 2013-05-12&lt;br /&gt;close:   115.00&#34;,&#34;date: 2013-05-13&lt;br /&gt;close:   117.98&#34;,&#34;date: 2013-05-14&lt;br /&gt;close:   111.50&#34;,&#34;date: 2013-05-15&lt;br /&gt;close:   114.22&#34;,&#34;date: 2013-05-16&lt;br /&gt;close:   118.76&#34;,&#34;date: 2013-05-17&lt;br /&gt;close:   123.01&#34;,&#34;date: 2013-05-18&lt;br /&gt;close:   123.50&#34;,&#34;date: 2013-05-19&lt;br /&gt;close:   121.99&#34;,&#34;date: 2013-05-20&lt;br /&gt;close:   122.00&#34;,&#34;date: 2013-05-21&lt;br /&gt;close:   122.88&#34;,&#34;date: 2013-05-22&lt;br /&gt;close:   123.89&#34;,&#34;date: 2013-05-23&lt;br /&gt;close:   126.70&#34;,&#34;date: 2013-05-24&lt;br /&gt;close:   133.20&#34;,&#34;date: 2013-05-25&lt;br /&gt;close:   131.98&#34;,&#34;date: 2013-05-26&lt;br /&gt;close:   133.48&#34;,&#34;date: 2013-05-27&lt;br /&gt;close:   129.74&#34;,&#34;date: 2013-05-28&lt;br /&gt;close:   129.00&#34;,&#34;date: 2013-05-29&lt;br /&gt;close:   132.30&#34;,&#34;date: 2013-05-30&lt;br /&gt;close:   128.80&#34;,&#34;date: 2013-05-31&lt;br /&gt;close:   129.00&#34;,&#34;date: 2013-06-01&lt;br /&gt;close:   129.30&#34;,&#34;date: 2013-06-02&lt;br /&gt;close:   122.29&#34;,&#34;date: 2013-06-03&lt;br /&gt;close:   122.22&#34;,&#34;date: 2013-06-04&lt;br /&gt;close:   121.42&#34;,&#34;date: 2013-06-05&lt;br /&gt;close:   121.65&#34;,&#34;date: 2013-06-06&lt;br /&gt;close:   118.00&#34;,&#34;date: 2013-06-07&lt;br /&gt;close:   111.50&#34;,&#34;date: 2013-06-08&lt;br /&gt;close:   108.30&#34;,&#34;date: 2013-06-09&lt;br /&gt;close:   100.00&#34;,&#34;date: 2013-06-10&lt;br /&gt;close:   106.35&#34;,&#34;date: 2013-06-11&lt;br /&gt;close:   108.90&#34;,&#34;date: 2013-06-12&lt;br /&gt;close:   108.15&#34;,&#34;date: 2013-06-13&lt;br /&gt;close:   104.00&#34;,&#34;date: 2013-06-14&lt;br /&gt;close:    99.98&#34;,&#34;date: 2013-06-15&lt;br /&gt;close:    99.99&#34;,&#34;date: 2013-06-16&lt;br /&gt;close:    99.51&#34;,&#34;date: 2013-06-17&lt;br /&gt;close:   101.70&#34;,&#34;date: 2013-06-18&lt;br /&gt;close:   107.40&#34;,&#34;date: 2013-06-19&lt;br /&gt;close:   108.25&#34;,&#34;date: 2013-06-20&lt;br /&gt;close:   110.15&#34;,&#34;date: 2013-06-21&lt;br /&gt;close:   109.50&#34;,&#34;date: 2013-06-22&lt;br /&gt;close:   108.30&#34;,&#34;date: 2013-06-23&lt;br /&gt;close:   107.60&#34;,&#34;date: 2013-06-24&lt;br /&gt;close:   102.74&#34;,&#34;date: 2013-06-25&lt;br /&gt;close:   103.95&#34;,&#34;date: 2013-06-26&lt;br /&gt;close:   104.00&#34;,&#34;date: 2013-06-27&lt;br /&gt;close:   101.44&#34;,&#34;date: 2013-06-28&lt;br /&gt;close:    94.65&#34;,&#34;date: 2013-06-29&lt;br /&gt;close:    94.99&#34;,&#34;date: 2013-06-30&lt;br /&gt;close:    96.61&#34;,&#34;date: 2013-07-01&lt;br /&gt;close:    88.05&#34;,&#34;date: 2013-07-02&lt;br /&gt;close:    90.13&#34;,&#34;date: 2013-07-03&lt;br /&gt;close:    77.53&#34;,&#34;date: 2013-07-04&lt;br /&gt;close:    80.53&#34;,&#34;date: 2013-07-05&lt;br /&gt;close:    68.43&#34;,&#34;date: 2013-07-06&lt;br /&gt;close:    70.28&#34;,&#34;date: 2013-07-07&lt;br /&gt;close:    74.56&#34;,&#34;date: 2013-07-08&lt;br /&gt;close:    76.52&#34;,&#34;date: 2013-07-09&lt;br /&gt;close:    76.69&#34;,&#34;date: 2013-07-10&lt;br /&gt;close:    86.76&#34;,&#34;date: 2013-07-11&lt;br /&gt;close:    88.98&#34;,&#34;date: 2013-07-12&lt;br /&gt;close:    93.59&#34;,&#34;date: 2013-07-13&lt;br /&gt;close:    98.13&#34;,&#34;date: 2013-07-14&lt;br /&gt;close:    94.69&#34;,&#34;date: 2013-07-15&lt;br /&gt;close:    98.40&#34;,&#34;date: 2013-07-16&lt;br /&gt;close:    97.45&#34;,&#34;date: 2013-07-17&lt;br /&gt;close:    98.50&#34;,&#34;date: 2013-07-18&lt;br /&gt;close:    90.58&#34;,&#34;date: 2013-07-19&lt;br /&gt;close:    92.17&#34;,&#34;date: 2013-07-20&lt;br /&gt;close:    89.39&#34;,&#34;date: 2013-07-21&lt;br /&gt;close:    90.76&#34;,&#34;date: 2013-07-22&lt;br /&gt;close:    91.61&#34;,&#34;date: 2013-07-23&lt;br /&gt;close:    95.56&#34;,&#34;date: 2013-07-24&lt;br /&gt;close:    94.51&#34;,&#34;date: 2013-07-25&lt;br /&gt;close:    96.90&#34;,&#34;date: 2013-07-26&lt;br /&gt;close:    96.02&#34;,&#34;date: 2013-07-27&lt;br /&gt;close:    94.12&#34;,&#34;date: 2013-07-28&lt;br /&gt;close:    99.76&#34;,&#34;date: 2013-07-29&lt;br /&gt;close:   101.20&#34;,&#34;date: 2013-07-30&lt;br /&gt;close:   107.99&#34;,&#34;date: 2013-07-31&lt;br /&gt;close:   106.09&#34;,&#34;date: 2013-08-01&lt;br /&gt;close:   104.00&#34;,&#34;date: 2013-08-02&lt;br /&gt;close:   104.50&#34;,&#34;date: 2013-08-03&lt;br /&gt;close:   104.00&#34;,&#34;date: 2013-08-04&lt;br /&gt;close:   105.14&#34;,&#34;date: 2013-08-05&lt;br /&gt;close:   106.22&#34;,&#34;date: 2013-08-06&lt;br /&gt;close:   106.75&#34;,&#34;date: 2013-08-07&lt;br /&gt;close:   106.75&#34;,&#34;date: 2013-08-08&lt;br /&gt;close:   103.00&#34;,&#34;date: 2013-08-09&lt;br /&gt;close:   102.80&#34;,&#34;date: 2013-08-10&lt;br /&gt;close:   103.00&#34;,&#34;date: 2013-08-11&lt;br /&gt;close:   105.00&#34;,&#34;date: 2013-08-12&lt;br /&gt;close:   106.64&#34;,&#34;date: 2013-08-13&lt;br /&gt;close:   109.00&#34;,&#34;date: 2013-08-14&lt;br /&gt;close:   112.56&#34;,&#34;date: 2013-08-15&lt;br /&gt;close:   109.99&#34;,&#34;date: 2013-08-16&lt;br /&gt;close:   108.99&#34;,&#34;date: 2013-08-17&lt;br /&gt;close:   113.50&#34;,&#34;date: 2013-08-18&lt;br /&gt;close:   113.50&#34;,&#34;date: 2013-08-19&lt;br /&gt;close:   119.00&#34;,&#34;date: 2013-08-20&lt;br /&gt;close:   121.21&#34;,&#34;date: 2013-08-21&lt;br /&gt;close:   123.30&#34;,&#34;date: 2013-08-22&lt;br /&gt;close:   121.15&#34;,&#34;date: 2013-08-23&lt;br /&gt;close:   118.50&#34;,&#34;date: 2013-08-24&lt;br /&gt;close:   120.04&#34;,&#34;date: 2013-08-25&lt;br /&gt;close:   122.11&#34;,&#34;date: 2013-08-26&lt;br /&gt;close:   120.06&#34;,&#34;date: 2013-08-27&lt;br /&gt;close:   126.50&#34;,&#34;date: 2013-08-28&lt;br /&gt;close:   122.62&#34;,&#34;date: 2013-08-29&lt;br /&gt;close:   122.39&#34;,&#34;date: 2013-08-30&lt;br /&gt;close:   133.49&#34;,&#34;date: 2013-08-31&lt;br /&gt;close:   135.35&#34;,&#34;date: 2013-09-01&lt;br /&gt;close:   138.34&#34;,&#34;date: 2013-09-02&lt;br /&gt;close:   135.85&#34;,&#34;date: 2013-09-03&lt;br /&gt;close:   136.77&#34;,&#34;date: 2013-09-04&lt;br /&gt;close:   126.74&#34;,&#34;date: 2013-09-05&lt;br /&gt;close:   126.43&#34;,&#34;date: 2013-09-06&lt;br /&gt;close:   119.15&#34;,&#34;date: 2013-09-07&lt;br /&gt;close:   124.15&#34;,&#34;date: 2013-09-08&lt;br /&gt;close:   121.66&#34;,&#34;date: 2013-09-09&lt;br /&gt;close:   127.11&#34;,&#34;date: 2013-09-10&lt;br /&gt;close:   125.91&#34;,&#34;date: 2013-09-11&lt;br /&gt;close:   135.25&#34;,&#34;date: 2013-09-12&lt;br /&gt;close:   133.13&#34;,&#34;date: 2013-09-13&lt;br /&gt;close:   134.98&#34;,&#34;date: 2013-09-14&lt;br /&gt;close:   129.22&#34;,&#34;date: 2013-09-15&lt;br /&gt;close:   130.37&#34;,&#34;date: 2013-09-16&lt;br /&gt;close:   131.72&#34;,&#34;date: 2013-09-17&lt;br /&gt;close:   131.66&#34;,&#34;date: 2013-09-18&lt;br /&gt;close:   131.47&#34;,&#34;date: 2013-09-19&lt;br /&gt;close:   129.65&#34;,&#34;date: 2013-09-20&lt;br /&gt;close:   127.04&#34;,&#34;date: 2013-09-21&lt;br /&gt;close:   127.43&#34;,&#34;date: 2013-09-22&lt;br /&gt;close:   129.12&#34;,&#34;date: 2013-09-23&lt;br /&gt;close:   125.95&#34;,&#34;date: 2013-09-24&lt;br /&gt;close:   127.25&#34;,&#34;date: 2013-09-25&lt;br /&gt;close:   128.22&#34;,&#34;date: 2013-09-26&lt;br /&gt;close:   128.38&#34;,&#34;date: 2013-09-27&lt;br /&gt;close:   133.78&#34;,&#34;date: 2013-09-28&lt;br /&gt;close:   134.78&#34;,&#34;date: 2013-09-29&lt;br /&gt;close:   137.34&#34;,&#34;date: 2013-09-30&lt;br /&gt;close:   133.00&#34;,&#34;date: 2013-10-01&lt;br /&gt;close:   132.18&#34;,&#34;date: 2013-10-02&lt;br /&gt;close:   114.13&#34;,&#34;date: 2013-10-03&lt;br /&gt;close:   123.63&#34;,&#34;date: 2013-10-04&lt;br /&gt;close:   129.01&#34;,&#34;date: 2013-10-05&lt;br /&gt;close:   128.55&#34;,&#34;date: 2013-10-06&lt;br /&gt;close:   129.00&#34;,&#34;date: 2013-10-07&lt;br /&gt;close:   126.94&#34;,&#34;date: 2013-10-08&lt;br /&gt;close:   126.00&#34;,&#34;date: 2013-10-09&lt;br /&gt;close:   130.69&#34;,&#34;date: 2013-10-10&lt;br /&gt;close:   130.59&#34;,&#34;date: 2013-10-11&lt;br /&gt;close:   130.90&#34;,&#34;date: 2013-10-12&lt;br /&gt;close:   135.19&#34;,&#34;date: 2013-10-13&lt;br /&gt;close:   138.13&#34;,&#34;date: 2013-10-14&lt;br /&gt;close:   140.52&#34;,&#34;date: 2013-10-15&lt;br /&gt;close:   145.24&#34;,&#34;date: 2013-10-16&lt;br /&gt;close:   142.55&#34;,&#34;date: 2013-10-17&lt;br /&gt;close:   146.25&#34;,&#34;date: 2013-10-18&lt;br /&gt;close:   155.96&#34;,&#34;date: 2013-10-19&lt;br /&gt;close:   172.42&#34;,&#34;date: 2013-10-20&lt;br /&gt;close:   174.61&#34;,&#34;date: 2013-10-21&lt;br /&gt;close:   182.21&#34;,&#34;date: 2013-10-22&lt;br /&gt;close:   193.76&#34;,&#34;date: 2013-10-23&lt;br /&gt;close:   213.62&#34;,&#34;date: 2013-10-24&lt;br /&gt;close:   198.23&#34;,&#34;date: 2013-10-25&lt;br /&gt;close:   186.69&#34;,&#34;date: 2013-10-26&lt;br /&gt;close:   177.32&#34;,&#34;date: 2013-10-27&lt;br /&gt;close:   196.44&#34;,&#34;date: 2013-10-28&lt;br /&gt;close:   198.55&#34;,&#34;date: 2013-10-29&lt;br /&gt;close:   204.39&#34;,&#34;date: 2013-10-30&lt;br /&gt;close:   199.97&#34;,&#34;date: 2013-10-31&lt;br /&gt;close:   204.00&#34;,&#34;date: 2013-11-01&lt;br /&gt;close:   206.18&#34;,&#34;date: 2013-11-02&lt;br /&gt;close:   206.22&#34;,&#34;date: 2013-11-03&lt;br /&gt;close:   215.05&#34;,&#34;date: 2013-11-04&lt;br /&gt;close:   229.10&#34;,&#34;date: 2013-11-05&lt;br /&gt;close:   245.24&#34;,&#34;date: 2013-11-06&lt;br /&gt;close:   262.50&#34;,&#34;date: 2013-11-07&lt;br /&gt;close:   296.41&#34;,&#34;date: 2013-11-08&lt;br /&gt;close:   338.11&#34;,&#34;date: 2013-11-09&lt;br /&gt;close:   339.11&#34;,&#34;date: 2013-11-10&lt;br /&gt;close:   326.62&#34;,&#34;date: 2013-11-11&lt;br /&gt;close:   342.44&#34;,&#34;date: 2013-11-12&lt;br /&gt;close:   360.33&#34;,&#34;date: 2013-11-13&lt;br /&gt;close:   407.37&#34;,&#34;date: 2013-11-14&lt;br /&gt;close:   420.20&#34;,&#34;date: 2013-11-15&lt;br /&gt;close:   417.95&#34;,&#34;date: 2013-11-16&lt;br /&gt;close:   440.22&#34;,&#34;date: 2013-11-17&lt;br /&gt;close:   492.11&#34;,&#34;date: 2013-11-18&lt;br /&gt;close:   703.56&#34;,&#34;date: 2013-11-19&lt;br /&gt;close:   584.61&#34;,&#34;date: 2013-11-20&lt;br /&gt;close:   590.83&#34;,&#34;date: 2013-11-21&lt;br /&gt;close:   722.43&#34;,&#34;date: 2013-11-22&lt;br /&gt;close:   771.44&#34;,&#34;date: 2013-11-23&lt;br /&gt;close:   797.82&#34;,&#34;date: 2013-11-24&lt;br /&gt;close:   774.25&#34;,&#34;date: 2013-11-25&lt;br /&gt;close:   799.11&#34;,&#34;date: 2013-11-26&lt;br /&gt;close:   928.10&#34;,&#34;date: 2013-11-27&lt;br /&gt;close:  1001.96&#34;,&#34;date: 2013-11-28&lt;br /&gt;close:  1031.95&#34;,&#34;date: 2013-11-29&lt;br /&gt;close:  1131.97&#34;,&#34;date: 2013-11-30&lt;br /&gt;close:  1129.43&#34;,&#34;date: 2013-12-01&lt;br /&gt;close:   955.85&#34;,&#34;date: 2013-12-02&lt;br /&gt;close:  1043.33&#34;,&#34;date: 2013-12-03&lt;br /&gt;close:  1078.28&#34;,&#34;date: 2013-12-04&lt;br /&gt;close:  1151.17&#34;,&#34;date: 2013-12-05&lt;br /&gt;close:  1045.11&#34;,&#34;date: 2013-12-06&lt;br /&gt;close:   829.45&#34;,&#34;date: 2013-12-07&lt;br /&gt;close:   698.23&#34;,&#34;date: 2013-12-08&lt;br /&gt;close:   795.87&#34;,&#34;date: 2013-12-09&lt;br /&gt;close:   893.19&#34;,&#34;date: 2013-12-10&lt;br /&gt;close:   988.51&#34;,&#34;date: 2013-12-11&lt;br /&gt;close:   878.48&#34;,&#34;date: 2013-12-12&lt;br /&gt;close:   873.26&#34;,&#34;date: 2013-12-13&lt;br /&gt;close:   892.58&#34;,&#34;date: 2013-12-14&lt;br /&gt;close:   872.60&#34;,&#34;date: 2013-12-15&lt;br /&gt;close:   876.12&#34;,&#34;date: 2013-12-16&lt;br /&gt;close:   705.97&#34;,&#34;date: 2013-12-17&lt;br /&gt;close:   682.12&#34;,&#34;date: 2013-12-18&lt;br /&gt;close:   522.70&#34;,&#34;date: 2013-12-19&lt;br /&gt;close:   691.96&#34;,&#34;date: 2013-12-20&lt;br /&gt;close:   625.32&#34;,&#34;date: 2013-12-21&lt;br /&gt;close:   605.66&#34;,&#34;date: 2013-12-22&lt;br /&gt;close:   617.18&#34;,&#34;date: 2013-12-23&lt;br /&gt;close:   673.41&#34;,&#34;date: 2013-12-24&lt;br /&gt;close:   665.58&#34;,&#34;date: 2013-12-25&lt;br /&gt;close:   682.21&#34;,&#34;date: 2013-12-26&lt;br /&gt;close:   761.98&#34;,&#34;date: 2013-12-27&lt;br /&gt;close:   735.07&#34;,&#34;date: 2013-12-28&lt;br /&gt;close:   727.83&#34;,&#34;date: 2013-12-29&lt;br /&gt;close:   745.05&#34;,&#34;date: 2013-12-30&lt;br /&gt;close:   756.13&#34;,&#34;date: 2013-12-31&lt;br /&gt;close:   754.01&#34;,&#34;date: 2014-01-01&lt;br /&gt;close:   771.40&#34;,&#34;date: 2014-01-02&lt;br /&gt;close:   802.39&#34;,&#34;date: 2014-01-03&lt;br /&gt;close:   818.72&#34;,&#34;date: 2014-01-04&lt;br /&gt;close:   859.51&#34;,&#34;date: 2014-01-05&lt;br /&gt;close:   933.53&#34;,&#34;date: 2014-01-06&lt;br /&gt;close:   953.29&#34;,&#34;date: 2014-01-07&lt;br /&gt;close:   802.00&#34;,&#34;date: 2014-01-08&lt;br /&gt;close:   842.72&#34;,&#34;date: 2014-01-09&lt;br /&gt;close:   846.86&#34;,&#34;date: 2014-01-10&lt;br /&gt;close:   868.48&#34;,&#34;date: 2014-01-11&lt;br /&gt;close:   913.95&#34;,&#34;date: 2014-01-12&lt;br /&gt;close:   863.22&#34;,&#34;date: 2014-01-13&lt;br /&gt;close:   841.20&#34;,&#34;date: 2014-01-14&lt;br /&gt;close:   833.27&#34;,&#34;date: 2014-01-15&lt;br /&gt;close:   860.90&#34;,&#34;date: 2014-01-16&lt;br /&gt;close:   835.63&#34;,&#34;date: 2014-01-17&lt;br /&gt;close:   814.64&#34;,&#34;date: 2014-01-18&lt;br /&gt;close:   840.00&#34;,&#34;date: 2014-01-19&lt;br /&gt;close:   870.96&#34;,&#34;date: 2014-01-20&lt;br /&gt;close:   870.20&#34;,&#34;date: 2014-01-21&lt;br /&gt;close:   863.91&#34;,&#34;date: 2014-01-22&lt;br /&gt;close:   845.59&#34;,&#34;date: 2014-01-23&lt;br /&gt;close:   822.04&#34;,&#34;date: 2014-01-24&lt;br /&gt;close:   797.07&#34;,&#34;date: 2014-01-25&lt;br /&gt;close:   853.61&#34;,&#34;date: 2014-01-26&lt;br /&gt;close:   885.28&#34;,&#34;date: 2014-01-27&lt;br /&gt;close:   771.39&#34;,&#34;date: 2014-01-28&lt;br /&gt;close:   812.51&#34;,&#34;date: 2014-01-29&lt;br /&gt;close:   826.00&#34;,&#34;date: 2014-01-30&lt;br /&gt;close:   819.03&#34;,&#34;date: 2014-01-31&lt;br /&gt;close:   829.92&#34;,&#34;date: 2014-02-01&lt;br /&gt;close:   832.58&#34;,&#34;date: 2014-02-02&lt;br /&gt;close:   825.37&#34;,&#34;date: 2014-02-03&lt;br /&gt;close:   823.83&#34;,&#34;date: 2014-02-04&lt;br /&gt;close:   827.96&#34;,&#34;date: 2014-02-05&lt;br /&gt;close:   811.91&#34;,&#34;date: 2014-02-06&lt;br /&gt;close:   781.55&#34;,&#34;date: 2014-02-07&lt;br /&gt;close:   712.40&#34;,&#34;date: 2014-02-08&lt;br /&gt;close:   673.92&#34;,&#34;date: 2014-02-09&lt;br /&gt;close:   682.90&#34;,&#34;date: 2014-02-10&lt;br /&gt;close:   681.03&#34;,&#34;date: 2014-02-11&lt;br /&gt;close:   672.17&#34;,&#34;date: 2014-02-12&lt;br /&gt;close:   651.72&#34;,&#34;date: 2014-02-13&lt;br /&gt;close:   605.24&#34;,&#34;date: 2014-02-14&lt;br /&gt;close:   661.99&#34;,&#34;date: 2014-02-15&lt;br /&gt;close:   650.92&#34;,&#34;date: 2014-02-16&lt;br /&gt;close:   616.63&#34;,&#34;date: 2014-02-17&lt;br /&gt;close:   626.27&#34;,&#34;date: 2014-02-18&lt;br /&gt;close:   626.60&#34;,&#34;date: 2014-02-19&lt;br /&gt;close:   623.03&#34;,&#34;date: 2014-02-20&lt;br /&gt;close:   556.14&#34;,&#34;date: 2014-02-21&lt;br /&gt;close:   574.16&#34;,&#34;date: 2014-02-22&lt;br /&gt;close:   605.42&#34;,&#34;date: 2014-02-23&lt;br /&gt;close:   605.82&#34;,&#34;date: 2014-02-24&lt;br /&gt;close:   546.32&#34;,&#34;date: 2014-02-25&lt;br /&gt;close:   538.71&#34;,&#34;date: 2014-02-26&lt;br /&gt;close:   582.69&#34;,&#34;date: 2014-02-27&lt;br /&gt;close:   578.77&#34;,&#34;date: 2014-02-28&lt;br /&gt;close:   549.26&#34;,&#34;date: 2014-03-01&lt;br /&gt;close:   565.61&#34;,&#34;date: 2014-03-02&lt;br /&gt;close:   559.79&#34;,&#34;date: 2014-03-03&lt;br /&gt;close:   667.76&#34;,&#34;date: 2014-03-04&lt;br /&gt;close:   666.78&#34;,&#34;date: 2014-03-05&lt;br /&gt;close:   665.51&#34;,&#34;date: 2014-03-06&lt;br /&gt;close:   663.86&#34;,&#34;date: 2014-03-07&lt;br /&gt;close:   629.15&#34;,&#34;date: 2014-03-08&lt;br /&gt;close:   617.45&#34;,&#34;date: 2014-03-09&lt;br /&gt;close:   636.96&#34;,&#34;date: 2014-03-10&lt;br /&gt;close:   627.79&#34;,&#34;date: 2014-03-11&lt;br /&gt;close:   634.11&#34;,&#34;date: 2014-03-12&lt;br /&gt;close:   632.10&#34;,&#34;date: 2014-03-13&lt;br /&gt;close:   638.14&#34;,&#34;date: 2014-03-14&lt;br /&gt;close:   628.80&#34;,&#34;date: 2014-03-15&lt;br /&gt;close:   636.12&#34;,&#34;date: 2014-03-16&lt;br /&gt;close:   631.11&#34;,&#34;date: 2014-03-17&lt;br /&gt;close:   622.37&#34;,&#34;date: 2014-03-18&lt;br /&gt;close:   614.83&#34;,&#34;date: 2014-03-19&lt;br /&gt;close:   609.89&#34;,&#34;date: 2014-03-20&lt;br /&gt;close:   588.77&#34;,&#34;date: 2014-03-21&lt;br /&gt;close:   571.49&#34;,&#34;date: 2014-03-22&lt;br /&gt;close:   565.04&#34;,&#34;date: 2014-03-23&lt;br /&gt;close:   561.27&#34;,&#34;date: 2014-03-24&lt;br /&gt;close:   583.41&#34;,&#34;date: 2014-03-25&lt;br /&gt;close:   583.92&#34;,&#34;date: 2014-03-26&lt;br /&gt;close:   580.83&#34;,&#34;date: 2014-03-27&lt;br /&gt;close:   471.24&#34;,&#34;date: 2014-03-28&lt;br /&gt;close:   495.67&#34;,&#34;date: 2014-03-29&lt;br /&gt;close:   491.17&#34;,&#34;date: 2014-03-30&lt;br /&gt;close:   460.27&#34;,&#34;date: 2014-03-31&lt;br /&gt;close:   457.00&#34;,&#34;date: 2014-04-01&lt;br /&gt;close:   478.38&#34;,&#34;date: 2014-04-02&lt;br /&gt;close:   437.14&#34;,&#34;date: 2014-04-03&lt;br /&gt;close:   444.72&#34;,&#34;date: 2014-04-04&lt;br /&gt;close:   447.53&#34;,&#34;date: 2014-04-05&lt;br /&gt;close:   461.91&#34;,&#34;date: 2014-04-06&lt;br /&gt;close:   460.50&#34;,&#34;date: 2014-04-07&lt;br /&gt;close:   449.42&#34;,&#34;date: 2014-04-08&lt;br /&gt;close:   453.09&#34;,&#34;date: 2014-04-09&lt;br /&gt;close:   442.73&#34;,&#34;date: 2014-04-10&lt;br /&gt;close:   365.18&#34;,&#34;date: 2014-04-11&lt;br /&gt;close:   420.95&#34;,&#34;date: 2014-04-12&lt;br /&gt;close:   421.12&#34;,&#34;date: 2014-04-13&lt;br /&gt;close:   414.06&#34;,&#34;date: 2014-04-14&lt;br /&gt;close:   458.79&#34;,&#34;date: 2014-04-15&lt;br /&gt;close:   515.59&#34;,&#34;date: 2014-04-16&lt;br /&gt;close:   527.40&#34;,&#34;date: 2014-04-17&lt;br /&gt;close:   495.96&#34;,&#34;date: 2014-04-18&lt;br /&gt;close:   479.64&#34;,&#34;date: 2014-04-19&lt;br /&gt;close:   501.57&#34;,&#34;date: 2014-04-20&lt;br /&gt;close:   498.17&#34;,&#34;date: 2014-04-21&lt;br /&gt;close:   495.77&#34;,&#34;date: 2014-04-22&lt;br /&gt;close:   487.92&#34;,&#34;date: 2014-04-23&lt;br /&gt;close:   491.30&#34;,&#34;date: 2014-04-24&lt;br /&gt;close:   500.46&#34;,&#34;date: 2014-04-25&lt;br /&gt;close:   461.45&#34;,&#34;date: 2014-04-26&lt;br /&gt;close:   458.60&#34;,&#34;date: 2014-04-27&lt;br /&gt;close:   436.39&#34;,&#34;date: 2014-04-28&lt;br /&gt;close:   440.29&#34;,&#34;date: 2014-04-29&lt;br /&gt;close:   447.21&#34;,&#34;date: 2014-04-30&lt;br /&gt;close:   447.64&#34;,&#34;date: 2014-05-01&lt;br /&gt;close:   457.76&#34;,&#34;date: 2014-05-02&lt;br /&gt;close:   449.38&#34;,&#34;date: 2014-05-03&lt;br /&gt;close:   437.76&#34;,&#34;date: 2014-05-04&lt;br /&gt;close:   436.40&#34;,&#34;date: 2014-05-05&lt;br /&gt;close:   433.48&#34;,&#34;date: 2014-05-06&lt;br /&gt;close:   428.96&#34;,&#34;date: 2014-05-07&lt;br /&gt;close:   438.82&#34;,&#34;date: 2014-05-08&lt;br /&gt;close:   440.17&#34;,&#34;date: 2014-05-09&lt;br /&gt;close:   449.46&#34;,&#34;date: 2014-05-10&lt;br /&gt;close:   454.43&#34;,&#34;date: 2014-05-11&lt;br /&gt;close:   438.89&#34;,&#34;date: 2014-05-12&lt;br /&gt;close:   441.46&#34;,&#34;date: 2014-05-13&lt;br /&gt;close:   440.67&#34;,&#34;date: 2014-05-14&lt;br /&gt;close:   443.97&#34;,&#34;date: 2014-05-15&lt;br /&gt;close:   447.25&#34;,&#34;date: 2014-05-16&lt;br /&gt;close:   448.06&#34;,&#34;date: 2014-05-17&lt;br /&gt;close:   448.90&#34;,&#34;date: 2014-05-18&lt;br /&gt;close:   446.26&#34;,&#34;date: 2014-05-19&lt;br /&gt;close:   446.18&#34;,&#34;date: 2014-05-20&lt;br /&gt;close:   485.72&#34;,&#34;date: 2014-05-21&lt;br /&gt;close:   491.77&#34;,&#34;date: 2014-05-22&lt;br /&gt;close:   524.58&#34;,&#34;date: 2014-05-23&lt;br /&gt;close:   520.22&#34;,&#34;date: 2014-05-24&lt;br /&gt;close:   525.14&#34;,&#34;date: 2014-05-25&lt;br /&gt;close:   571.59&#34;,&#34;date: 2014-05-26&lt;br /&gt;close:   583.42&#34;,&#34;date: 2014-05-27&lt;br /&gt;close:   571.24&#34;,&#34;date: 2014-05-28&lt;br /&gt;close:   577.06&#34;,&#34;date: 2014-05-29&lt;br /&gt;close:   568.18&#34;,&#34;date: 2014-05-30&lt;br /&gt;close:   615.33&#34;,&#34;date: 2014-05-31&lt;br /&gt;close:   623.68&#34;,&#34;date: 2014-06-01&lt;br /&gt;close:   630.23&#34;,&#34;date: 2014-06-02&lt;br /&gt;close:   660.62&#34;,&#34;date: 2014-06-03&lt;br /&gt;close:   667.60&#34;,&#34;date: 2014-06-04&lt;br /&gt;close:   641.61&#34;,&#34;date: 2014-06-05&lt;br /&gt;close:   659.26&#34;,&#34;date: 2014-06-06&lt;br /&gt;close:   653.70&#34;,&#34;date: 2014-06-07&lt;br /&gt;close:   654.97&#34;,&#34;date: 2014-06-08&lt;br /&gt;close:   656.14&#34;,&#34;date: 2014-06-09&lt;br /&gt;close:   649.16&#34;,&#34;date: 2014-06-10&lt;br /&gt;close:   653.15&#34;,&#34;date: 2014-06-11&lt;br /&gt;close:   633.02&#34;,&#34;date: 2014-06-12&lt;br /&gt;close:   586.95&#34;,&#34;date: 2014-06-13&lt;br /&gt;close:   600.16&#34;,&#34;date: 2014-06-14&lt;br /&gt;close:   577.36&#34;,&#34;date: 2014-06-15&lt;br /&gt;close:   592.94&#34;,&#34;date: 2014-06-16&lt;br /&gt;close:   592.19&#34;,&#34;date: 2014-06-17&lt;br /&gt;close:   610.86&#34;,&#34;date: 2014-06-18&lt;br /&gt;close:   607.96&#34;,&#34;date: 2014-06-19&lt;br /&gt;close:   598.07&#34;,&#34;date: 2014-06-20&lt;br /&gt;close:   594.15&#34;,&#34;date: 2014-06-21&lt;br /&gt;close:   594.99&#34;,&#34;date: 2014-06-22&lt;br /&gt;close:   602.27&#34;,&#34;date: 2014-06-23&lt;br /&gt;close:   593.98&#34;,&#34;date: 2014-06-24&lt;br /&gt;close:   582.36&#34;,&#34;date: 2014-06-25&lt;br /&gt;close:   566.34&#34;,&#34;date: 2014-06-26&lt;br /&gt;close:   581.14&#34;,&#34;date: 2014-06-27&lt;br /&gt;close:   597.26&#34;,&#34;date: 2014-06-28&lt;br /&gt;close:   596.55&#34;,&#34;date: 2014-06-29&lt;br /&gt;close:   602.72&#34;,&#34;date: 2014-06-30&lt;br /&gt;close:   639.80&#34;,&#34;date: 2014-07-01&lt;br /&gt;close:   640.81&#34;,&#34;date: 2014-07-02&lt;br /&gt;close:   650.88&#34;,&#34;date: 2014-07-03&lt;br /&gt;close:   645.16&#34;,&#34;date: 2014-07-04&lt;br /&gt;close:   630.69&#34;,&#34;date: 2014-07-05&lt;br /&gt;close:   631.46&#34;,&#34;date: 2014-07-06&lt;br /&gt;close:   635.81&#34;,&#34;date: 2014-07-07&lt;br /&gt;close:   624.09&#34;,&#34;date: 2014-07-08&lt;br /&gt;close:   624.82&#34;,&#34;date: 2014-07-09&lt;br /&gt;close:   624.51&#34;,&#34;date: 2014-07-10&lt;br /&gt;close:   616.76&#34;,&#34;date: 2014-07-11&lt;br /&gt;close:   632.00&#34;,&#34;date: 2014-07-12&lt;br /&gt;close:   633.71&#34;,&#34;date: 2014-07-13&lt;br /&gt;close:   626.50&#34;,&#34;date: 2014-07-14&lt;br /&gt;close:   619.32&#34;,&#34;date: 2014-07-15&lt;br /&gt;close:   621.59&#34;,&#34;date: 2014-07-16&lt;br /&gt;close:   616.80&#34;,&#34;date: 2014-07-17&lt;br /&gt;close:   623.09&#34;,&#34;date: 2014-07-18&lt;br /&gt;close:   628.78&#34;,&#34;date: 2014-07-19&lt;br /&gt;close:   628.52&#34;,&#34;date: 2014-07-20&lt;br /&gt;close:   623.90&#34;,&#34;date: 2014-07-21&lt;br /&gt;close:   622.21&#34;,&#34;date: 2014-07-22&lt;br /&gt;close:   621.55&#34;,&#34;date: 2014-07-23&lt;br /&gt;close:   619.41&#34;,&#34;date: 2014-07-24&lt;br /&gt;close:   601.73&#34;,&#34;date: 2014-07-25&lt;br /&gt;close:   601.09&#34;,&#34;date: 2014-07-26&lt;br /&gt;close:   595.81&#34;,&#34;date: 2014-07-27&lt;br /&gt;close:   593.85&#34;,&#34;date: 2014-07-28&lt;br /&gt;close:   585.69&#34;,&#34;date: 2014-07-29&lt;br /&gt;close:   584.72&#34;,&#34;date: 2014-07-30&lt;br /&gt;close:   567.29&#34;,&#34;date: 2014-07-31&lt;br /&gt;close:   586.23&#34;,&#34;date: 2014-08-01&lt;br /&gt;close:   594.92&#34;,&#34;date: 2014-08-02&lt;br /&gt;close:   589.33&#34;,&#34;date: 2014-08-03&lt;br /&gt;close:   586.67&#34;,&#34;date: 2014-08-04&lt;br /&gt;close:   588.78&#34;,&#34;date: 2014-08-05&lt;br /&gt;close:   585.44&#34;,&#34;date: 2014-08-06&lt;br /&gt;close:   584.65&#34;,&#34;date: 2014-08-07&lt;br /&gt;close:   588.87&#34;,&#34;date: 2014-08-08&lt;br /&gt;close:   592.58&#34;,&#34;date: 2014-08-09&lt;br /&gt;close:   589.37&#34;,&#34;date: 2014-08-10&lt;br /&gt;close:   591.06&#34;,&#34;date: 2014-08-11&lt;br /&gt;close:   576.37&#34;,&#34;date: 2014-08-12&lt;br /&gt;close:   569.64&#34;,&#34;date: 2014-08-13&lt;br /&gt;close:   546.66&#34;,&#34;date: 2014-08-14&lt;br /&gt;close:   505.97&#34;,&#34;date: 2014-08-15&lt;br /&gt;close:   497.01&#34;,&#34;date: 2014-08-16&lt;br /&gt;close:   519.71&#34;,&#34;date: 2014-08-17&lt;br /&gt;close:   491.80&#34;,&#34;date: 2014-08-18&lt;br /&gt;close:   461.46&#34;,&#34;date: 2014-08-19&lt;br /&gt;close:   485.24&#34;,&#34;date: 2014-08-20&lt;br /&gt;close:   511.98&#34;,&#34;date: 2014-08-21&lt;br /&gt;close:   517.24&#34;,&#34;date: 2014-08-22&lt;br /&gt;close:   514.04&#34;,&#34;date: 2014-08-23&lt;br /&gt;close:   498.08&#34;,&#34;date: 2014-08-24&lt;br /&gt;close:   508.29&#34;,&#34;date: 2014-08-25&lt;br /&gt;close:   502.50&#34;,&#34;date: 2014-08-26&lt;br /&gt;close:   511.57&#34;,&#34;date: 2014-08-27&lt;br /&gt;close:   511.15&#34;,&#34;date: 2014-08-28&lt;br /&gt;close:   507.82&#34;,&#34;date: 2014-08-29&lt;br /&gt;close:   508.52&#34;,&#34;date: 2014-08-30&lt;br /&gt;close:   504.25&#34;,&#34;date: 2014-08-31&lt;br /&gt;close:   477.76&#34;,&#34;date: 2014-09-01&lt;br /&gt;close:   474.88&#34;,&#34;date: 2014-09-02&lt;br /&gt;close:   477.43&#34;,&#34;date: 2014-09-03&lt;br /&gt;close:   477.59&#34;,&#34;date: 2014-09-04&lt;br /&gt;close:   489.66&#34;,&#34;date: 2014-09-05&lt;br /&gt;close:   483.34&#34;,&#34;date: 2014-09-06&lt;br /&gt;close:   484.83&#34;,&#34;date: 2014-09-07&lt;br /&gt;close:   482.28&#34;,&#34;date: 2014-09-08&lt;br /&gt;close:   474.60&#34;,&#34;date: 2014-09-09&lt;br /&gt;close:   475.26&#34;,&#34;date: 2014-09-10&lt;br /&gt;close:   479.36&#34;,&#34;date: 2014-09-11&lt;br /&gt;close:   479.75&#34;,&#34;date: 2014-09-12&lt;br /&gt;close:   477.75&#34;,&#34;date: 2014-09-13&lt;br /&gt;close:   479.00&#34;,&#34;date: 2014-09-14&lt;br /&gt;close:   477.89&#34;,&#34;date: 2014-09-15&lt;br /&gt;close:   475.37&#34;,&#34;date: 2014-09-16&lt;br /&gt;close:   466.06&#34;,&#34;date: 2014-09-17&lt;br /&gt;close:   457.33&#34;,&#34;date: 2014-09-18&lt;br /&gt;close:   424.44&#34;,&#34;date: 2014-09-19&lt;br /&gt;close:   394.80&#34;,&#34;date: 2014-09-20&lt;br /&gt;close:   408.90&#34;,&#34;date: 2014-09-21&lt;br /&gt;close:   398.82&#34;,&#34;date: 2014-09-22&lt;br /&gt;close:   402.15&#34;,&#34;date: 2014-09-23&lt;br /&gt;close:   435.79&#34;,&#34;date: 2014-09-24&lt;br /&gt;close:   423.20&#34;,&#34;date: 2014-09-25&lt;br /&gt;close:   411.57&#34;,&#34;date: 2014-09-26&lt;br /&gt;close:   404.42&#34;,&#34;date: 2014-09-27&lt;br /&gt;close:   399.52&#34;,&#34;date: 2014-09-28&lt;br /&gt;close:   377.18&#34;,&#34;date: 2014-09-29&lt;br /&gt;close:   375.47&#34;,&#34;date: 2014-09-30&lt;br /&gt;close:   386.94&#34;,&#34;date: 2014-10-01&lt;br /&gt;close:   383.61&#34;,&#34;date: 2014-10-02&lt;br /&gt;close:   375.07&#34;,&#34;date: 2014-10-03&lt;br /&gt;close:   359.51&#34;,&#34;date: 2014-10-04&lt;br /&gt;close:   328.87&#34;,&#34;date: 2014-10-05&lt;br /&gt;close:   320.51&#34;,&#34;date: 2014-10-06&lt;br /&gt;close:   330.08&#34;,&#34;date: 2014-10-07&lt;br /&gt;close:   336.19&#34;,&#34;date: 2014-10-08&lt;br /&gt;close:   352.94&#34;,&#34;date: 2014-10-09&lt;br /&gt;close:   365.03&#34;,&#34;date: 2014-10-10&lt;br /&gt;close:   361.56&#34;,&#34;date: 2014-10-11&lt;br /&gt;close:   362.30&#34;,&#34;date: 2014-10-12&lt;br /&gt;close:   378.55&#34;,&#34;date: 2014-10-13&lt;br /&gt;close:   390.41&#34;,&#34;date: 2014-10-14&lt;br /&gt;close:   400.87&#34;,&#34;date: 2014-10-15&lt;br /&gt;close:   394.77&#34;,&#34;date: 2014-10-16&lt;br /&gt;close:   382.56&#34;,&#34;date: 2014-10-17&lt;br /&gt;close:   383.76&#34;,&#34;date: 2014-10-18&lt;br /&gt;close:   391.44&#34;,&#34;date: 2014-10-19&lt;br /&gt;close:   389.55&#34;,&#34;date: 2014-10-20&lt;br /&gt;close:   382.85&#34;,&#34;date: 2014-10-21&lt;br /&gt;close:   386.48&#34;,&#34;date: 2014-10-22&lt;br /&gt;close:   383.16&#34;,&#34;date: 2014-10-23&lt;br /&gt;close:   358.42&#34;,&#34;date: 2014-10-24&lt;br /&gt;close:   358.35&#34;,&#34;date: 2014-10-25&lt;br /&gt;close:   347.27&#34;,&#34;date: 2014-10-26&lt;br /&gt;close:   354.70&#34;,&#34;date: 2014-10-27&lt;br /&gt;close:   352.99&#34;,&#34;date: 2014-10-28&lt;br /&gt;close:   357.62&#34;,&#34;date: 2014-10-29&lt;br /&gt;close:   335.59&#34;,&#34;date: 2014-10-30&lt;br /&gt;close:   345.30&#34;,&#34;date: 2014-10-31&lt;br /&gt;close:   338.32&#34;,&#34;date: 2014-11-01&lt;br /&gt;close:   325.75&#34;,&#34;date: 2014-11-02&lt;br /&gt;close:   325.89&#34;,&#34;date: 2014-11-03&lt;br /&gt;close:   327.55&#34;,&#34;date: 2014-11-04&lt;br /&gt;close:   330.49&#34;,&#34;date: 2014-11-05&lt;br /&gt;close:   339.49&#34;,&#34;date: 2014-11-06&lt;br /&gt;close:   349.29&#34;,&#34;date: 2014-11-07&lt;br /&gt;close:   342.42&#34;,&#34;date: 2014-11-08&lt;br /&gt;close:   345.49&#34;,&#34;date: 2014-11-09&lt;br /&gt;close:   363.26&#34;,&#34;date: 2014-11-10&lt;br /&gt;close:   366.92&#34;,&#34;date: 2014-11-11&lt;br /&gt;close:   367.70&#34;,&#34;date: 2014-11-12&lt;br /&gt;close:   423.56&#34;,&#34;date: 2014-11-13&lt;br /&gt;close:   420.73&#34;,&#34;date: 2014-11-14&lt;br /&gt;close:   397.82&#34;,&#34;date: 2014-11-15&lt;br /&gt;close:   376.13&#34;,&#34;date: 2014-11-16&lt;br /&gt;close:   387.88&#34;,&#34;date: 2014-11-17&lt;br /&gt;close:   387.41&#34;,&#34;date: 2014-11-18&lt;br /&gt;close:   375.20&#34;,&#34;date: 2014-11-19&lt;br /&gt;close:   380.55&#34;,&#34;date: 2014-11-20&lt;br /&gt;close:   357.84&#34;,&#34;date: 2014-11-21&lt;br /&gt;close:   350.85&#34;,&#34;date: 2014-11-22&lt;br /&gt;close:   352.92&#34;,&#34;date: 2014-11-23&lt;br /&gt;close:   367.57&#34;,&#34;date: 2014-11-24&lt;br /&gt;close:   376.90&#34;,&#34;date: 2014-11-25&lt;br /&gt;close:   375.35&#34;,&#34;date: 2014-11-26&lt;br /&gt;close:   368.37&#34;,&#34;date: 2014-11-27&lt;br /&gt;close:   369.67&#34;,&#34;date: 2014-11-28&lt;br /&gt;close:   376.45&#34;,&#34;date: 2014-11-29&lt;br /&gt;close:   375.49&#34;,&#34;date: 2014-11-30&lt;br /&gt;close:   378.05&#34;,&#34;date: 2014-12-01&lt;br /&gt;close:   379.24&#34;,&#34;date: 2014-12-02&lt;br /&gt;close:   381.32&#34;,&#34;date: 2014-12-03&lt;br /&gt;close:   375.01&#34;,&#34;date: 2014-12-04&lt;br /&gt;close:   369.60&#34;,&#34;date: 2014-12-05&lt;br /&gt;close:   376.85&#34;,&#34;date: 2014-12-06&lt;br /&gt;close:   374.79&#34;,&#34;date: 2014-12-07&lt;br /&gt;close:   375.10&#34;,&#34;date: 2014-12-08&lt;br /&gt;close:   361.91&#34;,&#34;date: 2014-12-09&lt;br /&gt;close:   352.22&#34;,&#34;date: 2014-12-10&lt;br /&gt;close:   346.36&#34;,&#34;date: 2014-12-11&lt;br /&gt;close:   350.51&#34;,&#34;date: 2014-12-12&lt;br /&gt;close:   352.54&#34;,&#34;date: 2014-12-13&lt;br /&gt;close:   347.38&#34;,&#34;date: 2014-12-14&lt;br /&gt;close:   351.63&#34;,&#34;date: 2014-12-15&lt;br /&gt;close:   345.35&#34;,&#34;date: 2014-12-16&lt;br /&gt;close:   327.06&#34;,&#34;date: 2014-12-17&lt;br /&gt;close:   319.78&#34;,&#34;date: 2014-12-18&lt;br /&gt;close:   311.40&#34;,&#34;date: 2014-12-19&lt;br /&gt;close:   317.84&#34;,&#34;date: 2014-12-20&lt;br /&gt;close:   329.96&#34;,&#34;date: 2014-12-21&lt;br /&gt;close:   320.84&#34;,&#34;date: 2014-12-22&lt;br /&gt;close:   331.89&#34;,&#34;date: 2014-12-23&lt;br /&gt;close:   334.57&#34;,&#34;date: 2014-12-24&lt;br /&gt;close:   322.53&#34;,&#34;date: 2014-12-25&lt;br /&gt;close:   319.01&#34;,&#34;date: 2014-12-26&lt;br /&gt;close:   327.92&#34;,&#34;date: 2014-12-27&lt;br /&gt;close:   315.86&#34;,&#34;date: 2014-12-28&lt;br /&gt;close:   317.24&#34;,&#34;date: 2014-12-29&lt;br /&gt;close:   312.67&#34;,&#34;date: 2014-12-30&lt;br /&gt;close:   310.74&#34;,&#34;date: 2014-12-31&lt;br /&gt;close:   320.19&#34;,&#34;date: 2015-01-01&lt;br /&gt;close:   314.25&#34;,&#34;date: 2015-01-02&lt;br /&gt;close:   315.03&#34;,&#34;date: 2015-01-03&lt;br /&gt;close:   281.08&#34;,&#34;date: 2015-01-04&lt;br /&gt;close:   264.20&#34;,&#34;date: 2015-01-05&lt;br /&gt;close:   274.47&#34;,&#34;date: 2015-01-06&lt;br /&gt;close:   286.19&#34;,&#34;date: 2015-01-07&lt;br /&gt;close:   294.34&#34;,&#34;date: 2015-01-08&lt;br /&gt;close:   283.35&#34;,&#34;date: 2015-01-09&lt;br /&gt;close:   290.41&#34;,&#34;date: 2015-01-10&lt;br /&gt;close:   274.80&#34;,&#34;date: 2015-01-11&lt;br /&gt;close:   265.66&#34;,&#34;date: 2015-01-12&lt;br /&gt;close:   267.80&#34;,&#34;date: 2015-01-13&lt;br /&gt;close:   225.86&#34;,&#34;date: 2015-01-14&lt;br /&gt;close:   178.10&#34;,&#34;date: 2015-01-15&lt;br /&gt;close:   209.84&#34;,&#34;date: 2015-01-16&lt;br /&gt;close:   208.10&#34;,&#34;date: 2015-01-17&lt;br /&gt;close:   199.26&#34;,&#34;date: 2015-01-18&lt;br /&gt;close:   210.34&#34;,&#34;date: 2015-01-19&lt;br /&gt;close:   214.86&#34;,&#34;date: 2015-01-20&lt;br /&gt;close:   211.32&#34;,&#34;date: 2015-01-21&lt;br /&gt;close:   226.90&#34;,&#34;date: 2015-01-22&lt;br /&gt;close:   233.41&#34;,&#34;date: 2015-01-23&lt;br /&gt;close:   232.88&#34;,&#34;date: 2015-01-24&lt;br /&gt;close:   247.85&#34;,&#34;date: 2015-01-25&lt;br /&gt;close:   253.72&#34;,&#34;date: 2015-01-26&lt;br /&gt;close:   273.47&#34;,&#34;date: 2015-01-27&lt;br /&gt;close:   263.48&#34;,&#34;date: 2015-01-28&lt;br /&gt;close:   233.91&#34;,&#34;date: 2015-01-29&lt;br /&gt;close:   233.51&#34;,&#34;date: 2015-01-30&lt;br /&gt;close:   226.43&#34;,&#34;date: 2015-01-31&lt;br /&gt;close:   217.46&#34;,&#34;date: 2015-02-01&lt;br /&gt;close:   226.97&#34;,&#34;date: 2015-02-02&lt;br /&gt;close:   238.23&#34;,&#34;date: 2015-02-03&lt;br /&gt;close:   227.27&#34;,&#34;date: 2015-02-04&lt;br /&gt;close:   226.85&#34;,&#34;date: 2015-02-05&lt;br /&gt;close:   217.11&#34;,&#34;date: 2015-02-06&lt;br /&gt;close:   222.27&#34;,&#34;date: 2015-02-07&lt;br /&gt;close:   227.75&#34;,&#34;date: 2015-02-08&lt;br /&gt;close:   223.41&#34;,&#34;date: 2015-02-09&lt;br /&gt;close:   220.11&#34;,&#34;date: 2015-02-10&lt;br /&gt;close:   219.84&#34;,&#34;date: 2015-02-11&lt;br /&gt;close:   219.18&#34;,&#34;date: 2015-02-12&lt;br /&gt;close:   221.76&#34;,&#34;date: 2015-02-13&lt;br /&gt;close:   235.43&#34;,&#34;date: 2015-02-14&lt;br /&gt;close:   257.32&#34;,&#34;date: 2015-02-15&lt;br /&gt;close:   234.82&#34;,&#34;date: 2015-02-16&lt;br /&gt;close:   233.84&#34;,&#34;date: 2015-02-17&lt;br /&gt;close:   243.61&#34;,&#34;date: 2015-02-18&lt;br /&gt;close:   236.33&#34;,&#34;date: 2015-02-19&lt;br /&gt;close:   240.28&#34;,&#34;date: 2015-02-20&lt;br /&gt;close:   243.78&#34;,&#34;date: 2015-02-21&lt;br /&gt;close:   244.53&#34;,&#34;date: 2015-02-22&lt;br /&gt;close:   235.98&#34;,&#34;date: 2015-02-23&lt;br /&gt;close:   238.89&#34;,&#34;date: 2015-02-24&lt;br /&gt;close:   238.74&#34;,&#34;date: 2015-02-25&lt;br /&gt;close:   237.47&#34;,&#34;date: 2015-02-26&lt;br /&gt;close:   236.43&#34;,&#34;date: 2015-02-27&lt;br /&gt;close:   253.83&#34;,&#34;date: 2015-02-28&lt;br /&gt;close:   254.26&#34;,&#34;date: 2015-03-01&lt;br /&gt;close:   260.20&#34;,&#34;date: 2015-03-02&lt;br /&gt;close:   275.67&#34;,&#34;date: 2015-03-03&lt;br /&gt;close:   281.70&#34;,&#34;date: 2015-03-04&lt;br /&gt;close:   273.09&#34;,&#34;date: 2015-03-05&lt;br /&gt;close:   276.18&#34;,&#34;date: 2015-03-06&lt;br /&gt;close:   272.72&#34;,&#34;date: 2015-03-07&lt;br /&gt;close:   276.26&#34;,&#34;date: 2015-03-08&lt;br /&gt;close:   274.35&#34;,&#34;date: 2015-03-09&lt;br /&gt;close:   289.61&#34;,&#34;date: 2015-03-10&lt;br /&gt;close:   291.76&#34;,&#34;date: 2015-03-11&lt;br /&gt;close:   296.38&#34;,&#34;date: 2015-03-12&lt;br /&gt;close:   294.35&#34;,&#34;date: 2015-03-13&lt;br /&gt;close:   285.34&#34;,&#34;date: 2015-03-14&lt;br /&gt;close:   281.89&#34;,&#34;date: 2015-03-15&lt;br /&gt;close:   286.39&#34;,&#34;date: 2015-03-16&lt;br /&gt;close:   290.59&#34;,&#34;date: 2015-03-17&lt;br /&gt;close:   285.51&#34;,&#34;date: 2015-03-18&lt;br /&gt;close:   256.30&#34;,&#34;date: 2015-03-19&lt;br /&gt;close:   260.93&#34;,&#34;date: 2015-03-20&lt;br /&gt;close:   261.75&#34;,&#34;date: 2015-03-21&lt;br /&gt;close:   260.02&#34;,&#34;date: 2015-03-22&lt;br /&gt;close:   267.96&#34;,&#34;date: 2015-03-23&lt;br /&gt;close:   266.74&#34;,&#34;date: 2015-03-24&lt;br /&gt;close:   245.60&#34;,&#34;date: 2015-03-25&lt;br /&gt;close:   246.20&#34;,&#34;date: 2015-03-26&lt;br /&gt;close:   248.53&#34;,&#34;date: 2015-03-27&lt;br /&gt;close:   247.03&#34;,&#34;date: 2015-03-28&lt;br /&gt;close:   252.80&#34;,&#34;date: 2015-03-29&lt;br /&gt;close:   242.71&#34;,&#34;date: 2015-03-30&lt;br /&gt;close:   247.53&#34;,&#34;date: 2015-03-31&lt;br /&gt;close:   244.22&#34;,&#34;date: 2015-04-01&lt;br /&gt;close:   247.27&#34;,&#34;date: 2015-04-02&lt;br /&gt;close:   253.01&#34;,&#34;date: 2015-04-03&lt;br /&gt;close:   254.32&#34;,&#34;date: 2015-04-04&lt;br /&gt;close:   253.70&#34;,&#34;date: 2015-04-05&lt;br /&gt;close:   260.60&#34;,&#34;date: 2015-04-06&lt;br /&gt;close:   255.49&#34;,&#34;date: 2015-04-07&lt;br /&gt;close:   253.18&#34;,&#34;date: 2015-04-08&lt;br /&gt;close:   245.02&#34;,&#34;date: 2015-04-09&lt;br /&gt;close:   243.68&#34;,&#34;date: 2015-04-10&lt;br /&gt;close:   236.07&#34;,&#34;date: 2015-04-11&lt;br /&gt;close:   236.55&#34;,&#34;date: 2015-04-12&lt;br /&gt;close:   236.15&#34;,&#34;date: 2015-04-13&lt;br /&gt;close:   224.59&#34;,&#34;date: 2015-04-14&lt;br /&gt;close:   219.16&#34;,&#34;date: 2015-04-15&lt;br /&gt;close:   223.83&#34;,&#34;date: 2015-04-16&lt;br /&gt;close:   228.57&#34;,&#34;date: 2015-04-17&lt;br /&gt;close:   222.88&#34;,&#34;date: 2015-04-18&lt;br /&gt;close:   223.36&#34;,&#34;date: 2015-04-19&lt;br /&gt;close:   222.60&#34;,&#34;date: 2015-04-20&lt;br /&gt;close:   224.63&#34;,&#34;date: 2015-04-21&lt;br /&gt;close:   235.27&#34;,&#34;date: 2015-04-22&lt;br /&gt;close:   234.18&#34;,&#34;date: 2015-04-23&lt;br /&gt;close:   236.46&#34;,&#34;date: 2015-04-24&lt;br /&gt;close:   231.27&#34;,&#34;date: 2015-04-25&lt;br /&gt;close:   226.39&#34;,&#34;date: 2015-04-26&lt;br /&gt;close:   219.43&#34;,&#34;date: 2015-04-27&lt;br /&gt;close:   229.29&#34;,&#34;date: 2015-04-28&lt;br /&gt;close:   225.85&#34;,&#34;date: 2015-04-29&lt;br /&gt;close:   225.81&#34;,&#34;date: 2015-04-30&lt;br /&gt;close:   236.15&#34;,&#34;date: 2015-05-01&lt;br /&gt;close:   232.08&#34;,&#34;date: 2015-05-02&lt;br /&gt;close:   234.93&#34;,&#34;date: 2015-05-03&lt;br /&gt;close:   240.36&#34;,&#34;date: 2015-05-04&lt;br /&gt;close:   239.02&#34;,&#34;date: 2015-05-05&lt;br /&gt;close:   236.12&#34;,&#34;date: 2015-05-06&lt;br /&gt;close:   229.78&#34;,&#34;date: 2015-05-07&lt;br /&gt;close:   237.33&#34;,&#34;date: 2015-05-08&lt;br /&gt;close:   243.86&#34;,&#34;date: 2015-05-09&lt;br /&gt;close:   241.83&#34;,&#34;date: 2015-05-10&lt;br /&gt;close:   240.30&#34;,&#34;date: 2015-05-11&lt;br /&gt;close:   242.16&#34;,&#34;date: 2015-05-12&lt;br /&gt;close:   241.11&#34;,&#34;date: 2015-05-13&lt;br /&gt;close:   236.38&#34;,&#34;date: 2015-05-14&lt;br /&gt;close:   236.93&#34;,&#34;date: 2015-05-15&lt;br /&gt;close:   237.60&#34;,&#34;date: 2015-05-16&lt;br /&gt;close:   236.15&#34;,&#34;date: 2015-05-17&lt;br /&gt;close:   236.80&#34;,&#34;date: 2015-05-18&lt;br /&gt;close:   233.13&#34;,&#34;date: 2015-05-19&lt;br /&gt;close:   231.95&#34;,&#34;date: 2015-05-20&lt;br /&gt;close:   234.02&#34;,&#34;date: 2015-05-21&lt;br /&gt;close:   235.34&#34;,&#34;date: 2015-05-22&lt;br /&gt;close:   240.35&#34;,&#34;date: 2015-05-23&lt;br /&gt;close:   238.87&#34;,&#34;date: 2015-05-24&lt;br /&gt;close:   240.95&#34;,&#34;date: 2015-05-25&lt;br /&gt;close:   237.11&#34;,&#34;date: 2015-05-26&lt;br /&gt;close:   237.12&#34;,&#34;date: 2015-05-27&lt;br /&gt;close:   237.28&#34;,&#34;date: 2015-05-28&lt;br /&gt;close:   237.41&#34;,&#34;date: 2015-05-29&lt;br /&gt;close:   237.10&#34;,&#34;date: 2015-05-30&lt;br /&gt;close:   233.35&#34;,&#34;date: 2015-05-31&lt;br /&gt;close:   230.19&#34;,&#34;date: 2015-06-01&lt;br /&gt;close:   222.93&#34;,&#34;date: 2015-06-02&lt;br /&gt;close:   225.80&#34;,&#34;date: 2015-06-03&lt;br /&gt;close:   225.87&#34;,&#34;date: 2015-06-04&lt;br /&gt;close:   224.32&#34;,&#34;date: 2015-06-05&lt;br /&gt;close:   224.95&#34;,&#34;date: 2015-06-06&lt;br /&gt;close:   225.62&#34;,&#34;date: 2015-06-07&lt;br /&gt;close:   222.88&#34;,&#34;date: 2015-06-08&lt;br /&gt;close:   228.49&#34;,&#34;date: 2015-06-09&lt;br /&gt;close:   229.05&#34;,&#34;date: 2015-06-10&lt;br /&gt;close:   228.80&#34;,&#34;date: 2015-06-11&lt;br /&gt;close:   229.71&#34;,&#34;date: 2015-06-12&lt;br /&gt;close:   229.98&#34;,&#34;date: 2015-06-13&lt;br /&gt;close:   232.40&#34;,&#34;date: 2015-06-14&lt;br /&gt;close:   233.54&#34;,&#34;date: 2015-06-15&lt;br /&gt;close:   236.82&#34;,&#34;date: 2015-06-16&lt;br /&gt;close:   250.90&#34;,&#34;date: 2015-06-17&lt;br /&gt;close:   249.28&#34;,&#34;date: 2015-06-18&lt;br /&gt;close:   249.01&#34;,&#34;date: 2015-06-19&lt;br /&gt;close:   244.61&#34;,&#34;date: 2015-06-20&lt;br /&gt;close:   245.21&#34;,&#34;date: 2015-06-21&lt;br /&gt;close:   243.94&#34;,&#34;date: 2015-06-22&lt;br /&gt;close:   246.99&#34;,&#34;date: 2015-06-23&lt;br /&gt;close:   244.30&#34;,&#34;date: 2015-06-24&lt;br /&gt;close:   240.51&#34;,&#34;date: 2015-06-25&lt;br /&gt;close:   242.80&#34;,&#34;date: 2015-06-26&lt;br /&gt;close:   243.59&#34;,&#34;date: 2015-06-27&lt;br /&gt;close:   250.99&#34;,&#34;date: 2015-06-28&lt;br /&gt;close:   249.01&#34;,&#34;date: 2015-06-29&lt;br /&gt;close:   257.06&#34;,&#34;date: 2015-06-30&lt;br /&gt;close:   263.07&#34;,&#34;date: 2015-07-01&lt;br /&gt;close:   258.62&#34;,&#34;date: 2015-07-02&lt;br /&gt;close:   255.41&#34;,&#34;date: 2015-07-03&lt;br /&gt;close:   256.34&#34;,&#34;date: 2015-07-04&lt;br /&gt;close:   260.89&#34;,&#34;date: 2015-07-05&lt;br /&gt;close:   271.91&#34;,&#34;date: 2015-07-06&lt;br /&gt;close:   269.03&#34;,&#34;date: 2015-07-07&lt;br /&gt;close:   266.21&#34;,&#34;date: 2015-07-08&lt;br /&gt;close:   270.79&#34;,&#34;date: 2015-07-09&lt;br /&gt;close:   269.23&#34;,&#34;date: 2015-07-10&lt;br /&gt;close:   284.89&#34;,&#34;date: 2015-07-11&lt;br /&gt;close:   293.11&#34;,&#34;date: 2015-07-12&lt;br /&gt;close:   310.87&#34;,&#34;date: 2015-07-13&lt;br /&gt;close:   292.05&#34;,&#34;date: 2015-07-14&lt;br /&gt;close:   287.46&#34;,&#34;date: 2015-07-15&lt;br /&gt;close:   285.83&#34;,&#34;date: 2015-07-16&lt;br /&gt;close:   278.09&#34;,&#34;date: 2015-07-17&lt;br /&gt;close:   279.47&#34;,&#34;date: 2015-07-18&lt;br /&gt;close:   274.90&#34;,&#34;date: 2015-07-19&lt;br /&gt;close:   273.61&#34;,&#34;date: 2015-07-20&lt;br /&gt;close:   278.98&#34;,&#34;date: 2015-07-21&lt;br /&gt;close:   275.83&#34;,&#34;date: 2015-07-22&lt;br /&gt;close:   277.22&#34;,&#34;date: 2015-07-23&lt;br /&gt;close:   276.05&#34;,&#34;date: 2015-07-24&lt;br /&gt;close:   288.28&#34;,&#34;date: 2015-07-25&lt;br /&gt;close:   288.70&#34;,&#34;date: 2015-07-26&lt;br /&gt;close:   292.69&#34;,&#34;date: 2015-07-27&lt;br /&gt;close:   293.62&#34;,&#34;date: 2015-07-28&lt;br /&gt;close:   294.43&#34;,&#34;date: 2015-07-29&lt;br /&gt;close:   289.59&#34;,&#34;date: 2015-07-30&lt;br /&gt;close:   287.72&#34;,&#34;date: 2015-07-31&lt;br /&gt;close:   284.65&#34;,&#34;date: 2015-08-01&lt;br /&gt;close:   281.60&#34;,&#34;date: 2015-08-02&lt;br /&gt;close:   282.61&#34;,&#34;date: 2015-08-03&lt;br /&gt;close:   281.23&#34;,&#34;date: 2015-08-04&lt;br /&gt;close:   285.22&#34;,&#34;date: 2015-08-05&lt;br /&gt;close:   281.88&#34;,&#34;date: 2015-08-06&lt;br /&gt;close:   278.58&#34;,&#34;date: 2015-08-07&lt;br /&gt;close:   279.58&#34;,&#34;date: 2015-08-08&lt;br /&gt;close:   261.00&#34;,&#34;date: 2015-08-09&lt;br /&gt;close:   265.08&#34;,&#34;date: 2015-08-10&lt;br /&gt;close:   264.47&#34;,&#34;date: 2015-08-11&lt;br /&gt;close:   270.39&#34;,&#34;date: 2015-08-12&lt;br /&gt;close:   266.38&#34;,&#34;date: 2015-08-13&lt;br /&gt;close:   264.08&#34;,&#34;date: 2015-08-14&lt;br /&gt;close:   265.68&#34;,&#34;date: 2015-08-15&lt;br /&gt;close:   261.55&#34;,&#34;date: 2015-08-16&lt;br /&gt;close:   258.51&#34;,&#34;date: 2015-08-17&lt;br /&gt;close:   257.98&#34;,&#34;date: 2015-08-18&lt;br /&gt;close:   211.08&#34;,&#34;date: 2015-08-19&lt;br /&gt;close:   226.68&#34;,&#34;date: 2015-08-20&lt;br /&gt;close:   235.35&#34;,&#34;date: 2015-08-21&lt;br /&gt;close:   232.57&#34;,&#34;date: 2015-08-22&lt;br /&gt;close:   230.39&#34;,&#34;date: 2015-08-23&lt;br /&gt;close:   228.17&#34;,&#34;date: 2015-08-24&lt;br /&gt;close:   210.49&#34;,&#34;date: 2015-08-25&lt;br /&gt;close:   221.61&#34;,&#34;date: 2015-08-26&lt;br /&gt;close:   225.83&#34;,&#34;date: 2015-08-27&lt;br /&gt;close:   224.77&#34;,&#34;date: 2015-08-28&lt;br /&gt;close:   231.40&#34;,&#34;date: 2015-08-29&lt;br /&gt;close:   229.78&#34;,&#34;date: 2015-08-30&lt;br /&gt;close:   228.76&#34;,&#34;date: 2015-08-31&lt;br /&gt;close:   230.06&#34;,&#34;date: 2015-09-01&lt;br /&gt;close:   228.12&#34;,&#34;date: 2015-09-02&lt;br /&gt;close:   229.28&#34;,&#34;date: 2015-09-03&lt;br /&gt;close:   227.18&#34;,&#34;date: 2015-09-04&lt;br /&gt;close:   230.30&#34;,&#34;date: 2015-09-05&lt;br /&gt;close:   235.02&#34;,&#34;date: 2015-09-06&lt;br /&gt;close:   239.84&#34;,&#34;date: 2015-09-07&lt;br /&gt;close:   239.85&#34;,&#34;date: 2015-09-08&lt;br /&gt;close:   243.61&#34;,&#34;date: 2015-09-09&lt;br /&gt;close:   238.17&#34;,&#34;date: 2015-09-10&lt;br /&gt;close:   238.48&#34;,&#34;date: 2015-09-11&lt;br /&gt;close:   240.11&#34;,&#34;date: 2015-09-12&lt;br /&gt;close:   235.23&#34;,&#34;date: 2015-09-13&lt;br /&gt;close:   230.51&#34;,&#34;date: 2015-09-14&lt;br /&gt;close:   230.64&#34;,&#34;date: 2015-09-15&lt;br /&gt;close:   230.30&#34;,&#34;date: 2015-09-16&lt;br /&gt;close:   229.09&#34;,&#34;date: 2015-09-17&lt;br /&gt;close:   229.81&#34;,&#34;date: 2015-09-18&lt;br /&gt;close:   232.98&#34;,&#34;date: 2015-09-19&lt;br /&gt;close:   231.49&#34;,&#34;date: 2015-09-20&lt;br /&gt;close:   231.21&#34;,&#34;date: 2015-09-21&lt;br /&gt;close:   227.09&#34;,&#34;date: 2015-09-22&lt;br /&gt;close:   230.62&#34;,&#34;date: 2015-09-23&lt;br /&gt;close:   230.28&#34;,&#34;date: 2015-09-24&lt;br /&gt;close:   234.53&#34;,&#34;date: 2015-09-25&lt;br /&gt;close:   235.14&#34;,&#34;date: 2015-09-26&lt;br /&gt;close:   234.34&#34;,&#34;date: 2015-09-27&lt;br /&gt;close:   232.76&#34;,&#34;date: 2015-09-28&lt;br /&gt;close:   239.14&#34;,&#34;date: 2015-09-29&lt;br /&gt;close:   236.69&#34;,&#34;date: 2015-09-30&lt;br /&gt;close:   236.06&#34;,&#34;date: 2015-10-01&lt;br /&gt;close:   237.55&#34;,&#34;date: 2015-10-02&lt;br /&gt;close:   237.29&#34;,&#34;date: 2015-10-03&lt;br /&gt;close:   238.73&#34;,&#34;date: 2015-10-04&lt;br /&gt;close:   238.26&#34;,&#34;date: 2015-10-05&lt;br /&gt;close:   240.38&#34;,&#34;date: 2015-10-06&lt;br /&gt;close:   246.06&#34;,&#34;date: 2015-10-07&lt;br /&gt;close:   242.97&#34;,&#34;date: 2015-10-08&lt;br /&gt;close:   242.30&#34;,&#34;date: 2015-10-09&lt;br /&gt;close:   243.93&#34;,&#34;date: 2015-10-10&lt;br /&gt;close:   244.94&#34;,&#34;date: 2015-10-11&lt;br /&gt;close:   247.05&#34;,&#34;date: 2015-10-12&lt;br /&gt;close:   245.31&#34;,&#34;date: 2015-10-13&lt;br /&gt;close:   249.51&#34;,&#34;date: 2015-10-14&lt;br /&gt;close:   251.99&#34;,&#34;date: 2015-10-15&lt;br /&gt;close:   254.32&#34;,&#34;date: 2015-10-16&lt;br /&gt;close:   262.87&#34;,&#34;date: 2015-10-17&lt;br /&gt;close:   270.64&#34;,&#34;date: 2015-10-18&lt;br /&gt;close:   261.64&#34;,&#34;date: 2015-10-19&lt;br /&gt;close:   263.44&#34;,&#34;date: 2015-10-20&lt;br /&gt;close:   269.46&#34;,&#34;date: 2015-10-21&lt;br /&gt;close:   266.27&#34;,&#34;date: 2015-10-22&lt;br /&gt;close:   274.02&#34;,&#34;date: 2015-10-23&lt;br /&gt;close:   276.50&#34;,&#34;date: 2015-10-24&lt;br /&gt;close:   281.65&#34;,&#34;date: 2015-10-25&lt;br /&gt;close:   283.68&#34;,&#34;date: 2015-10-26&lt;br /&gt;close:   285.30&#34;,&#34;date: 2015-10-27&lt;br /&gt;close:   293.79&#34;,&#34;date: 2015-10-28&lt;br /&gt;close:   304.62&#34;,&#34;date: 2015-10-29&lt;br /&gt;close:   313.86&#34;,&#34;date: 2015-10-30&lt;br /&gt;close:   328.02&#34;,&#34;date: 2015-10-31&lt;br /&gt;close:   314.17&#34;,&#34;date: 2015-11-01&lt;br /&gt;close:   325.43&#34;,&#34;date: 2015-11-02&lt;br /&gt;close:   361.19&#34;,&#34;date: 2015-11-03&lt;br /&gt;close:   403.42&#34;,&#34;date: 2015-11-04&lt;br /&gt;close:   411.56&#34;,&#34;date: 2015-11-05&lt;br /&gt;close:   386.35&#34;,&#34;date: 2015-11-06&lt;br /&gt;close:   374.47&#34;,&#34;date: 2015-11-07&lt;br /&gt;close:   386.48&#34;,&#34;date: 2015-11-08&lt;br /&gt;close:   373.37&#34;,&#34;date: 2015-11-09&lt;br /&gt;close:   380.26&#34;,&#34;date: 2015-11-10&lt;br /&gt;close:   336.82&#34;,&#34;date: 2015-11-11&lt;br /&gt;close:   311.08&#34;,&#34;date: 2015-11-12&lt;br /&gt;close:   338.15&#34;,&#34;date: 2015-11-13&lt;br /&gt;close:   336.75&#34;,&#34;date: 2015-11-14&lt;br /&gt;close:   332.91&#34;,&#34;date: 2015-11-15&lt;br /&gt;close:   320.17&#34;,&#34;date: 2015-11-16&lt;br /&gt;close:   330.75&#34;,&#34;date: 2015-11-17&lt;br /&gt;close:   335.09&#34;,&#34;date: 2015-11-18&lt;br /&gt;close:   334.59&#34;,&#34;date: 2015-11-19&lt;br /&gt;close:   326.15&#34;,&#34;date: 2015-11-20&lt;br /&gt;close:   322.02&#34;,&#34;date: 2015-11-21&lt;br /&gt;close:   326.93&#34;,&#34;date: 2015-11-22&lt;br /&gt;close:   324.54&#34;,&#34;date: 2015-11-23&lt;br /&gt;close:   323.05&#34;,&#34;date: 2015-11-24&lt;br /&gt;close:   320.05&#34;,&#34;date: 2015-11-25&lt;br /&gt;close:   328.21&#34;,&#34;date: 2015-11-26&lt;br /&gt;close:   352.68&#34;,&#34;date: 2015-11-27&lt;br /&gt;close:   358.04&#34;,&#34;date: 2015-11-28&lt;br /&gt;close:   357.38&#34;,&#34;date: 2015-11-29&lt;br /&gt;close:   371.29&#34;,&#34;date: 2015-11-30&lt;br /&gt;close:   377.32&#34;,&#34;date: 2015-12-01&lt;br /&gt;close:   362.49&#34;,&#34;date: 2015-12-02&lt;br /&gt;close:   359.19&#34;,&#34;date: 2015-12-03&lt;br /&gt;close:   361.05&#34;,&#34;date: 2015-12-04&lt;br /&gt;close:   363.18&#34;,&#34;date: 2015-12-05&lt;br /&gt;close:   388.95&#34;,&#34;date: 2015-12-06&lt;br /&gt;close:   388.78&#34;,&#34;date: 2015-12-07&lt;br /&gt;close:   395.54&#34;,&#34;date: 2015-12-08&lt;br /&gt;close:   415.56&#34;,&#34;date: 2015-12-09&lt;br /&gt;close:   417.56&#34;,&#34;date: 2015-12-10&lt;br /&gt;close:   415.48&#34;,&#34;date: 2015-12-11&lt;br /&gt;close:   451.94&#34;,&#34;date: 2015-12-12&lt;br /&gt;close:   435.00&#34;,&#34;date: 2015-12-13&lt;br /&gt;close:   433.76&#34;,&#34;date: 2015-12-14&lt;br /&gt;close:   444.18&#34;,&#34;date: 2015-12-15&lt;br /&gt;close:   465.32&#34;,&#34;date: 2015-12-16&lt;br /&gt;close:   454.93&#34;,&#34;date: 2015-12-17&lt;br /&gt;close:   456.08&#34;,&#34;date: 2015-12-18&lt;br /&gt;close:   463.62&#34;,&#34;date: 2015-12-19&lt;br /&gt;close:   462.32&#34;,&#34;date: 2015-12-20&lt;br /&gt;close:   442.68&#34;,&#34;date: 2015-12-21&lt;br /&gt;close:   438.64&#34;,&#34;date: 2015-12-22&lt;br /&gt;close:   436.57&#34;,&#34;date: 2015-12-23&lt;br /&gt;close:   442.40&#34;,&#34;date: 2015-12-24&lt;br /&gt;close:   454.98&#34;,&#34;date: 2015-12-25&lt;br /&gt;close:   455.65&#34;,&#34;date: 2015-12-26&lt;br /&gt;close:   417.27&#34;,&#34;date: 2015-12-27&lt;br /&gt;close:   422.82&#34;,&#34;date: 2015-12-28&lt;br /&gt;close:   422.28&#34;,&#34;date: 2015-12-29&lt;br /&gt;close:   432.98&#34;,&#34;date: 2015-12-30&lt;br /&gt;close:   426.62&#34;,&#34;date: 2015-12-31&lt;br /&gt;close:   430.57&#34;,&#34;date: 2016-01-01&lt;br /&gt;close:   434.33&#34;,&#34;date: 2016-01-02&lt;br /&gt;close:   433.44&#34;,&#34;date: 2016-01-03&lt;br /&gt;close:   430.01&#34;,&#34;date: 2016-01-04&lt;br /&gt;close:   433.09&#34;,&#34;date: 2016-01-05&lt;br /&gt;close:   431.96&#34;,&#34;date: 2016-01-06&lt;br /&gt;close:   429.11&#34;,&#34;date: 2016-01-07&lt;br /&gt;close:   458.05&#34;,&#34;date: 2016-01-08&lt;br /&gt;close:   453.23&#34;,&#34;date: 2016-01-09&lt;br /&gt;close:   447.61&#34;,&#34;date: 2016-01-10&lt;br /&gt;close:   447.99&#34;,&#34;date: 2016-01-11&lt;br /&gt;close:   448.43&#34;,&#34;date: 2016-01-12&lt;br /&gt;close:   435.69&#34;,&#34;date: 2016-01-13&lt;br /&gt;close:   432.37&#34;,&#34;date: 2016-01-14&lt;br /&gt;close:   430.31&#34;,&#34;date: 2016-01-15&lt;br /&gt;close:   364.33&#34;,&#34;date: 2016-01-16&lt;br /&gt;close:   387.54&#34;,&#34;date: 2016-01-17&lt;br /&gt;close:   382.30&#34;,&#34;date: 2016-01-18&lt;br /&gt;close:   387.17&#34;,&#34;date: 2016-01-19&lt;br /&gt;close:   380.15&#34;,&#34;date: 2016-01-20&lt;br /&gt;close:   420.23&#34;,&#34;date: 2016-01-21&lt;br /&gt;close:   410.26&#34;,&#34;date: 2016-01-22&lt;br /&gt;close:   382.49&#34;,&#34;date: 2016-01-23&lt;br /&gt;close:   387.49&#34;,&#34;date: 2016-01-24&lt;br /&gt;close:   402.97&#34;,&#34;date: 2016-01-25&lt;br /&gt;close:   391.73&#34;,&#34;date: 2016-01-26&lt;br /&gt;close:   392.15&#34;,&#34;date: 2016-01-27&lt;br /&gt;close:   394.97&#34;,&#34;date: 2016-01-28&lt;br /&gt;close:   380.29&#34;,&#34;date: 2016-01-29&lt;br /&gt;close:   379.47&#34;,&#34;date: 2016-01-30&lt;br /&gt;close:   378.26&#34;,&#34;date: 2016-01-31&lt;br /&gt;close:   368.77&#34;,&#34;date: 2016-02-01&lt;br /&gt;close:   373.06&#34;,&#34;date: 2016-02-02&lt;br /&gt;close:   374.45&#34;,&#34;date: 2016-02-03&lt;br /&gt;close:   369.95&#34;,&#34;date: 2016-02-04&lt;br /&gt;close:   389.59&#34;,&#34;date: 2016-02-05&lt;br /&gt;close:   386.55&#34;,&#34;date: 2016-02-06&lt;br /&gt;close:   376.52&#34;,&#34;date: 2016-02-07&lt;br /&gt;close:   376.62&#34;,&#34;date: 2016-02-08&lt;br /&gt;close:   373.45&#34;,&#34;date: 2016-02-09&lt;br /&gt;close:   376.03&#34;,&#34;date: 2016-02-10&lt;br /&gt;close:   381.65&#34;,&#34;date: 2016-02-11&lt;br /&gt;close:   379.65&#34;,&#34;date: 2016-02-12&lt;br /&gt;close:   384.26&#34;,&#34;date: 2016-02-13&lt;br /&gt;close:   391.86&#34;,&#34;date: 2016-02-14&lt;br /&gt;close:   407.23&#34;,&#34;date: 2016-02-15&lt;br /&gt;close:   400.18&#34;,&#34;date: 2016-02-16&lt;br /&gt;close:   407.49&#34;,&#34;date: 2016-02-17&lt;br /&gt;close:   416.32&#34;,&#34;date: 2016-02-18&lt;br /&gt;close:   422.37&#34;,&#34;date: 2016-02-19&lt;br /&gt;close:   420.79&#34;,&#34;date: 2016-02-20&lt;br /&gt;close:   437.16&#34;,&#34;date: 2016-02-21&lt;br /&gt;close:   438.80&#34;,&#34;date: 2016-02-22&lt;br /&gt;close:   437.75&#34;,&#34;date: 2016-02-23&lt;br /&gt;close:   420.74&#34;,&#34;date: 2016-02-24&lt;br /&gt;close:   424.95&#34;,&#34;date: 2016-02-25&lt;br /&gt;close:   424.54&#34;,&#34;date: 2016-02-26&lt;br /&gt;close:   432.15&#34;,&#34;date: 2016-02-27&lt;br /&gt;close:   432.52&#34;,&#34;date: 2016-02-28&lt;br /&gt;close:   433.50&#34;,&#34;date: 2016-02-29&lt;br /&gt;close:   437.70&#34;,&#34;date: 2016-03-01&lt;br /&gt;close:   435.12&#34;,&#34;date: 2016-03-02&lt;br /&gt;close:   423.99&#34;,&#34;date: 2016-03-03&lt;br /&gt;close:   421.65&#34;,&#34;date: 2016-03-04&lt;br /&gt;close:   410.94&#34;,&#34;date: 2016-03-05&lt;br /&gt;close:   400.57&#34;,&#34;date: 2016-03-06&lt;br /&gt;close:   407.71&#34;,&#34;date: 2016-03-07&lt;br /&gt;close:   414.32&#34;,&#34;date: 2016-03-08&lt;br /&gt;close:   413.97&#34;,&#34;date: 2016-03-09&lt;br /&gt;close:   414.86&#34;,&#34;date: 2016-03-10&lt;br /&gt;close:   417.13&#34;,&#34;date: 2016-03-11&lt;br /&gt;close:   421.69&#34;,&#34;date: 2016-03-12&lt;br /&gt;close:   411.62&#34;,&#34;date: 2016-03-13&lt;br /&gt;close:   414.07&#34;,&#34;date: 2016-03-14&lt;br /&gt;close:   416.44&#34;,&#34;date: 2016-03-15&lt;br /&gt;close:   416.83&#34;,&#34;date: 2016-03-16&lt;br /&gt;close:   417.01&#34;,&#34;date: 2016-03-17&lt;br /&gt;close:   420.62&#34;,&#34;date: 2016-03-18&lt;br /&gt;close:   409.55&#34;,&#34;date: 2016-03-19&lt;br /&gt;close:   410.44&#34;,&#34;date: 2016-03-20&lt;br /&gt;close:   413.76&#34;,&#34;date: 2016-03-21&lt;br /&gt;close:   413.31&#34;,&#34;date: 2016-03-22&lt;br /&gt;close:   418.09&#34;,&#34;date: 2016-03-23&lt;br /&gt;close:   418.04&#34;,&#34;date: 2016-03-24&lt;br /&gt;close:   416.39&#34;,&#34;date: 2016-03-25&lt;br /&gt;close:   417.18&#34;,&#34;date: 2016-03-26&lt;br /&gt;close:   417.95&#34;,&#34;date: 2016-03-27&lt;br /&gt;close:   426.77&#34;,&#34;date: 2016-03-28&lt;br /&gt;close:   424.23&#34;,&#34;date: 2016-03-29&lt;br /&gt;close:   416.52&#34;,&#34;date: 2016-03-30&lt;br /&gt;close:   414.82&#34;,&#34;date: 2016-03-31&lt;br /&gt;close:   416.73&#34;,&#34;date: 2016-04-01&lt;br /&gt;close:   417.96&#34;,&#34;date: 2016-04-02&lt;br /&gt;close:   420.87&#34;,&#34;date: 2016-04-03&lt;br /&gt;close:   420.90&#34;,&#34;date: 2016-04-04&lt;br /&gt;close:   421.44&#34;,&#34;date: 2016-04-05&lt;br /&gt;close:   424.03&#34;,&#34;date: 2016-04-06&lt;br /&gt;close:   423.41&#34;,&#34;date: 2016-04-07&lt;br /&gt;close:   422.74&#34;,&#34;date: 2016-04-08&lt;br /&gt;close:   420.35&#34;,&#34;date: 2016-04-09&lt;br /&gt;close:   419.41&#34;,&#34;date: 2016-04-10&lt;br /&gt;close:   421.56&#34;,&#34;date: 2016-04-11&lt;br /&gt;close:   422.48&#34;,&#34;date: 2016-04-12&lt;br /&gt;close:   425.19&#34;,&#34;date: 2016-04-13&lt;br /&gt;close:   423.73&#34;,&#34;date: 2016-04-14&lt;br /&gt;close:   424.28&#34;,&#34;date: 2016-04-15&lt;br /&gt;close:   429.71&#34;,&#34;date: 2016-04-16&lt;br /&gt;close:   430.57&#34;,&#34;date: 2016-04-17&lt;br /&gt;close:   427.40&#34;,&#34;date: 2016-04-18&lt;br /&gt;close:   428.59&#34;,&#34;date: 2016-04-19&lt;br /&gt;close:   435.51&#34;,&#34;date: 2016-04-20&lt;br /&gt;close:   441.39&#34;,&#34;date: 2016-04-21&lt;br /&gt;close:   449.42&#34;,&#34;date: 2016-04-22&lt;br /&gt;close:   445.74&#34;,&#34;date: 2016-04-23&lt;br /&gt;close:   450.28&#34;,&#34;date: 2016-04-24&lt;br /&gt;close:   458.55&#34;,&#34;date: 2016-04-25&lt;br /&gt;close:   461.43&#34;,&#34;date: 2016-04-26&lt;br /&gt;close:   466.09&#34;,&#34;date: 2016-04-27&lt;br /&gt;close:   444.69&#34;,&#34;date: 2016-04-28&lt;br /&gt;close:   449.01&#34;,&#34;date: 2016-04-29&lt;br /&gt;close:   455.10&#34;,&#34;date: 2016-04-30&lt;br /&gt;close:   448.32&#34;,&#34;date: 2016-05-01&lt;br /&gt;close:   451.88&#34;,&#34;date: 2016-05-02&lt;br /&gt;close:   444.67&#34;,&#34;date: 2016-05-03&lt;br /&gt;close:   450.30&#34;,&#34;date: 2016-05-04&lt;br /&gt;close:   446.72&#34;,&#34;date: 2016-05-05&lt;br /&gt;close:   447.98&#34;,&#34;date: 2016-05-06&lt;br /&gt;close:   459.60&#34;,&#34;date: 2016-05-07&lt;br /&gt;close:   458.54&#34;,&#34;date: 2016-05-08&lt;br /&gt;close:   458.55&#34;,&#34;date: 2016-05-09&lt;br /&gt;close:   460.48&#34;,&#34;date: 2016-05-10&lt;br /&gt;close:   450.89&#34;,&#34;date: 2016-05-11&lt;br /&gt;close:   452.73&#34;,&#34;date: 2016-05-12&lt;br /&gt;close:   454.77&#34;,&#34;date: 2016-05-13&lt;br /&gt;close:   455.67&#34;,&#34;date: 2016-05-14&lt;br /&gt;close:   455.67&#34;,&#34;date: 2016-05-15&lt;br /&gt;close:   457.57&#34;,&#34;date: 2016-05-16&lt;br /&gt;close:   454.16&#34;,&#34;date: 2016-05-17&lt;br /&gt;close:   453.78&#34;,&#34;date: 2016-05-18&lt;br /&gt;close:   454.62&#34;,&#34;date: 2016-05-19&lt;br /&gt;close:   438.71&#34;,&#34;date: 2016-05-20&lt;br /&gt;close:   442.68&#34;,&#34;date: 2016-05-21&lt;br /&gt;close:   443.19&#34;,&#34;date: 2016-05-22&lt;br /&gt;close:   439.32&#34;,&#34;date: 2016-05-23&lt;br /&gt;close:   444.15&#34;,&#34;date: 2016-05-24&lt;br /&gt;close:   445.98&#34;,&#34;date: 2016-05-25&lt;br /&gt;close:   449.60&#34;,&#34;date: 2016-05-26&lt;br /&gt;close:   453.38&#34;,&#34;date: 2016-05-27&lt;br /&gt;close:   473.46&#34;,&#34;date: 2016-05-28&lt;br /&gt;close:   530.04&#34;,&#34;date: 2016-05-29&lt;br /&gt;close:   526.23&#34;,&#34;date: 2016-05-30&lt;br /&gt;close:   533.86&#34;,&#34;date: 2016-05-31&lt;br /&gt;close:   531.39&#34;,&#34;date: 2016-06-01&lt;br /&gt;close:   536.92&#34;,&#34;date: 2016-06-02&lt;br /&gt;close:   537.97&#34;,&#34;date: 2016-06-03&lt;br /&gt;close:   569.19&#34;,&#34;date: 2016-06-04&lt;br /&gt;close:   572.73&#34;,&#34;date: 2016-06-05&lt;br /&gt;close:   574.98&#34;,&#34;date: 2016-06-06&lt;br /&gt;close:   585.54&#34;,&#34;date: 2016-06-07&lt;br /&gt;close:   576.60&#34;,&#34;date: 2016-06-08&lt;br /&gt;close:   581.65&#34;,&#34;date: 2016-06-09&lt;br /&gt;close:   574.63&#34;,&#34;date: 2016-06-10&lt;br /&gt;close:   577.47&#34;,&#34;date: 2016-06-11&lt;br /&gt;close:   606.73&#34;,&#34;date: 2016-06-12&lt;br /&gt;close:   672.78&#34;,&#34;date: 2016-06-13&lt;br /&gt;close:   704.38&#34;,&#34;date: 2016-06-14&lt;br /&gt;close:   685.56&#34;,&#34;date: 2016-06-15&lt;br /&gt;close:   694.47&#34;,&#34;date: 2016-06-16&lt;br /&gt;close:   766.31&#34;,&#34;date: 2016-06-17&lt;br /&gt;close:   748.91&#34;,&#34;date: 2016-06-18&lt;br /&gt;close:   756.23&#34;,&#34;date: 2016-06-19&lt;br /&gt;close:   763.78&#34;,&#34;date: 2016-06-20&lt;br /&gt;close:   737.23&#34;,&#34;date: 2016-06-21&lt;br /&gt;close:   666.65&#34;,&#34;date: 2016-06-22&lt;br /&gt;close:   596.12&#34;,&#34;date: 2016-06-23&lt;br /&gt;close:   623.98&#34;,&#34;date: 2016-06-24&lt;br /&gt;close:   665.30&#34;,&#34;date: 2016-06-25&lt;br /&gt;close:   665.12&#34;,&#34;date: 2016-06-26&lt;br /&gt;close:   629.37&#34;,&#34;date: 2016-06-27&lt;br /&gt;close:   655.28&#34;,&#34;date: 2016-06-28&lt;br /&gt;close:   647.00&#34;,&#34;date: 2016-06-29&lt;br /&gt;close:   639.89&#34;,&#34;date: 2016-06-30&lt;br /&gt;close:   673.34&#34;,&#34;date: 2016-07-01&lt;br /&gt;close:   676.30&#34;,&#34;date: 2016-07-02&lt;br /&gt;close:   703.70&#34;,&#34;date: 2016-07-03&lt;br /&gt;close:   658.66&#34;,&#34;date: 2016-07-04&lt;br /&gt;close:   683.66&#34;,&#34;date: 2016-07-05&lt;br /&gt;close:   670.63&#34;,&#34;date: 2016-07-06&lt;br /&gt;close:   677.33&#34;,&#34;date: 2016-07-07&lt;br /&gt;close:   640.56&#34;,&#34;date: 2016-07-08&lt;br /&gt;close:   666.52&#34;,&#34;date: 2016-07-09&lt;br /&gt;close:   650.96&#34;,&#34;date: 2016-07-10&lt;br /&gt;close:   649.36&#34;,&#34;date: 2016-07-11&lt;br /&gt;close:   647.66&#34;,&#34;date: 2016-07-12&lt;br /&gt;close:   664.55&#34;,&#34;date: 2016-07-13&lt;br /&gt;close:   654.47&#34;,&#34;date: 2016-07-14&lt;br /&gt;close:   658.08&#34;,&#34;date: 2016-07-15&lt;br /&gt;close:   663.26&#34;,&#34;date: 2016-07-16&lt;br /&gt;close:   660.77&#34;,&#34;date: 2016-07-17&lt;br /&gt;close:   679.46&#34;,&#34;date: 2016-07-18&lt;br /&gt;close:   673.11&#34;,&#34;date: 2016-07-19&lt;br /&gt;close:   672.86&#34;,&#34;date: 2016-07-20&lt;br /&gt;close:   665.68&#34;,&#34;date: 2016-07-21&lt;br /&gt;close:   665.01&#34;,&#34;date: 2016-07-22&lt;br /&gt;close:   650.62&#34;,&#34;date: 2016-07-23&lt;br /&gt;close:   655.56&#34;,&#34;date: 2016-07-24&lt;br /&gt;close:   661.28&#34;,&#34;date: 2016-07-25&lt;br /&gt;close:   654.10&#34;,&#34;date: 2016-07-26&lt;br /&gt;close:   651.78&#34;,&#34;date: 2016-07-27&lt;br /&gt;close:   654.35&#34;,&#34;date: 2016-07-28&lt;br /&gt;close:   655.03&#34;,&#34;date: 2016-07-29&lt;br /&gt;close:   656.99&#34;,&#34;date: 2016-07-30&lt;br /&gt;close:   655.05&#34;,&#34;date: 2016-07-31&lt;br /&gt;close:   624.68&#34;,&#34;date: 2016-08-01&lt;br /&gt;close:   606.27&#34;,&#34;date: 2016-08-02&lt;br /&gt;close:   547.47&#34;,&#34;date: 2016-08-03&lt;br /&gt;close:   566.35&#34;,&#34;date: 2016-08-04&lt;br /&gt;close:   578.29&#34;,&#34;date: 2016-08-05&lt;br /&gt;close:   575.04&#34;,&#34;date: 2016-08-06&lt;br /&gt;close:   587.78&#34;,&#34;date: 2016-08-07&lt;br /&gt;close:   592.69&#34;,&#34;date: 2016-08-08&lt;br /&gt;close:   591.05&#34;,&#34;date: 2016-08-09&lt;br /&gt;close:   587.80&#34;,&#34;date: 2016-08-10&lt;br /&gt;close:   592.10&#34;,&#34;date: 2016-08-11&lt;br /&gt;close:   589.12&#34;,&#34;date: 2016-08-12&lt;br /&gt;close:   587.56&#34;,&#34;date: 2016-08-13&lt;br /&gt;close:   585.59&#34;,&#34;date: 2016-08-14&lt;br /&gt;close:   570.47&#34;,&#34;date: 2016-08-15&lt;br /&gt;close:   567.24&#34;,&#34;date: 2016-08-16&lt;br /&gt;close:   577.44&#34;,&#34;date: 2016-08-17&lt;br /&gt;close:   573.22&#34;,&#34;date: 2016-08-18&lt;br /&gt;close:   574.32&#34;,&#34;date: 2016-08-19&lt;br /&gt;close:   575.63&#34;,&#34;date: 2016-08-20&lt;br /&gt;close:   581.70&#34;,&#34;date: 2016-08-21&lt;br /&gt;close:   581.31&#34;,&#34;date: 2016-08-22&lt;br /&gt;close:   586.75&#34;,&#34;date: 2016-08-23&lt;br /&gt;close:   583.41&#34;,&#34;date: 2016-08-24&lt;br /&gt;close:   580.18&#34;,&#34;date: 2016-08-25&lt;br /&gt;close:   577.76&#34;,&#34;date: 2016-08-26&lt;br /&gt;close:   579.65&#34;,&#34;date: 2016-08-27&lt;br /&gt;close:   569.95&#34;,&#34;date: 2016-08-28&lt;br /&gt;close:   573.91&#34;,&#34;date: 2016-08-29&lt;br /&gt;close:   574.11&#34;,&#34;date: 2016-08-30&lt;br /&gt;close:   577.50&#34;,&#34;date: 2016-08-31&lt;br /&gt;close:   575.47&#34;,&#34;date: 2016-09-01&lt;br /&gt;close:   572.30&#34;,&#34;date: 2016-09-02&lt;br /&gt;close:   575.54&#34;,&#34;date: 2016-09-03&lt;br /&gt;close:   598.21&#34;,&#34;date: 2016-09-04&lt;br /&gt;close:   608.63&#34;,&#34;date: 2016-09-05&lt;br /&gt;close:   606.59&#34;,&#34;date: 2016-09-06&lt;br /&gt;close:   610.44&#34;,&#34;date: 2016-09-07&lt;br /&gt;close:   614.54&#34;,&#34;date: 2016-09-08&lt;br /&gt;close:   626.32&#34;,&#34;date: 2016-09-09&lt;br /&gt;close:   622.86&#34;,&#34;date: 2016-09-10&lt;br /&gt;close:   623.51&#34;,&#34;date: 2016-09-11&lt;br /&gt;close:   606.72&#34;,&#34;date: 2016-09-12&lt;br /&gt;close:   608.24&#34;,&#34;date: 2016-09-13&lt;br /&gt;close:   609.24&#34;,&#34;date: 2016-09-14&lt;br /&gt;close:   610.68&#34;,&#34;date: 2016-09-15&lt;br /&gt;close:   607.16&#34;,&#34;date: 2016-09-16&lt;br /&gt;close:   606.97&#34;,&#34;date: 2016-09-17&lt;br /&gt;close:   605.98&#34;,&#34;date: 2016-09-18&lt;br /&gt;close:   609.87&#34;,&#34;date: 2016-09-19&lt;br /&gt;close:   609.23&#34;,&#34;date: 2016-09-20&lt;br /&gt;close:   608.31&#34;,&#34;date: 2016-09-21&lt;br /&gt;close:   597.15&#34;,&#34;date: 2016-09-22&lt;br /&gt;close:   596.30&#34;,&#34;date: 2016-09-23&lt;br /&gt;close:   602.84&#34;,&#34;date: 2016-09-24&lt;br /&gt;close:   602.63&#34;,&#34;date: 2016-09-25&lt;br /&gt;close:   600.83&#34;,&#34;date: 2016-09-26&lt;br /&gt;close:   608.04&#34;,&#34;date: 2016-09-27&lt;br /&gt;close:   606.17&#34;,&#34;date: 2016-09-28&lt;br /&gt;close:   604.73&#34;,&#34;date: 2016-09-29&lt;br /&gt;close:   605.69&#34;,&#34;date: 2016-09-30&lt;br /&gt;close:   609.73&#34;,&#34;date: 2016-10-01&lt;br /&gt;close:   613.98&#34;,&#34;date: 2016-10-02&lt;br /&gt;close:   610.89&#34;,&#34;date: 2016-10-03&lt;br /&gt;close:   612.13&#34;,&#34;date: 2016-10-04&lt;br /&gt;close:   610.20&#34;,&#34;date: 2016-10-05&lt;br /&gt;close:   612.51&#34;,&#34;date: 2016-10-06&lt;br /&gt;close:   613.02&#34;,&#34;date: 2016-10-07&lt;br /&gt;close:   617.12&#34;,&#34;date: 2016-10-08&lt;br /&gt;close:   619.11&#34;,&#34;date: 2016-10-09&lt;br /&gt;close:   616.75&#34;,&#34;date: 2016-10-10&lt;br /&gt;close:   618.99&#34;,&#34;date: 2016-10-11&lt;br /&gt;close:   641.07&#34;,&#34;date: 2016-10-12&lt;br /&gt;close:   636.19&#34;,&#34;date: 2016-10-13&lt;br /&gt;close:   636.79&#34;,&#34;date: 2016-10-14&lt;br /&gt;close:   640.38&#34;,&#34;date: 2016-10-15&lt;br /&gt;close:   638.65&#34;,&#34;date: 2016-10-16&lt;br /&gt;close:   641.63&#34;,&#34;date: 2016-10-17&lt;br /&gt;close:   639.19&#34;,&#34;date: 2016-10-18&lt;br /&gt;close:   637.96&#34;,&#34;date: 2016-10-19&lt;br /&gt;close:   630.52&#34;,&#34;date: 2016-10-20&lt;br /&gt;close:   630.86&#34;,&#34;date: 2016-10-21&lt;br /&gt;close:   632.83&#34;,&#34;date: 2016-10-22&lt;br /&gt;close:   657.29&#34;,&#34;date: 2016-10-23&lt;br /&gt;close:   657.07&#34;,&#34;date: 2016-10-24&lt;br /&gt;close:   653.76&#34;,&#34;date: 2016-10-25&lt;br /&gt;close:   657.59&#34;,&#34;date: 2016-10-26&lt;br /&gt;close:   678.30&#34;,&#34;date: 2016-10-27&lt;br /&gt;close:   688.31&#34;,&#34;date: 2016-10-28&lt;br /&gt;close:   689.65&#34;,&#34;date: 2016-10-29&lt;br /&gt;close:   714.48&#34;,&#34;date: 2016-10-30&lt;br /&gt;close:   701.86&#34;,&#34;date: 2016-10-31&lt;br /&gt;close:   700.97&#34;,&#34;date: 2016-11-01&lt;br /&gt;close:   729.79&#34;,&#34;date: 2016-11-02&lt;br /&gt;close:   740.83&#34;,&#34;date: 2016-11-03&lt;br /&gt;close:   688.70&#34;,&#34;date: 2016-11-04&lt;br /&gt;close:   703.23&#34;,&#34;date: 2016-11-05&lt;br /&gt;close:   703.42&#34;,&#34;date: 2016-11-06&lt;br /&gt;close:   711.52&#34;,&#34;date: 2016-11-07&lt;br /&gt;close:   703.13&#34;,&#34;date: 2016-11-08&lt;br /&gt;close:   709.85&#34;,&#34;date: 2016-11-09&lt;br /&gt;close:   723.27&#34;,&#34;date: 2016-11-10&lt;br /&gt;close:   715.53&#34;,&#34;date: 2016-11-11&lt;br /&gt;close:   716.41&#34;,&#34;date: 2016-11-12&lt;br /&gt;close:   705.05&#34;,&#34;date: 2016-11-13&lt;br /&gt;close:   702.03&#34;,&#34;date: 2016-11-14&lt;br /&gt;close:   705.02&#34;,&#34;date: 2016-11-15&lt;br /&gt;close:   711.62&#34;,&#34;date: 2016-11-16&lt;br /&gt;close:   744.20&#34;,&#34;date: 2016-11-17&lt;br /&gt;close:   740.98&#34;,&#34;date: 2016-11-18&lt;br /&gt;close:   751.59&#34;,&#34;date: 2016-11-19&lt;br /&gt;close:   751.62&#34;,&#34;date: 2016-11-20&lt;br /&gt;close:   731.03&#34;,&#34;date: 2016-11-21&lt;br /&gt;close:   739.25&#34;,&#34;date: 2016-11-22&lt;br /&gt;close:   751.35&#34;,&#34;date: 2016-11-23&lt;br /&gt;close:   744.59&#34;,&#34;date: 2016-11-24&lt;br /&gt;close:   740.29&#34;,&#34;date: 2016-11-25&lt;br /&gt;close:   741.65&#34;,&#34;date: 2016-11-26&lt;br /&gt;close:   735.38&#34;,&#34;date: 2016-11-27&lt;br /&gt;close:   732.03&#34;,&#34;date: 2016-11-28&lt;br /&gt;close:   735.81&#34;,&#34;date: 2016-11-29&lt;br /&gt;close:   735.60&#34;,&#34;date: 2016-11-30&lt;br /&gt;close:   745.69&#34;,&#34;date: 2016-12-01&lt;br /&gt;close:   756.77&#34;,&#34;date: 2016-12-02&lt;br /&gt;close:   777.94&#34;,&#34;date: 2016-12-03&lt;br /&gt;close:   771.16&#34;,&#34;date: 2016-12-04&lt;br /&gt;close:   773.87&#34;,&#34;date: 2016-12-05&lt;br /&gt;close:   758.70&#34;,&#34;date: 2016-12-06&lt;br /&gt;close:   764.22&#34;,&#34;date: 2016-12-07&lt;br /&gt;close:   768.13&#34;,&#34;date: 2016-12-08&lt;br /&gt;close:   770.81&#34;,&#34;date: 2016-12-09&lt;br /&gt;close:   772.79&#34;,&#34;date: 2016-12-10&lt;br /&gt;close:   774.65&#34;,&#34;date: 2016-12-11&lt;br /&gt;close:   769.73&#34;,&#34;date: 2016-12-12&lt;br /&gt;close:   780.09&#34;,&#34;date: 2016-12-13&lt;br /&gt;close:   780.56&#34;,&#34;date: 2016-12-14&lt;br /&gt;close:   781.48&#34;,&#34;date: 2016-12-15&lt;br /&gt;close:   778.09&#34;,&#34;date: 2016-12-16&lt;br /&gt;close:   784.91&#34;,&#34;date: 2016-12-17&lt;br /&gt;close:   790.83&#34;,&#34;date: 2016-12-18&lt;br /&gt;close:   790.53&#34;,&#34;date: 2016-12-19&lt;br /&gt;close:   792.71&#34;,&#34;date: 2016-12-20&lt;br /&gt;close:   800.88&#34;,&#34;date: 2016-12-21&lt;br /&gt;close:   834.28&#34;,&#34;date: 2016-12-22&lt;br /&gt;close:   864.54&#34;,&#34;date: 2016-12-23&lt;br /&gt;close:   921.98&#34;,&#34;date: 2016-12-24&lt;br /&gt;close:   898.82&#34;,&#34;date: 2016-12-25&lt;br /&gt;close:   896.18&#34;,&#34;date: 2016-12-26&lt;br /&gt;close:   907.61&#34;,&#34;date: 2016-12-27&lt;br /&gt;close:   933.20&#34;,&#34;date: 2016-12-28&lt;br /&gt;close:   975.92&#34;,&#34;date: 2016-12-29&lt;br /&gt;close:   973.50&#34;,&#34;date: 2016-12-30&lt;br /&gt;close:   961.24&#34;,&#34;date: 2016-12-31&lt;br /&gt;close:   963.74&#34;,&#34;date: 2017-01-01&lt;br /&gt;close:   998.33&#34;,&#34;date: 2017-01-02&lt;br /&gt;close:  1021.75&#34;,&#34;date: 2017-01-03&lt;br /&gt;close:  1043.84&#34;,&#34;date: 2017-01-04&lt;br /&gt;close:  1154.73&#34;,&#34;date: 2017-01-05&lt;br /&gt;close:  1013.38&#34;,&#34;date: 2017-01-06&lt;br /&gt;close:   902.20&#34;,&#34;date: 2017-01-07&lt;br /&gt;close:   908.59&#34;,&#34;date: 2017-01-08&lt;br /&gt;close:   911.20&#34;,&#34;date: 2017-01-09&lt;br /&gt;close:   902.83&#34;,&#34;date: 2017-01-10&lt;br /&gt;close:   907.68&#34;,&#34;date: 2017-01-11&lt;br /&gt;close:   777.76&#34;,&#34;date: 2017-01-12&lt;br /&gt;close:   804.83&#34;,&#34;date: 2017-01-13&lt;br /&gt;close:   823.98&#34;,&#34;date: 2017-01-14&lt;br /&gt;close:   818.41&#34;,&#34;date: 2017-01-15&lt;br /&gt;close:   821.80&#34;,&#34;date: 2017-01-16&lt;br /&gt;close:   831.53&#34;,&#34;date: 2017-01-17&lt;br /&gt;close:   907.94&#34;,&#34;date: 2017-01-18&lt;br /&gt;close:   886.62&#34;,&#34;date: 2017-01-19&lt;br /&gt;close:   899.07&#34;,&#34;date: 2017-01-20&lt;br /&gt;close:   895.03&#34;,&#34;date: 2017-01-21&lt;br /&gt;close:   921.79&#34;,&#34;date: 2017-01-22&lt;br /&gt;close:   924.67&#34;,&#34;date: 2017-01-23&lt;br /&gt;close:   921.01&#34;,&#34;date: 2017-01-24&lt;br /&gt;close:   892.69&#34;,&#34;date: 2017-01-25&lt;br /&gt;close:   901.54&#34;,&#34;date: 2017-01-26&lt;br /&gt;close:   917.59&#34;,&#34;date: 2017-01-27&lt;br /&gt;close:   919.75&#34;,&#34;date: 2017-01-28&lt;br /&gt;close:   921.59&#34;,&#34;date: 2017-01-29&lt;br /&gt;close:   919.50&#34;,&#34;date: 2017-01-30&lt;br /&gt;close:   920.38&#34;,&#34;date: 2017-01-31&lt;br /&gt;close:   970.40&#34;,&#34;date: 2017-02-01&lt;br /&gt;close:   989.02&#34;,&#34;date: 2017-02-02&lt;br /&gt;close:  1011.80&#34;,&#34;date: 2017-02-03&lt;br /&gt;close:  1029.91&#34;,&#34;date: 2017-02-04&lt;br /&gt;close:  1042.90&#34;,&#34;date: 2017-02-05&lt;br /&gt;close:  1027.34&#34;,&#34;date: 2017-02-06&lt;br /&gt;close:  1038.15&#34;,&#34;date: 2017-02-07&lt;br /&gt;close:  1061.35&#34;,&#34;date: 2017-02-08&lt;br /&gt;close:  1063.07&#34;,&#34;date: 2017-02-09&lt;br /&gt;close:   994.38&#34;,&#34;date: 2017-02-10&lt;br /&gt;close:   988.67&#34;,&#34;date: 2017-02-11&lt;br /&gt;close:  1004.45&#34;,&#34;date: 2017-02-12&lt;br /&gt;close:   999.18&#34;,&#34;date: 2017-02-13&lt;br /&gt;close:   990.64&#34;,&#34;date: 2017-02-14&lt;br /&gt;close:  1004.55&#34;,&#34;date: 2017-02-15&lt;br /&gt;close:  1007.48&#34;,&#34;date: 2017-02-16&lt;br /&gt;close:  1027.44&#34;,&#34;date: 2017-02-17&lt;br /&gt;close:  1046.21&#34;,&#34;date: 2017-02-18&lt;br /&gt;close:  1054.42&#34;,&#34;date: 2017-02-19&lt;br /&gt;close:  1047.87&#34;,&#34;date: 2017-02-20&lt;br /&gt;close:  1079.98&#34;,&#34;date: 2017-02-21&lt;br /&gt;close:  1115.30&#34;,&#34;date: 2017-02-22&lt;br /&gt;close:  1117.44&#34;,&#34;date: 2017-02-23&lt;br /&gt;close:  1166.72&#34;,&#34;date: 2017-02-24&lt;br /&gt;close:  1173.68&#34;,&#34;date: 2017-02-25&lt;br /&gt;close:  1143.84&#34;,&#34;date: 2017-02-26&lt;br /&gt;close:  1165.20&#34;,&#34;date: 2017-02-27&lt;br /&gt;close:  1179.97&#34;,&#34;date: 2017-02-28&lt;br /&gt;close:  1179.97&#34;,&#34;date: 2017-03-01&lt;br /&gt;close:  1222.50&#34;,&#34;date: 2017-03-02&lt;br /&gt;close:  1251.01&#34;,&#34;date: 2017-03-03&lt;br /&gt;close:  1274.99&#34;,&#34;date: 2017-03-04&lt;br /&gt;close:  1255.15&#34;,&#34;date: 2017-03-05&lt;br /&gt;close:  1267.12&#34;,&#34;date: 2017-03-06&lt;br /&gt;close:  1272.83&#34;,&#34;date: 2017-03-07&lt;br /&gt;close:  1223.54&#34;,&#34;date: 2017-03-08&lt;br /&gt;close:  1150.00&#34;,&#34;date: 2017-03-09&lt;br /&gt;close:  1188.49&#34;,&#34;date: 2017-03-10&lt;br /&gt;close:  1116.72&#34;,&#34;date: 2017-03-11&lt;br /&gt;close:  1175.83&#34;,&#34;date: 2017-03-12&lt;br /&gt;close:  1221.38&#34;,&#34;date: 2017-03-13&lt;br /&gt;close:  1231.92&#34;,&#34;date: 2017-03-14&lt;br /&gt;close:  1240.00&#34;,&#34;date: 2017-03-15&lt;br /&gt;close:  1249.61&#34;,&#34;date: 2017-03-16&lt;br /&gt;close:  1187.81&#34;,&#34;date: 2017-03-17&lt;br /&gt;close:  1100.23&#34;,&#34;date: 2017-03-18&lt;br /&gt;close:   973.82&#34;,&#34;date: 2017-03-19&lt;br /&gt;close:  1036.74&#34;,&#34;date: 2017-03-20&lt;br /&gt;close:  1054.23&#34;,&#34;date: 2017-03-21&lt;br /&gt;close:  1120.54&#34;,&#34;date: 2017-03-22&lt;br /&gt;close:  1049.14&#34;,&#34;date: 2017-03-23&lt;br /&gt;close:  1038.59&#34;,&#34;date: 2017-03-24&lt;br /&gt;close:   937.52&#34;,&#34;date: 2017-03-25&lt;br /&gt;close:   972.78&#34;,&#34;date: 2017-03-26&lt;br /&gt;close:   966.72&#34;,&#34;date: 2017-03-27&lt;br /&gt;close:  1045.77&#34;,&#34;date: 2017-03-28&lt;br /&gt;close:  1047.15&#34;,&#34;date: 2017-03-29&lt;br /&gt;close:  1039.97&#34;,&#34;date: 2017-03-30&lt;br /&gt;close:  1026.43&#34;,&#34;date: 2017-03-31&lt;br /&gt;close:  1071.79&#34;,&#34;date: 2017-04-01&lt;br /&gt;close:  1080.50&#34;,&#34;date: 2017-04-02&lt;br /&gt;close:  1102.17&#34;,&#34;date: 2017-04-03&lt;br /&gt;close:  1143.81&#34;,&#34;date: 2017-04-04&lt;br /&gt;close:  1133.25&#34;,&#34;date: 2017-04-05&lt;br /&gt;close:  1124.78&#34;,&#34;date: 2017-04-06&lt;br /&gt;close:  1182.68&#34;,&#34;date: 2017-04-07&lt;br /&gt;close:  1176.90&#34;,&#34;date: 2017-04-08&lt;br /&gt;close:  1175.95&#34;,&#34;date: 2017-04-09&lt;br /&gt;close:  1187.87&#34;,&#34;date: 2017-04-10&lt;br /&gt;close:  1187.13&#34;,&#34;date: 2017-04-11&lt;br /&gt;close:  1205.01&#34;,&#34;date: 2017-04-12&lt;br /&gt;close:  1200.37&#34;,&#34;date: 2017-04-13&lt;br /&gt;close:  1169.28&#34;,&#34;date: 2017-04-14&lt;br /&gt;close:  1167.54&#34;,&#34;date: 2017-04-15&lt;br /&gt;close:  1172.52&#34;,&#34;date: 2017-04-16&lt;br /&gt;close:  1182.94&#34;,&#34;date: 2017-04-17&lt;br /&gt;close:  1193.91&#34;,&#34;date: 2017-04-18&lt;br /&gt;close:  1211.67&#34;,&#34;date: 2017-04-19&lt;br /&gt;close:  1210.29&#34;,&#34;date: 2017-04-20&lt;br /&gt;close:  1229.08&#34;,&#34;date: 2017-04-21&lt;br /&gt;close:  1222.05&#34;,&#34;date: 2017-04-22&lt;br /&gt;close:  1231.71&#34;,&#34;date: 2017-04-23&lt;br /&gt;close:  1207.21&#34;,&#34;date: 2017-04-24&lt;br /&gt;close:  1250.15&#34;,&#34;date: 2017-04-25&lt;br /&gt;close:  1265.49&#34;,&#34;date: 2017-04-26&lt;br /&gt;close:  1281.08&#34;,&#34;date: 2017-04-27&lt;br /&gt;close:  1317.73&#34;,&#34;date: 2017-04-28&lt;br /&gt;close:  1316.48&#34;,&#34;date: 2017-04-29&lt;br /&gt;close:  1321.79&#34;,&#34;date: 2017-04-30&lt;br /&gt;close:  1347.89&#34;,&#34;date: 2017-05-01&lt;br /&gt;close:  1421.60&#34;,&#34;date: 2017-05-02&lt;br /&gt;close:  1452.82&#34;,&#34;date: 2017-05-03&lt;br /&gt;close:  1490.09&#34;,&#34;date: 2017-05-04&lt;br /&gt;close:  1537.67&#34;,&#34;date: 2017-05-05&lt;br /&gt;close:  1555.45&#34;,&#34;date: 2017-05-06&lt;br /&gt;close:  1578.80&#34;,&#34;date: 2017-05-07&lt;br /&gt;close:  1596.71&#34;,&#34;date: 2017-05-08&lt;br /&gt;close:  1723.35&#34;,&#34;date: 2017-05-09&lt;br /&gt;close:  1755.36&#34;,&#34;date: 2017-05-10&lt;br /&gt;close:  1787.13&#34;,&#34;date: 2017-05-11&lt;br /&gt;close:  1848.57&#34;,&#34;date: 2017-05-12&lt;br /&gt;close:  1724.24&#34;,&#34;date: 2017-05-13&lt;br /&gt;close:  1804.91&#34;,&#34;date: 2017-05-14&lt;br /&gt;close:  1808.91&#34;,&#34;date: 2017-05-15&lt;br /&gt;close:  1738.43&#34;,&#34;date: 2017-05-16&lt;br /&gt;close:  1734.45&#34;,&#34;date: 2017-05-17&lt;br /&gt;close:  1839.09&#34;,&#34;date: 2017-05-18&lt;br /&gt;close:  1888.65&#34;,&#34;date: 2017-05-19&lt;br /&gt;close:  1987.71&#34;,&#34;date: 2017-05-20&lt;br /&gt;close:  2084.73&#34;,&#34;date: 2017-05-21&lt;br /&gt;close:  2041.20&#34;,&#34;date: 2017-05-22&lt;br /&gt;close:  2173.40&#34;,&#34;date: 2017-05-23&lt;br /&gt;close:  2320.42&#34;,&#34;date: 2017-05-24&lt;br /&gt;close:  2443.64&#34;,&#34;date: 2017-05-25&lt;br /&gt;close:  2304.98&#34;,&#34;date: 2017-05-26&lt;br /&gt;close:  2202.42&#34;,&#34;date: 2017-05-27&lt;br /&gt;close:  2038.87&#34;,&#34;date: 2017-05-28&lt;br /&gt;close:  2155.80&#34;,&#34;date: 2017-05-29&lt;br /&gt;close:  2255.61&#34;,&#34;date: 2017-05-30&lt;br /&gt;close:  2175.47&#34;,&#34;date: 2017-05-31&lt;br /&gt;close:  2286.41&#34;,&#34;date: 2017-06-01&lt;br /&gt;close:  2407.88&#34;,&#34;date: 2017-06-02&lt;br /&gt;close:  2488.55&#34;,&#34;date: 2017-06-03&lt;br /&gt;close:  2515.35&#34;,&#34;date: 2017-06-04&lt;br /&gt;close:  2511.81&#34;,&#34;date: 2017-06-05&lt;br /&gt;close:  2686.81&#34;,&#34;date: 2017-06-06&lt;br /&gt;close:  2863.20&#34;,&#34;date: 2017-06-07&lt;br /&gt;close:  2732.16&#34;,&#34;date: 2017-06-08&lt;br /&gt;close:  2805.62&#34;,&#34;date: 2017-06-09&lt;br /&gt;close:  2823.81&#34;,&#34;date: 2017-06-10&lt;br /&gt;close:  2947.71&#34;,&#34;date: 2017-06-11&lt;br /&gt;close:  2958.11&#34;,&#34;date: 2017-06-12&lt;br /&gt;close:  2659.63&#34;,&#34;date: 2017-06-13&lt;br /&gt;close:  2717.02&#34;,&#34;date: 2017-06-14&lt;br /&gt;close:  2506.37&#34;,&#34;date: 2017-06-15&lt;br /&gt;close:  2464.58&#34;,&#34;date: 2017-06-16&lt;br /&gt;close:  2518.56&#34;,&#34;date: 2017-06-17&lt;br /&gt;close:  2655.88&#34;,&#34;date: 2017-06-18&lt;br /&gt;close:  2548.29&#34;,&#34;date: 2017-06-19&lt;br /&gt;close:  2589.60&#34;,&#34;date: 2017-06-20&lt;br /&gt;close:  2721.79&#34;,&#34;date: 2017-06-21&lt;br /&gt;close:  2689.10&#34;,&#34;date: 2017-06-22&lt;br /&gt;close:  2705.41&#34;,&#34;date: 2017-06-23&lt;br /&gt;close:  2744.91&#34;,&#34;date: 2017-06-24&lt;br /&gt;close:  2608.72&#34;,&#34;date: 2017-06-25&lt;br /&gt;close:  2589.41&#34;,&#34;date: 2017-06-26&lt;br /&gt;close:  2478.45&#34;,&#34;date: 2017-06-27&lt;br /&gt;close:  2552.45&#34;,&#34;date: 2017-06-28&lt;br /&gt;close:  2574.79&#34;,&#34;date: 2017-06-29&lt;br /&gt;close:  2539.32&#34;,&#34;date: 2017-06-30&lt;br /&gt;close:  2480.84&#34;,&#34;date: 2017-07-01&lt;br /&gt;close:  2434.55&#34;,&#34;date: 2017-07-02&lt;br /&gt;close:  2506.47&#34;,&#34;date: 2017-07-03&lt;br /&gt;close:  2564.06&#34;,&#34;date: 2017-07-04&lt;br /&gt;close:  2601.64&#34;,&#34;date: 2017-07-05&lt;br /&gt;close:  2601.99&#34;,&#34;date: 2017-07-06&lt;br /&gt;close:  2608.56&#34;,&#34;date: 2017-07-07&lt;br /&gt;close:  2518.66&#34;,&#34;date: 2017-07-08&lt;br /&gt;close:  2571.34&#34;,&#34;date: 2017-07-09&lt;br /&gt;close:  2518.44&#34;,&#34;date: 2017-07-10&lt;br /&gt;close:  2372.56&#34;,&#34;date: 2017-07-11&lt;br /&gt;close:  2337.79&#34;,&#34;date: 2017-07-12&lt;br /&gt;close:  2398.84&#34;,&#34;date: 2017-07-13&lt;br /&gt;close:  2357.90&#34;,&#34;date: 2017-07-14&lt;br /&gt;close:  2233.34&#34;,&#34;date: 2017-07-15&lt;br /&gt;close:  1998.86&#34;,&#34;date: 2017-07-16&lt;br /&gt;close:  1929.82&#34;,&#34;date: 2017-07-17&lt;br /&gt;close:  2228.41&#34;,&#34;date: 2017-07-18&lt;br /&gt;close:  2318.88&#34;,&#34;date: 2017-07-19&lt;br /&gt;close:  2273.43&#34;,&#34;date: 2017-07-20&lt;br /&gt;close:  2817.60&#34;,&#34;date: 2017-07-21&lt;br /&gt;close:  2667.76&#34;,&#34;date: 2017-07-22&lt;br /&gt;close:  2810.12&#34;,&#34;date: 2017-07-23&lt;br /&gt;close:  2730.40&#34;,&#34;date: 2017-07-24&lt;br /&gt;close:  2754.86&#34;,&#34;date: 2017-07-25&lt;br /&gt;close:  2576.48&#34;,&#34;date: 2017-07-26&lt;br /&gt;close:  2529.45&#34;,&#34;date: 2017-07-27&lt;br /&gt;close:  2671.78&#34;,&#34;date: 2017-07-28&lt;br /&gt;close:  2809.01&#34;,&#34;date: 2017-07-29&lt;br /&gt;close:  2726.45&#34;,&#34;date: 2017-07-30&lt;br /&gt;close:  2757.18&#34;,&#34;date: 2017-07-31&lt;br /&gt;close:  2875.34&#34;,&#34;date: 2017-08-01&lt;br /&gt;close:  2718.26&#34;,&#34;date: 2017-08-02&lt;br /&gt;close:  2710.67&#34;,&#34;date: 2017-08-03&lt;br /&gt;close:  2804.73&#34;,&#34;date: 2017-08-04&lt;br /&gt;close:  2895.89&#34;,&#34;date: 2017-08-05&lt;br /&gt;close:  3252.91&#34;,&#34;date: 2017-08-06&lt;br /&gt;close:  3213.94&#34;,&#34;date: 2017-08-07&lt;br /&gt;close:  3378.94&#34;,&#34;date: 2017-08-08&lt;br /&gt;close:  3419.94&#34;,&#34;date: 2017-08-09&lt;br /&gt;close:  3342.47&#34;,&#34;date: 2017-08-10&lt;br /&gt;close:  3381.28&#34;,&#34;date: 2017-08-11&lt;br /&gt;close:  3650.62&#34;,&#34;date: 2017-08-12&lt;br /&gt;close:  3884.71&#34;,&#34;date: 2017-08-13&lt;br /&gt;close:  4073.26&#34;,&#34;date: 2017-08-14&lt;br /&gt;close:  4325.13&#34;,&#34;date: 2017-08-15&lt;br /&gt;close:  4181.93&#34;,&#34;date: 2017-08-16&lt;br /&gt;close:  4376.63&#34;,&#34;date: 2017-08-17&lt;br /&gt;close:  4331.69&#34;,&#34;date: 2017-08-18&lt;br /&gt;close:  4160.62&#34;,&#34;date: 2017-08-19&lt;br /&gt;close:  4193.70&#34;,&#34;date: 2017-08-20&lt;br /&gt;close:  4087.66&#34;,&#34;date: 2017-08-21&lt;br /&gt;close:  4001.74&#34;,&#34;date: 2017-08-22&lt;br /&gt;close:  4100.52&#34;,&#34;date: 2017-08-23&lt;br /&gt;close:  4151.52&#34;,&#34;date: 2017-08-24&lt;br /&gt;close:  4334.68&#34;,&#34;date: 2017-08-25&lt;br /&gt;close:  4371.60&#34;,&#34;date: 2017-08-26&lt;br /&gt;close:  4352.40&#34;,&#34;date: 2017-08-27&lt;br /&gt;close:  4382.88&#34;,&#34;date: 2017-08-28&lt;br /&gt;close:  4382.66&#34;,&#34;date: 2017-08-29&lt;br /&gt;close:  4579.02&#34;,&#34;date: 2017-08-30&lt;br /&gt;close:  4565.30&#34;,&#34;date: 2017-08-31&lt;br /&gt;close:  4703.39&#34;,&#34;date: 2017-09-01&lt;br /&gt;close:  4892.01&#34;,&#34;date: 2017-09-02&lt;br /&gt;close:  4578.77&#34;,&#34;date: 2017-09-03&lt;br /&gt;close:  4582.96&#34;,&#34;date: 2017-09-04&lt;br /&gt;close:  4236.31&#34;,&#34;date: 2017-09-05&lt;br /&gt;close:  4376.53&#34;,&#34;date: 2017-09-06&lt;br /&gt;close:  4597.12&#34;,&#34;date: 2017-09-07&lt;br /&gt;close:  4599.88&#34;,&#34;date: 2017-09-08&lt;br /&gt;close:  4228.75&#34;,&#34;date: 2017-09-09&lt;br /&gt;close:  4226.06&#34;,&#34;date: 2017-09-10&lt;br /&gt;close:  4122.94&#34;,&#34;date: 2017-09-11&lt;br /&gt;close:  4161.27&#34;,&#34;date: 2017-09-12&lt;br /&gt;close:  4130.81&#34;,&#34;date: 2017-09-13&lt;br /&gt;close:  3882.59&#34;,&#34;date: 2017-09-14&lt;br /&gt;close:  3154.95&#34;,&#34;date: 2017-09-15&lt;br /&gt;close:  3637.52&#34;,&#34;date: 2017-09-16&lt;br /&gt;close:  3625.04&#34;,&#34;date: 2017-09-17&lt;br /&gt;close:  3582.88&#34;,&#34;date: 2017-09-18&lt;br /&gt;close:  4065.20&#34;,&#34;date: 2017-09-19&lt;br /&gt;close:  3924.97&#34;,&#34;date: 2017-09-20&lt;br /&gt;close:  3905.95&#34;,&#34;date: 2017-09-21&lt;br /&gt;close:  3631.04&#34;,&#34;date: 2017-09-22&lt;br /&gt;close:  3630.70&#34;,&#34;date: 2017-09-23&lt;br /&gt;close:  3792.40&#34;,&#34;date: 2017-09-24&lt;br /&gt;close:  3682.84&#34;,&#34;date: 2017-09-25&lt;br /&gt;close:  3926.07&#34;,&#34;date: 2017-09-26&lt;br /&gt;close:  3892.35&#34;,&#34;date: 2017-09-27&lt;br /&gt;close:  4200.67&#34;,&#34;date: 2017-09-28&lt;br /&gt;close:  4174.73&#34;,&#34;date: 2017-09-29&lt;br /&gt;close:  4163.07&#34;,&#34;date: 2017-09-30&lt;br /&gt;close:  4338.71&#34;,&#34;date: 2017-10-01&lt;br /&gt;close:  4403.74&#34;,&#34;date: 2017-10-02&lt;br /&gt;close:  4409.32&#34;,&#34;date: 2017-10-03&lt;br /&gt;close:  4317.48&#34;,&#34;date: 2017-10-04&lt;br /&gt;close:  4229.36&#34;,&#34;date: 2017-10-05&lt;br /&gt;close:  4328.41&#34;,&#34;date: 2017-10-06&lt;br /&gt;close:  4370.81&#34;,&#34;date: 2017-10-07&lt;br /&gt;close:  4426.89&#34;,&#34;date: 2017-10-08&lt;br /&gt;close:  4610.48&#34;,&#34;date: 2017-10-09&lt;br /&gt;close:  4772.02&#34;,&#34;date: 2017-10-10&lt;br /&gt;close:  4781.99&#34;,&#34;date: 2017-10-11&lt;br /&gt;close:  4826.48&#34;,&#34;date: 2017-10-12&lt;br /&gt;close:  5446.91&#34;,&#34;date: 2017-10-13&lt;br /&gt;close:  5647.21&#34;,&#34;date: 2017-10-14&lt;br /&gt;close:  5831.79&#34;,&#34;date: 2017-10-15&lt;br /&gt;close:  5678.19&#34;,&#34;date: 2017-10-16&lt;br /&gt;close:  5725.59&#34;,&#34;date: 2017-10-17&lt;br /&gt;close:  5605.51&#34;,&#34;date: 2017-10-18&lt;br /&gt;close:  5590.69&#34;,&#34;date: 2017-10-19&lt;br /&gt;close:  5708.52&#34;,&#34;date: 2017-10-20&lt;br /&gt;close:  6011.45&#34;,&#34;date: 2017-10-21&lt;br /&gt;close:  6031.60&#34;,&#34;date: 2017-10-22&lt;br /&gt;close:  6008.42&#34;,&#34;date: 2017-10-23&lt;br /&gt;close:  5930.32&#34;,&#34;date: 2017-10-24&lt;br /&gt;close:  5526.64&#34;,&#34;date: 2017-10-25&lt;br /&gt;close:  5750.80&#34;,&#34;date: 2017-10-26&lt;br /&gt;close:  5904.83&#34;,&#34;date: 2017-10-27&lt;br /&gt;close:  5780.90&#34;,&#34;date: 2017-10-28&lt;br /&gt;close:  5753.09&#34;,&#34;date: 2017-10-29&lt;br /&gt;close:  6153.85&#34;,&#34;date: 2017-10-30&lt;br /&gt;close:  6130.53&#34;,&#34;date: 2017-10-31&lt;br /&gt;close:  6468.40&#34;,&#34;date: 2017-11-01&lt;br /&gt;close:  6767.31&#34;,&#34;date: 2017-11-02&lt;br /&gt;close:  7078.50&#34;,&#34;date: 2017-11-03&lt;br /&gt;close:  7207.76&#34;,&#34;date: 2017-11-04&lt;br /&gt;close:  7379.95&#34;,&#34;date: 2017-11-05&lt;br /&gt;close:  7407.41&#34;,&#34;date: 2017-11-06&lt;br /&gt;close:  7022.76&#34;,&#34;date: 2017-11-07&lt;br /&gt;close:  7144.38&#34;,&#34;date: 2017-11-08&lt;br /&gt;close:  7459.69&#34;,&#34;date: 2017-11-09&lt;br /&gt;close:  7143.58&#34;,&#34;date: 2017-11-10&lt;br /&gt;close:  6618.14&#34;,&#34;date: 2017-11-11&lt;br /&gt;close:  6357.60&#34;,&#34;date: 2017-11-12&lt;br /&gt;close:  5950.07&#34;,&#34;date: 2017-11-13&lt;br /&gt;close:  6559.49&#34;,&#34;date: 2017-11-14&lt;br /&gt;close:  6635.75&#34;,&#34;date: 2017-11-15&lt;br /&gt;close:  7315.54&#34;,&#34;date: 2017-11-16&lt;br /&gt;close:  7871.69&#34;,&#34;date: 2017-11-17&lt;br /&gt;close:  7708.99&#34;,&#34;date: 2017-11-18&lt;br /&gt;close:  7790.15&#34;,&#34;date: 2017-11-19&lt;br /&gt;close:  8036.49&#34;,&#34;date: 2017-11-20&lt;br /&gt;close:  8200.64&#34;,&#34;date: 2017-11-21&lt;br /&gt;close:  8071.26&#34;,&#34;date: 2017-11-22&lt;br /&gt;close:  8253.55&#34;,&#34;date: 2017-11-23&lt;br /&gt;close:  8038.77&#34;,&#34;date: 2017-11-24&lt;br /&gt;close:  8253.69&#34;,&#34;date: 2017-11-25&lt;br /&gt;close:  8790.92&#34;,&#34;date: 2017-11-26&lt;br /&gt;close:  9330.55&#34;,&#34;date: 2017-11-27&lt;br /&gt;close:  9818.35&#34;,&#34;date: 2017-11-28&lt;br /&gt;close: 10058.80&#34;,&#34;date: 2017-11-29&lt;br /&gt;close:  9888.61&#34;,&#34;date: 2017-11-30&lt;br /&gt;close: 10233.60&#34;,&#34;date: 2017-12-01&lt;br /&gt;close: 10975.60&#34;,&#34;date: 2017-12-02&lt;br /&gt;close: 11074.60&#34;,&#34;date: 2017-12-03&lt;br /&gt;close: 11323.20&#34;,&#34;date: 2017-12-04&lt;br /&gt;close: 11657.20&#34;,&#34;date: 2017-12-05&lt;br /&gt;close: 11916.70&#34;,&#34;date: 2017-12-06&lt;br /&gt;close: 14291.50&#34;,&#34;date: 2017-12-07&lt;br /&gt;close: 17899.70&#34;,&#34;date: 2017-12-08&lt;br /&gt;close: 16569.40&#34;,&#34;date: 2017-12-09&lt;br /&gt;close: 15178.20&#34;,&#34;date: 2017-12-10&lt;br /&gt;close: 15455.40&#34;,&#34;date: 2017-12-11&lt;br /&gt;close: 16936.80&#34;,&#34;date: 2017-12-12&lt;br /&gt;close: 17415.40&#34;,&#34;date: 2017-12-13&lt;br /&gt;close: 16408.20&#34;,&#34;date: 2017-12-14&lt;br /&gt;close: 16564.00&#34;,&#34;date: 2017-12-15&lt;br /&gt;close: 17706.90&#34;,&#34;date: 2017-12-16&lt;br /&gt;close: 19497.40&#34;,&#34;date: 2017-12-17&lt;br /&gt;close: 19140.80&#34;,&#34;date: 2017-12-18&lt;br /&gt;close: 19114.20&#34;,&#34;date: 2017-12-19&lt;br /&gt;close: 17776.70&#34;,&#34;date: 2017-12-20&lt;br /&gt;close: 16624.60&#34;,&#34;date: 2017-12-21&lt;br /&gt;close: 15802.90&#34;,&#34;date: 2017-12-22&lt;br /&gt;close: 13831.80&#34;,&#34;date: 2017-12-23&lt;br /&gt;close: 14699.20&#34;,&#34;date: 2017-12-24&lt;br /&gt;close: 13925.80&#34;,&#34;date: 2017-12-25&lt;br /&gt;close: 14026.60&#34;,&#34;date: 2017-12-26&lt;br /&gt;close: 16099.80&#34;,&#34;date: 2017-12-27&lt;br /&gt;close: 15838.50&#34;,&#34;date: 2017-12-28&lt;br /&gt;close: 14606.50&#34;,&#34;date: 2017-12-29&lt;br /&gt;close: 14656.20&#34;,&#34;date: 2017-12-30&lt;br /&gt;close: 12952.20&#34;,&#34;date: 2017-12-31&lt;br /&gt;close: 14156.40&#34;,&#34;date: 2018-01-01&lt;br /&gt;close: 13657.20&#34;,&#34;date: 2018-01-02&lt;br /&gt;close: 14982.10&#34;,&#34;date: 2018-01-03&lt;br /&gt;close: 15201.00&#34;,&#34;date: 2018-01-04&lt;br /&gt;close: 15599.20&#34;,&#34;date: 2018-01-05&lt;br /&gt;close: 17429.50&#34;,&#34;date: 2018-01-06&lt;br /&gt;close: 17527.00&#34;,&#34;date: 2018-01-07&lt;br /&gt;close: 16477.60&#34;,&#34;date: 2018-01-08&lt;br /&gt;close: 15170.10&#34;,&#34;date: 2018-01-09&lt;br /&gt;close: 14595.40&#34;,&#34;date: 2018-01-10&lt;br /&gt;close: 14973.30&#34;,&#34;date: 2018-01-11&lt;br /&gt;close: 13405.80&#34;,&#34;date: 2018-01-12&lt;br /&gt;close: 13980.60&#34;,&#34;date: 2018-01-13&lt;br /&gt;close: 14360.20&#34;,&#34;date: 2018-01-14&lt;br /&gt;close: 13772.00&#34;,&#34;date: 2018-01-15&lt;br /&gt;close: 13819.80&#34;,&#34;date: 2018-01-16&lt;br /&gt;close: 11490.50&#34;,&#34;date: 2018-01-17&lt;br /&gt;close: 11188.60&#34;,&#34;date: 2018-01-18&lt;br /&gt;close: 11474.90&#34;,&#34;date: 2018-01-19&lt;br /&gt;close: 11607.40&#34;,&#34;date: 2018-01-20&lt;br /&gt;close: 12899.20&#34;,&#34;date: 2018-01-21&lt;br /&gt;close: 11600.10&#34;,&#34;date: 2018-01-22&lt;br /&gt;close: 10931.40&#34;,&#34;date: 2018-01-23&lt;br /&gt;close: 10868.40&#34;,&#34;date: 2018-01-24&lt;br /&gt;close: 11359.40&#34;,&#34;date: 2018-01-25&lt;br /&gt;close: 11259.40&#34;,&#34;date: 2018-01-26&lt;br /&gt;close: 11171.40&#34;,&#34;date: 2018-01-27&lt;br /&gt;close: 11440.70&#34;,&#34;date: 2018-01-28&lt;br /&gt;close: 11786.30&#34;,&#34;date: 2018-01-29&lt;br /&gt;close: 11296.40&#34;,&#34;date: 2018-01-30&lt;br /&gt;close: 10106.30&#34;,&#34;date: 2018-01-31&lt;br /&gt;close: 10221.10&#34;,&#34;date: 2018-02-01&lt;br /&gt;close:  9170.54&#34;,&#34;date: 2018-02-02&lt;br /&gt;close:  8830.75&#34;,&#34;date: 2018-02-03&lt;br /&gt;close:  9174.91&#34;,&#34;date: 2018-02-04&lt;br /&gt;close:  8277.01&#34;,&#34;date: 2018-02-05&lt;br /&gt;close:  6955.27&#34;,&#34;date: 2018-02-06&lt;br /&gt;close:  7754.00&#34;,&#34;date: 2018-02-07&lt;br /&gt;close:  7621.30&#34;,&#34;date: 2018-02-08&lt;br /&gt;close:  8265.59&#34;,&#34;date: 2018-02-09&lt;br /&gt;close:  8736.98&#34;,&#34;date: 2018-02-10&lt;br /&gt;close:  8621.90&#34;,&#34;date: 2018-02-11&lt;br /&gt;close:  8129.97&#34;,&#34;date: 2018-02-12&lt;br /&gt;close:  8926.57&#34;,&#34;date: 2018-02-13&lt;br /&gt;close:  8598.31&#34;,&#34;date: 2018-02-14&lt;br /&gt;close:  9494.63&#34;,&#34;date: 2018-02-15&lt;br /&gt;close: 10166.40&#34;,&#34;date: 2018-02-16&lt;br /&gt;close: 10233.90&#34;,&#34;date: 2018-02-17&lt;br /&gt;close: 11112.70&#34;,&#34;date: 2018-02-18&lt;br /&gt;close: 10551.80&#34;,&#34;date: 2018-02-19&lt;br /&gt;close: 11225.30&#34;,&#34;date: 2018-02-20&lt;br /&gt;close: 11403.70&#34;,&#34;date: 2018-02-21&lt;br /&gt;close: 10690.40&#34;,&#34;date: 2018-02-22&lt;br /&gt;close: 10005.00&#34;,&#34;date: 2018-02-23&lt;br /&gt;close: 10301.10&#34;,&#34;date: 2018-02-24&lt;br /&gt;close:  9813.07&#34;,&#34;date: 2018-02-25&lt;br /&gt;close:  9664.73&#34;,&#34;date: 2018-02-26&lt;br /&gt;close: 10366.70&#34;,&#34;date: 2018-02-27&lt;br /&gt;close: 10725.60&#34;,&#34;date: 2018-02-28&lt;br /&gt;close: 10397.90&#34;,&#34;date: 2018-03-01&lt;br /&gt;close: 10951.00&#34;,&#34;date: 2018-03-02&lt;br /&gt;close: 11086.40&#34;,&#34;date: 2018-03-03&lt;br /&gt;close: 11489.70&#34;,&#34;date: 2018-03-04&lt;br /&gt;close: 11512.60&#34;,&#34;date: 2018-03-05&lt;br /&gt;close: 11573.30&#34;,&#34;date: 2018-03-06&lt;br /&gt;close: 10779.90&#34;,&#34;date: 2018-03-07&lt;br /&gt;close:  9965.57&#34;,&#34;date: 2018-03-08&lt;br /&gt;close:  9395.01&#34;,&#34;date: 2018-03-09&lt;br /&gt;close:  9337.55&#34;,&#34;date: 2018-03-10&lt;br /&gt;close:  8866.00&#34;,&#34;date: 2018-03-11&lt;br /&gt;close:  9578.63&#34;,&#34;date: 2018-03-12&lt;br /&gt;close:  9205.12&#34;,&#34;date: 2018-03-13&lt;br /&gt;close:  9194.85&#34;,&#34;date: 2018-03-14&lt;br /&gt;close:  8269.81&#34;,&#34;date: 2018-03-15&lt;br /&gt;close:  8300.86&#34;,&#34;date: 2018-03-16&lt;br /&gt;close:  8338.35&#34;,&#34;date: 2018-03-17&lt;br /&gt;close:  7916.88&#34;,&#34;date: 2018-03-18&lt;br /&gt;close:  8223.68&#34;,&#34;date: 2018-03-19&lt;br /&gt;close:  8630.65&#34;,&#34;date: 2018-03-20&lt;br /&gt;close:  8913.47&#34;,&#34;date: 2018-03-21&lt;br /&gt;close:  8929.28&#34;,&#34;date: 2018-03-22&lt;br /&gt;close:  8728.47&#34;,&#34;date: 2018-03-23&lt;br /&gt;close:  8879.62&#34;,&#34;date: 2018-03-24&lt;br /&gt;close:  8668.12&#34;,&#34;date: 2018-03-25&lt;br /&gt;close:  8495.78&#34;,&#34;date: 2018-03-26&lt;br /&gt;close:  8209.40&#34;,&#34;date: 2018-03-27&lt;br /&gt;close:  7833.04&#34;,&#34;date: 2018-03-28&lt;br /&gt;close:  7954.48&#34;,&#34;date: 2018-03-29&lt;br /&gt;close:  7165.70&#34;,&#34;date: 2018-03-30&lt;br /&gt;close:  6890.52&#34;,&#34;date: 2018-03-31&lt;br /&gt;close:  6973.53&#34;,&#34;date: 2018-04-01&lt;br /&gt;close:  6844.23&#34;,&#34;date: 2018-04-02&lt;br /&gt;close:  7083.80&#34;,&#34;date: 2018-04-03&lt;br /&gt;close:  7456.11&#34;,&#34;date: 2018-04-04&lt;br /&gt;close:  6853.84&#34;,&#34;date: 2018-04-05&lt;br /&gt;close:  6811.47&#34;,&#34;date: 2018-04-06&lt;br /&gt;close:  6636.32&#34;,&#34;date: 2018-04-07&lt;br /&gt;close:  6911.09&#34;,&#34;date: 2018-04-08&lt;br /&gt;close:  7023.52&#34;,&#34;date: 2018-04-09&lt;br /&gt;close:  6770.73&#34;,&#34;date: 2018-04-10&lt;br /&gt;close:  6834.76&#34;,&#34;date: 2018-04-11&lt;br /&gt;close:  6968.32&#34;,&#34;date: 2018-04-12&lt;br /&gt;close:  7889.25&#34;,&#34;date: 2018-04-13&lt;br /&gt;close:  7895.96&#34;,&#34;date: 2018-04-14&lt;br /&gt;close:  7986.24&#34;,&#34;date: 2018-04-15&lt;br /&gt;close:  8329.11&#34;,&#34;date: 2018-04-16&lt;br /&gt;close:  8058.67&#34;,&#34;date: 2018-04-17&lt;br /&gt;close:  7902.09&#34;,&#34;date: 2018-04-18&lt;br /&gt;close:  8163.42&#34;,&#34;date: 2018-04-19&lt;br /&gt;close:  8294.31&#34;,&#34;date: 2018-04-20&lt;br /&gt;close:  8845.83&#34;,&#34;date: 2018-04-21&lt;br /&gt;close:  8895.58&#34;,&#34;date: 2018-04-22&lt;br /&gt;close:  8802.46&#34;,&#34;date: 2018-04-23&lt;br /&gt;close:  8930.88&#34;,&#34;date: 2018-04-24&lt;br /&gt;close:  9697.50&#34;,&#34;date: 2018-04-25&lt;br /&gt;close:  8845.74&#34;,&#34;date: 2018-04-26&lt;br /&gt;close:  9281.51&#34;,&#34;date: 2018-04-27&lt;br /&gt;close:  8987.05&#34;,&#34;date: 2018-04-28&lt;br /&gt;close:  9348.48&#34;,&#34;date: 2018-04-29&lt;br /&gt;close:  9419.08&#34;,&#34;date: 2018-04-30&lt;br /&gt;close:  9240.55&#34;,&#34;date: 2018-05-01&lt;br /&gt;close:  9119.01&#34;,&#34;date: 2018-05-02&lt;br /&gt;close:  9235.92&#34;,&#34;date: 2018-05-03&lt;br /&gt;close:  9743.86&#34;,&#34;date: 2018-05-04&lt;br /&gt;close:  9700.76&#34;,&#34;date: 2018-05-05&lt;br /&gt;close:  9858.15&#34;,&#34;date: 2018-05-06&lt;br /&gt;close:  9654.80&#34;,&#34;date: 2018-05-07&lt;br /&gt;close:  9373.01&#34;,&#34;date: 2018-05-08&lt;br /&gt;close:  9234.82&#34;,&#34;date: 2018-05-09&lt;br /&gt;close:  9325.18&#34;,&#34;date: 2018-05-10&lt;br /&gt;close:  9043.94&#34;,&#34;date: 2018-05-11&lt;br /&gt;close:  8441.49&#34;,&#34;date: 2018-05-12&lt;br /&gt;close:  8504.89&#34;,&#34;date: 2018-05-13&lt;br /&gt;close:  8723.94&#34;,&#34;date: 2018-05-14&lt;br /&gt;close:  8716.79&#34;,&#34;date: 2018-05-15&lt;br /&gt;close:  8510.38&#34;,&#34;date: 2018-05-16&lt;br /&gt;close:  8368.83&#34;,&#34;date: 2018-05-17&lt;br /&gt;close:  8094.32&#34;,&#34;date: 2018-05-18&lt;br /&gt;close:  8250.97&#34;,&#34;date: 2018-05-19&lt;br /&gt;close:  8247.18&#34;,&#34;date: 2018-05-20&lt;br /&gt;close:  8513.25&#34;,&#34;date: 2018-05-21&lt;br /&gt;close:  8418.99&#34;,&#34;date: 2018-05-22&lt;br /&gt;close:  8041.78&#34;,&#34;date: 2018-05-23&lt;br /&gt;close:  7557.82&#34;,&#34;date: 2018-05-24&lt;br /&gt;close:  7587.34&#34;,&#34;date: 2018-05-25&lt;br /&gt;close:  7480.14&#34;,&#34;date: 2018-05-26&lt;br /&gt;close:  7355.88&#34;,&#34;date: 2018-05-27&lt;br /&gt;close:  7368.22&#34;,&#34;date: 2018-05-28&lt;br /&gt;close:  7135.99&#34;,&#34;date: 2018-05-29&lt;br /&gt;close:  7472.59&#34;,&#34;date: 2018-05-30&lt;br /&gt;close:  7406.52&#34;,&#34;date: 2018-05-31&lt;br /&gt;close:  7494.17&#34;,&#34;date: 2018-06-01&lt;br /&gt;close:  7541.45&#34;,&#34;date: 2018-06-02&lt;br /&gt;close:  7643.45&#34;,&#34;date: 2018-06-03&lt;br /&gt;close:  7720.25&#34;,&#34;date: 2018-06-04&lt;br /&gt;close:  7514.47&#34;,&#34;date: 2018-06-05&lt;br /&gt;close:  7633.76&#34;,&#34;date: 2018-06-06&lt;br /&gt;close:  7653.98&#34;,&#34;date: 2018-06-07&lt;br /&gt;close:  7678.24&#34;,&#34;date: 2018-06-08&lt;br /&gt;close:  7624.92&#34;,&#34;date: 2018-06-09&lt;br /&gt;close:  7531.98&#34;,&#34;date: 2018-06-10&lt;br /&gt;close:  6786.02&#34;,&#34;date: 2018-06-11&lt;br /&gt;close:  6906.92&#34;,&#34;date: 2018-06-12&lt;br /&gt;close:  6582.36&#34;,&#34;date: 2018-06-13&lt;br /&gt;close:  6349.90&#34;,&#34;date: 2018-06-14&lt;br /&gt;close:  6675.35&#34;,&#34;date: 2018-06-15&lt;br /&gt;close:  6456.58&#34;,&#34;date: 2018-06-16&lt;br /&gt;close:  6550.16&#34;,&#34;date: 2018-06-17&lt;br /&gt;close:  6499.27&#34;,&#34;date: 2018-06-18&lt;br /&gt;close:  6734.82&#34;,&#34;date: 2018-06-19&lt;br /&gt;close:  6769.94&#34;,&#34;date: 2018-06-20&lt;br /&gt;close:  6776.55&#34;,&#34;date: 2018-06-21&lt;br /&gt;close:  6729.74&#34;,&#34;date: 2018-06-22&lt;br /&gt;close:  6083.69&#34;,&#34;date: 2018-06-23&lt;br /&gt;close:  6162.48&#34;,&#34;date: 2018-06-24&lt;br /&gt;close:  6173.23&#34;,&#34;date: 2018-06-25&lt;br /&gt;close:  6249.18&#34;,&#34;date: 2018-06-26&lt;br /&gt;close:  6093.67&#34;,&#34;date: 2018-06-27&lt;br /&gt;close:  6157.13&#34;,&#34;date: 2018-06-28&lt;br /&gt;close:  5903.44&#34;,&#34;date: 2018-06-29&lt;br /&gt;close:  6218.30&#34;,&#34;date: 2018-06-30&lt;br /&gt;close:  6404.00&#34;,&#34;date: 2018-07-01&lt;br /&gt;close:  6385.82&#34;,&#34;date: 2018-07-02&lt;br /&gt;close:  6614.18&#34;,&#34;date: 2018-07-03&lt;br /&gt;close:  6529.59&#34;,&#34;date: 2018-07-04&lt;br /&gt;close:  6597.55&#34;,&#34;date: 2018-07-05&lt;br /&gt;close:  6639.14&#34;,&#34;date: 2018-07-06&lt;br /&gt;close:  6673.50&#34;,&#34;date: 2018-07-07&lt;br /&gt;close:  6856.93&#34;,&#34;date: 2018-07-08&lt;br /&gt;close:  6773.88&#34;,&#34;date: 2018-07-09&lt;br /&gt;close:  6741.75&#34;,&#34;date: 2018-07-10&lt;br /&gt;close:  6329.95&#34;,&#34;date: 2018-07-11&lt;br /&gt;close:  6394.71&#34;,&#34;date: 2018-07-12&lt;br /&gt;close:  6228.81&#34;,&#34;date: 2018-07-13&lt;br /&gt;close:  6238.05&#34;,&#34;date: 2018-07-14&lt;br /&gt;close:  6276.12&#34;,&#34;date: 2018-07-15&lt;br /&gt;close:  6359.64&#34;,&#34;date: 2018-07-16&lt;br /&gt;close:  6741.75&#34;,&#34;date: 2018-07-17&lt;br /&gt;close:  7321.04&#34;,&#34;date: 2018-07-18&lt;br /&gt;close:  7370.78&#34;,&#34;date: 2018-07-19&lt;br /&gt;close:  7466.86&#34;,&#34;date: 2018-07-20&lt;br /&gt;close:  7354.13&#34;,&#34;date: 2018-07-21&lt;br /&gt;close:  7419.29&#34;,&#34;date: 2018-07-22&lt;br /&gt;close:  7418.49&#34;,&#34;date: 2018-07-23&lt;br /&gt;close:  7711.11&#34;,&#34;date: 2018-07-24&lt;br /&gt;close:  8424.27&#34;,&#34;date: 2018-07-25&lt;br /&gt;close:  8181.39&#34;,&#34;date: 2018-07-26&lt;br /&gt;close:  7951.58&#34;,&#34;date: 2018-07-27&lt;br /&gt;close:  8165.01&#34;,&#34;date: 2018-07-28&lt;br /&gt;close:  8192.15&#34;,&#34;date: 2018-07-29&lt;br /&gt;close:  8218.46&#34;,&#34;date: 2018-07-30&lt;br /&gt;close:  8180.48&#34;,&#34;date: 2018-07-31&lt;br /&gt;close:  7780.44&#34;,&#34;date: 2018-08-01&lt;br /&gt;close:  7624.91&#34;,&#34;date: 2018-08-02&lt;br /&gt;close:  7567.15&#34;,&#34;date: 2018-08-03&lt;br /&gt;close:  7434.39&#34;,&#34;date: 2018-08-04&lt;br /&gt;close:  7032.85&#34;,&#34;date: 2018-08-05&lt;br /&gt;close:  7068.48&#34;,&#34;date: 2018-08-06&lt;br /&gt;close:  6951.80&#34;,&#34;date: 2018-08-07&lt;br /&gt;close:  6753.12&#34;,&#34;date: 2018-08-08&lt;br /&gt;close:  6305.80&#34;,&#34;date: 2018-08-09&lt;br /&gt;close:  6568.23&#34;,&#34;date: 2018-08-10&lt;br /&gt;close:  6184.71&#34;,&#34;date: 2018-08-11&lt;br /&gt;close:  6295.73&#34;,&#34;date: 2018-08-12&lt;br /&gt;close:  6322.69&#34;,&#34;date: 2018-08-13&lt;br /&gt;close:  6297.57&#34;,&#34;date: 2018-08-14&lt;br /&gt;close:  6199.71&#34;,&#34;date: 2018-08-15&lt;br /&gt;close:  6308.52&#34;,&#34;date: 2018-08-16&lt;br /&gt;close:  6334.73&#34;,&#34;date: 2018-08-17&lt;br /&gt;close:  6580.63&#34;,&#34;date: 2018-08-18&lt;br /&gt;close:  6423.76&#34;,&#34;date: 2018-08-19&lt;br /&gt;close:  6506.07&#34;,&#34;date: 2018-08-20&lt;br /&gt;close:  6308.53&#34;,&#34;date: 2018-08-21&lt;br /&gt;close:  6488.76&#34;,&#34;date: 2018-08-22&lt;br /&gt;close:  6376.71&#34;,&#34;date: 2018-08-23&lt;br /&gt;close:  6534.88&#34;,&#34;date: 2018-08-24&lt;br /&gt;close:  6719.96&#34;,&#34;date: 2018-08-25&lt;br /&gt;close:  6763.19&#34;,&#34;date: 2018-08-26&lt;br /&gt;close:  6707.26&#34;,&#34;date: 2018-08-27&lt;br /&gt;close:  6884.64&#34;,&#34;date: 2018-08-28&lt;br /&gt;close:  7096.28&#34;,&#34;date: 2018-08-29&lt;br /&gt;close:  7047.16&#34;,&#34;date: 2018-08-30&lt;br /&gt;close:  6978.23&#34;,&#34;date: 2018-08-31&lt;br /&gt;close:  7037.58&#34;,&#34;date: 2018-09-01&lt;br /&gt;close:  7193.25&#34;,&#34;date: 2018-09-02&lt;br /&gt;close:  7272.72&#34;,&#34;date: 2018-09-03&lt;br /&gt;close:  7260.06&#34;,&#34;date: 2018-09-04&lt;br /&gt;close:  7361.66&#34;,&#34;date: 2018-09-05&lt;br /&gt;close:  6792.83&#34;,&#34;date: 2018-09-06&lt;br /&gt;close:  6529.17&#34;,&#34;date: 2018-09-07&lt;br /&gt;close:  6467.07&#34;,&#34;date: 2018-09-08&lt;br /&gt;close:  6225.98&#34;,&#34;date: 2018-09-09&lt;br /&gt;close:  6300.86&#34;,&#34;date: 2018-09-10&lt;br /&gt;close:  6329.70&#34;,&#34;date: 2018-09-11&lt;br /&gt;close:  6321.20&#34;,&#34;date: 2018-09-12&lt;br /&gt;close:  6351.80&#34;,&#34;date: 2018-09-13&lt;br /&gt;close:  6517.31&#34;,&#34;date: 2018-09-14&lt;br /&gt;close:  6512.71&#34;,&#34;date: 2018-09-15&lt;br /&gt;close:  6543.20&#34;,&#34;date: 2018-09-16&lt;br /&gt;close:  6517.18&#34;,&#34;date: 2018-09-17&lt;br /&gt;close:  6281.20&#34;,&#34;date: 2018-09-18&lt;br /&gt;close:  6371.30&#34;,&#34;date: 2018-09-19&lt;br /&gt;close:  6398.54&#34;,&#34;date: 2018-09-20&lt;br /&gt;close:  6519.67&#34;,&#34;date: 2018-09-21&lt;br /&gt;close:  6734.95&#34;,&#34;date: 2018-09-22&lt;br /&gt;close:  6721.98&#34;,&#34;date: 2018-09-23&lt;br /&gt;close:  6710.63&#34;,&#34;date: 2018-09-24&lt;br /&gt;close:  6595.41&#34;,&#34;date: 2018-09-25&lt;br /&gt;close:  6446.47&#34;,&#34;date: 2018-09-26&lt;br /&gt;close:  6495.00&#34;,&#34;date: 2018-09-27&lt;br /&gt;close:  6676.75&#34;,&#34;date: 2018-09-28&lt;br /&gt;close:  6644.13&#34;,&#34;date: 2018-09-29&lt;br /&gt;close:  6601.96&#34;,&#34;date: 2018-09-30&lt;br /&gt;close:  6625.56&#34;,&#34;date: 2018-10-01&lt;br /&gt;close:  6589.62&#34;,&#34;date: 2018-10-02&lt;br /&gt;close:  6556.10&#34;,&#34;date: 2018-10-03&lt;br /&gt;close:  6502.59&#34;,&#34;date: 2018-10-04&lt;br /&gt;close:  6576.69&#34;,&#34;date: 2018-10-05&lt;br /&gt;close:  6622.48&#34;,&#34;date: 2018-10-06&lt;br /&gt;close:  6588.31&#34;,&#34;date: 2018-10-07&lt;br /&gt;close:  6602.95&#34;,&#34;date: 2018-10-08&lt;br /&gt;close:  6652.23&#34;,&#34;date: 2018-10-09&lt;br /&gt;close:  6642.64&#34;,&#34;date: 2018-10-10&lt;br /&gt;close:  6585.53&#34;,&#34;date: 2018-10-11&lt;br /&gt;close:  6256.24&#34;,&#34;date: 2018-10-12&lt;br /&gt;close:  6274.58&#34;,&#34;date: 2018-10-13&lt;br /&gt;close:  6285.99&#34;,&#34;date: 2018-10-14&lt;br /&gt;close:  6290.93&#34;,&#34;date: 2018-10-15&lt;br /&gt;close:  6596.54&#34;,&#34;date: 2018-10-16&lt;br /&gt;close:  6596.11&#34;,&#34;date: 2018-10-17&lt;br /&gt;close:  6544.43&#34;,&#34;date: 2018-10-18&lt;br /&gt;close:  6476.71&#34;,&#34;date: 2018-10-19&lt;br /&gt;close:  6465.41&#34;,&#34;date: 2018-10-20&lt;br /&gt;close:  6489.19&#34;,&#34;date: 2018-10-21&lt;br /&gt;close:  6482.35&#34;,&#34;date: 2018-10-22&lt;br /&gt;close:  6487.16&#34;,&#34;date: 2018-10-23&lt;br /&gt;close:  6475.74&#34;,&#34;date: 2018-10-24&lt;br /&gt;close:  6495.84&#34;,&#34;date: 2018-10-25&lt;br /&gt;close:  6476.29&#34;,&#34;date: 2018-10-26&lt;br /&gt;close:  6474.75&#34;,&#34;date: 2018-10-27&lt;br /&gt;close:  6480.38&#34;,&#34;date: 2018-10-28&lt;br /&gt;close:  6486.39&#34;,&#34;date: 2018-10-29&lt;br /&gt;close:  6332.63&#34;,&#34;date: 2018-10-30&lt;br /&gt;close:  6334.27&#34;,&#34;date: 2018-10-31&lt;br /&gt;close:  6317.61&#34;,&#34;date: 2018-11-01&lt;br /&gt;close:  6377.78&#34;,&#34;date: 2018-11-02&lt;br /&gt;close:  6388.44&#34;,&#34;date: 2018-11-03&lt;br /&gt;close:  6361.26&#34;,&#34;date: 2018-11-04&lt;br /&gt;close:  6376.13&#34;,&#34;date: 2018-11-05&lt;br /&gt;close:  6419.66&#34;,&#34;date: 2018-11-06&lt;br /&gt;close:  6461.01&#34;,&#34;date: 2018-11-07&lt;br /&gt;close:  6530.14&#34;,&#34;date: 2018-11-08&lt;br /&gt;close:  6453.72&#34;,&#34;date: 2018-11-09&lt;br /&gt;close:  6385.62&#34;,&#34;date: 2018-11-10&lt;br /&gt;close:  6409.22&#34;,&#34;date: 2018-11-11&lt;br /&gt;close:  6411.27&#34;,&#34;date: 2018-11-12&lt;br /&gt;close:  6371.27&#34;,&#34;date: 2018-11-13&lt;br /&gt;close:  6359.49&#34;,&#34;date: 2018-11-14&lt;br /&gt;close:  5738.35&#34;,&#34;date: 2018-11-15&lt;br /&gt;close:  5648.03&#34;,&#34;date: 2018-11-16&lt;br /&gt;close:  5575.55&#34;,&#34;date: 2018-11-17&lt;br /&gt;close:  5554.33&#34;,&#34;date: 2018-11-18&lt;br /&gt;close:  5623.54&#34;,&#34;date: 2018-11-19&lt;br /&gt;close:  4871.49&#34;,&#34;date: 2018-11-20&lt;br /&gt;close:  4451.87&#34;,&#34;date: 2018-11-21&lt;br /&gt;close:  4602.17&#34;,&#34;date: 2018-11-22&lt;br /&gt;close:  4365.94&#34;,&#34;date: 2018-11-23&lt;br /&gt;close:  4347.11&#34;,&#34;date: 2018-11-24&lt;br /&gt;close:  3880.76&#34;,&#34;date: 2018-11-25&lt;br /&gt;close:  4009.97&#34;,&#34;date: 2018-11-26&lt;br /&gt;close:  3779.13&#34;,&#34;date: 2018-11-27&lt;br /&gt;close:  3820.72&#34;,&#34;date: 2018-11-28&lt;br /&gt;close:  4257.42&#34;,&#34;date: 2018-11-29&lt;br /&gt;close:  4278.85&#34;,&#34;date: 2018-11-30&lt;br /&gt;close:  4017.27&#34;,&#34;date: 2018-12-01&lt;br /&gt;close:  4214.67&#34;,&#34;date: 2018-12-02&lt;br /&gt;close:  4139.88&#34;,&#34;date: 2018-12-03&lt;br /&gt;close:  3894.13&#34;,&#34;date: 2018-12-04&lt;br /&gt;close:  3956.89&#34;,&#34;date: 2018-12-05&lt;br /&gt;close:  3753.99&#34;,&#34;date: 2018-12-06&lt;br /&gt;close:  3521.10&#34;,&#34;date: 2018-12-07&lt;br /&gt;close:  3419.94&#34;,&#34;date: 2018-12-08&lt;br /&gt;close:  3476.11&#34;,&#34;date: 2018-12-09&lt;br /&gt;close:  3614.23&#34;,&#34;date: 2018-12-10&lt;br /&gt;close:  3502.66&#34;,&#34;date: 2018-12-11&lt;br /&gt;close:  3424.59&#34;,&#34;date: 2018-12-12&lt;br /&gt;close:  3486.95&#34;,&#34;date: 2018-12-13&lt;br /&gt;close:  3313.68&#34;,&#34;date: 2018-12-14&lt;br /&gt;close:  3242.48&#34;,&#34;date: 2018-12-15&lt;br /&gt;close:  3236.76&#34;,&#34;date: 2018-12-16&lt;br /&gt;close:  3252.84&#34;,&#34;date: 2018-12-17&lt;br /&gt;close:  3545.86&#34;,&#34;date: 2018-12-18&lt;br /&gt;close:  3696.06&#34;,&#34;date: 2018-12-19&lt;br /&gt;close:  3745.95&#34;,&#34;date: 2018-12-20&lt;br /&gt;close:  4134.44&#34;,&#34;date: 2018-12-21&lt;br /&gt;close:  3896.54&#34;,&#34;date: 2018-12-22&lt;br /&gt;close:  4014.18&#34;,&#34;date: 2018-12-23&lt;br /&gt;close:  3998.98&#34;,&#34;date: 2018-12-24&lt;br /&gt;close:  4078.60&#34;,&#34;date: 2018-12-25&lt;br /&gt;close:  3815.49&#34;,&#34;date: 2018-12-26&lt;br /&gt;close:  3857.30&#34;,&#34;date: 2018-12-27&lt;br /&gt;close:  3654.83&#34;,&#34;date: 2018-12-28&lt;br /&gt;close:  3923.92&#34;,&#34;date: 2018-12-29&lt;br /&gt;close:  3820.41&#34;,&#34;date: 2018-12-30&lt;br /&gt;close:  3865.95&#34;,&#34;date: 2018-12-31&lt;br /&gt;close:  3742.70&#34;,&#34;date: 2019-01-01&lt;br /&gt;close:  3843.52&#34;,&#34;date: 2019-01-02&lt;br /&gt;close:  3943.41&#34;,&#34;date: 2019-01-03&lt;br /&gt;close:  3836.74&#34;,&#34;date: 2019-01-04&lt;br /&gt;close:  3857.72&#34;,&#34;date: 2019-01-05&lt;br /&gt;close:  3845.19&#34;,&#34;date: 2019-01-06&lt;br /&gt;close:  4076.63&#34;,&#34;date: 2019-01-07&lt;br /&gt;close:  4025.25&#34;,&#34;date: 2019-01-08&lt;br /&gt;close:  4030.85&#34;,&#34;date: 2019-01-09&lt;br /&gt;close:  4035.30&#34;,&#34;date: 2019-01-10&lt;br /&gt;close:  3678.92&#34;,&#34;date: 2019-01-11&lt;br /&gt;close:  3687.37&#34;,&#34;date: 2019-01-12&lt;br /&gt;close:  3661.30&#34;,&#34;date: 2019-01-13&lt;br /&gt;close:  3552.95&#34;,&#34;date: 2019-01-14&lt;br /&gt;close:  3706.05&#34;,&#34;date: 2019-01-15&lt;br /&gt;close:  3630.68&#34;,&#34;date: 2019-01-16&lt;br /&gt;close:  3655.01&#34;,&#34;date: 2019-01-17&lt;br /&gt;close:  3678.56&#34;,&#34;date: 2019-01-18&lt;br /&gt;close:  3657.84&#34;,&#34;date: 2019-01-19&lt;br /&gt;close:  3728.57&#34;,&#34;date: 2019-01-20&lt;br /&gt;close:  3601.01&#34;,&#34;date: 2019-01-21&lt;br /&gt;close:  3576.03&#34;,&#34;date: 2019-01-22&lt;br /&gt;close:  3604.58&#34;,&#34;date: 2019-01-23&lt;br /&gt;close:  3585.12&#34;,&#34;date: 2019-01-24&lt;br /&gt;close:  3600.87&#34;,&#34;date: 2019-01-25&lt;br /&gt;close:  3599.77&#34;,&#34;date: 2019-01-26&lt;br /&gt;close:  3602.46&#34;,&#34;date: 2019-01-27&lt;br /&gt;close:  3583.97&#34;,&#34;date: 2019-01-28&lt;br /&gt;close:  3470.45&#34;,&#34;date: 2019-01-29&lt;br /&gt;close:  3448.12&#34;,&#34;date: 2019-01-30&lt;br /&gt;close:  3486.18&#34;,&#34;date: 2019-01-31&lt;br /&gt;close:  3457.79&#34;,&#34;date: 2019-02-01&lt;br /&gt;close:  3487.95&#34;,&#34;date: 2019-02-02&lt;br /&gt;close:  3521.06&#34;,&#34;date: 2019-02-03&lt;br /&gt;close:  3464.01&#34;,&#34;date: 2019-02-04&lt;br /&gt;close:  3459.15&#34;,&#34;date: 2019-02-05&lt;br /&gt;close:  3466.36&#34;,&#34;date: 2019-02-06&lt;br /&gt;close:  3413.77&#34;,&#34;date: 2019-02-07&lt;br /&gt;close:  3399.47&#34;,&#34;date: 2019-02-08&lt;br /&gt;close:  3666.78&#34;,&#34;date: 2019-02-09&lt;br /&gt;close:  3671.20&#34;,&#34;date: 2019-02-10&lt;br /&gt;close:  3690.19&#34;,&#34;date: 2019-02-11&lt;br /&gt;close:  3648.43&#34;,&#34;date: 2019-02-12&lt;br /&gt;close:  3653.53&#34;,&#34;date: 2019-02-13&lt;br /&gt;close:  3632.07&#34;,&#34;date: 2019-02-14&lt;br /&gt;close:  3616.88&#34;,&#34;date: 2019-02-15&lt;br /&gt;close:  3620.81&#34;,&#34;date: 2019-02-16&lt;br /&gt;close:  3629.79&#34;,&#34;date: 2019-02-17&lt;br /&gt;close:  3673.84&#34;,&#34;date: 2019-02-18&lt;br /&gt;close:  3915.71&#34;,&#34;date: 2019-02-19&lt;br /&gt;close:  3947.09&#34;,&#34;date: 2019-02-20&lt;br /&gt;close:  3999.82&#34;,&#34;date: 2019-02-21&lt;br /&gt;close:  3954.12&#34;,&#34;date: 2019-02-22&lt;br /&gt;close:  4005.53&#34;,&#34;date: 2019-02-23&lt;br /&gt;close:  4142.53&#34;,&#34;date: 2019-02-24&lt;br /&gt;close:  3810.43&#34;,&#34;date: 2019-02-25&lt;br /&gt;close:  3882.70&#34;,&#34;date: 2019-02-26&lt;br /&gt;close:  3854.36&#34;,&#34;date: 2019-02-27&lt;br /&gt;close:  3851.05&#34;,&#34;date: 2019-02-28&lt;br /&gt;close:  3854.79&#34;,&#34;date: 2019-03-01&lt;br /&gt;close:  3859.58&#34;,&#34;date: 2019-03-02&lt;br /&gt;close:  3864.42&#34;,&#34;date: 2019-03-03&lt;br /&gt;close:  3847.18&#34;,&#34;date: 2019-03-04&lt;br /&gt;close:  3761.56&#34;,&#34;date: 2019-03-05&lt;br /&gt;close:  3896.38&#34;,&#34;date: 2019-03-06&lt;br /&gt;close:  3903.94&#34;,&#34;date: 2019-03-07&lt;br /&gt;close:  3911.48&#34;,&#34;date: 2019-03-08&lt;br /&gt;close:  3901.13&#34;,&#34;date: 2019-03-09&lt;br /&gt;close:  3963.31&#34;,&#34;date: 2019-03-10&lt;br /&gt;close:  3951.60&#34;,&#34;date: 2019-03-11&lt;br /&gt;close:  3905.23&#34;,&#34;date: 2019-03-12&lt;br /&gt;close:  3909.16&#34;,&#34;date: 2019-03-13&lt;br /&gt;close:  3906.72&#34;,&#34;date: 2019-03-14&lt;br /&gt;close:  3924.37&#34;,&#34;date: 2019-03-15&lt;br /&gt;close:  3960.91&#34;,&#34;date: 2019-03-16&lt;br /&gt;close:  4048.73&#34;,&#34;date: 2019-03-17&lt;br /&gt;close:  4025.23&#34;,&#34;date: 2019-03-18&lt;br /&gt;close:  4032.51&#34;,&#34;date: 2019-03-19&lt;br /&gt;close:  4071.19&#34;,&#34;date: 2019-03-20&lt;br /&gt;close:  4087.48&#34;,&#34;date: 2019-03-21&lt;br /&gt;close:  4029.33&#34;,&#34;date: 2019-03-22&lt;br /&gt;close:  4023.97&#34;,&#34;date: 2019-03-23&lt;br /&gt;close:  4035.83&#34;,&#34;date: 2019-03-24&lt;br /&gt;close:  4022.17&#34;,&#34;date: 2019-03-25&lt;br /&gt;close:  3963.07&#34;,&#34;date: 2019-03-26&lt;br /&gt;close:  3985.08&#34;,&#34;date: 2019-03-27&lt;br /&gt;close:  4087.07&#34;,&#34;date: 2019-03-28&lt;br /&gt;close:  4069.11&#34;,&#34;date: 2019-03-29&lt;br /&gt;close:  4098.37&#34;,&#34;date: 2019-03-30&lt;br /&gt;close:  4106.66&#34;,&#34;date: 2019-03-31&lt;br /&gt;close:  4105.40&#34;,&#34;date: 2019-04-01&lt;br /&gt;close:  4158.18&#34;,&#34;date: 2019-04-02&lt;br /&gt;close:  4879.88&#34;,&#34;date: 2019-04-03&lt;br /&gt;close:  4973.02&#34;,&#34;date: 2019-04-04&lt;br /&gt;close:  4922.80&#34;,&#34;date: 2019-04-05&lt;br /&gt;close:  5036.68&#34;,&#34;date: 2019-04-06&lt;br /&gt;close:  5059.82&#34;,&#34;date: 2019-04-07&lt;br /&gt;close:  5198.90&#34;,&#34;date: 2019-04-08&lt;br /&gt;close:  5289.77&#34;,&#34;date: 2019-04-09&lt;br /&gt;close:  5204.96&#34;,&#34;date: 2019-04-10&lt;br /&gt;close:  5324.55&#34;,&#34;date: 2019-04-11&lt;br /&gt;close:  5064.49&#34;,&#34;date: 2019-04-12&lt;br /&gt;close:  5089.54&#34;,&#34;date: 2019-04-13&lt;br /&gt;close:  5096.59&#34;,&#34;date: 2019-04-14&lt;br /&gt;close:  5167.72&#34;,&#34;date: 2019-04-15&lt;br /&gt;close:  5067.11&#34;,&#34;date: 2019-04-16&lt;br /&gt;close:  5235.56&#34;,&#34;date: 2019-04-17&lt;br /&gt;close:  5251.94&#34;,&#34;date: 2019-04-18&lt;br /&gt;close:  5298.39&#34;,&#34;date: 2019-04-19&lt;br /&gt;close:  5303.81&#34;,&#34;date: 2019-04-20&lt;br /&gt;close:  5337.89&#34;,&#34;date: 2019-04-21&lt;br /&gt;close:  5314.53&#34;,&#34;date: 2019-04-22&lt;br /&gt;close:  5399.37&#34;,&#34;date: 2019-04-23&lt;br /&gt;close:  5572.36&#34;,&#34;date: 2019-04-24&lt;br /&gt;close:  5464.87&#34;,&#34;date: 2019-04-25&lt;br /&gt;close:  5210.52&#34;,&#34;date: 2019-04-26&lt;br /&gt;close:  5279.35&#34;,&#34;date: 2019-04-27&lt;br /&gt;close:  5268.29&#34;,&#34;date: 2019-04-28&lt;br /&gt;close:  5285.14&#34;,&#34;date: 2019-04-29&lt;br /&gt;close:  5247.35&#34;,&#34;date: 2019-04-30&lt;br /&gt;close:  5350.73&#34;,&#34;date: 2019-05-01&lt;br /&gt;close:  5402.70&#34;,&#34;date: 2019-05-02&lt;br /&gt;close:  5505.28&#34;,&#34;date: 2019-05-03&lt;br /&gt;close:  5768.29&#34;,&#34;date: 2019-05-04&lt;br /&gt;close:  5831.17&#34;,&#34;date: 2019-05-05&lt;br /&gt;close:  5795.71&#34;,&#34;date: 2019-05-06&lt;br /&gt;close:  5746.81&#34;,&#34;date: 2019-05-07&lt;br /&gt;close:  5829.50&#34;,&#34;date: 2019-05-08&lt;br /&gt;close:  5982.46&#34;,&#34;date: 2019-05-09&lt;br /&gt;close:  6174.53&#34;,&#34;date: 2019-05-10&lt;br /&gt;close:  6378.85&#34;,&#34;date: 2019-05-11&lt;br /&gt;close:  7204.77&#34;,&#34;date: 2019-05-12&lt;br /&gt;close:  6972.37&#34;,&#34;date: 2019-05-13&lt;br /&gt;close:  7814.92&#34;,&#34;date: 2019-05-14&lt;br /&gt;close:  7994.42&#34;,&#34;date: 2019-05-15&lt;br /&gt;close:  8205.17&#34;,&#34;date: 2019-05-16&lt;br /&gt;close:  7884.91&#34;,&#34;date: 2019-05-17&lt;br /&gt;close:  7343.90&#34;,&#34;date: 2019-05-18&lt;br /&gt;close:  7271.21&#34;,&#34;date: 2019-05-19&lt;br /&gt;close:  8197.69&#34;,&#34;date: 2019-05-20&lt;br /&gt;close:  7978.31&#34;,&#34;date: 2019-05-21&lt;br /&gt;close:  7963.33&#34;,&#34;date: 2019-05-22&lt;br /&gt;close:  7680.07&#34;,&#34;date: 2019-05-23&lt;br /&gt;close:  7881.85&#34;,&#34;date: 2019-05-24&lt;br /&gt;close:  7987.37&#34;,&#34;date: 2019-05-25&lt;br /&gt;close:  8052.54&#34;,&#34;date: 2019-05-26&lt;br /&gt;close:  8673.22&#34;,&#34;date: 2019-05-27&lt;br /&gt;close:  8805.78&#34;,&#34;date: 2019-05-28&lt;br /&gt;close:  8719.96&#34;,&#34;date: 2019-05-29&lt;br /&gt;close:  8659.49&#34;,&#34;date: 2019-05-30&lt;br /&gt;close:  8319.47&#34;,&#34;date: 2019-05-31&lt;br /&gt;close:  8574.50&#34;,&#34;date: 2019-06-01&lt;br /&gt;close:  8564.02&#34;,&#34;date: 2019-06-02&lt;br /&gt;close:  8742.96&#34;,&#34;date: 2019-06-03&lt;br /&gt;close:  8208.99&#34;,&#34;date: 2019-06-04&lt;br /&gt;close:  7707.77&#34;,&#34;date: 2019-06-05&lt;br /&gt;close:  7824.23&#34;,&#34;date: 2019-06-06&lt;br /&gt;close:  7822.02&#34;,&#34;date: 2019-06-07&lt;br /&gt;close:  8043.95&#34;,&#34;date: 2019-06-08&lt;br /&gt;close:  7954.13&#34;,&#34;date: 2019-06-09&lt;br /&gt;close:  7688.08&#34;,&#34;date: 2019-06-10&lt;br /&gt;close:  8000.33&#34;,&#34;date: 2019-06-11&lt;br /&gt;close:  7927.71&#34;,&#34;date: 2019-06-12&lt;br /&gt;close:  8145.86&#34;,&#34;date: 2019-06-13&lt;br /&gt;close:  8230.92&#34;,&#34;date: 2019-06-14&lt;br /&gt;close:  8693.83&#34;,&#34;date: 2019-06-15&lt;br /&gt;close:  8838.38&#34;,&#34;date: 2019-06-16&lt;br /&gt;close:  8994.49&#34;,&#34;date: 2019-06-17&lt;br /&gt;close:  9320.35&#34;,&#34;date: 2019-06-18&lt;br /&gt;close:  9081.76&#34;,&#34;date: 2019-06-19&lt;br /&gt;close:  9273.52&#34;,&#34;date: 2019-06-20&lt;br /&gt;close:  9527.16&#34;,&#34;date: 2019-06-21&lt;br /&gt;close: 10144.56&#34;,&#34;date: 2019-06-22&lt;br /&gt;close: 10701.69&#34;,&#34;date: 2019-06-23&lt;br /&gt;close: 10855.37&#34;,&#34;date: 2019-06-24&lt;br /&gt;close: 11011.10&#34;,&#34;date: 2019-06-25&lt;br /&gt;close: 11790.92&#34;,&#34;date: 2019-06-26&lt;br /&gt;close: 13016.23&#34;,&#34;date: 2019-06-27&lt;br /&gt;close: 11182.81&#34;,&#34;date: 2019-06-28&lt;br /&gt;close: 12407.33&#34;,&#34;date: 2019-06-29&lt;br /&gt;close: 11959.37&#34;,&#34;date: 2019-06-30&lt;br /&gt;close: 10817.16&#34;,&#34;date: 2019-07-01&lt;br /&gt;close: 10583.13&#34;,&#34;date: 2019-07-02&lt;br /&gt;close: 10801.68&#34;,&#34;date: 2019-07-03&lt;br /&gt;close: 11961.27&#34;,&#34;date: 2019-07-04&lt;br /&gt;close: 11215.44&#34;,&#34;date: 2019-07-05&lt;br /&gt;close: 10978.46&#34;,&#34;date: 2019-07-06&lt;br /&gt;close: 11208.55&#34;,&#34;date: 2019-07-07&lt;br /&gt;close: 11450.85&#34;,&#34;date: 2019-07-08&lt;br /&gt;close: 12285.96&#34;,&#34;date: 2019-07-09&lt;br /&gt;close: 12573.81&#34;,&#34;date: 2019-07-10&lt;br /&gt;close: 12156.51&#34;,&#34;date: 2019-07-11&lt;br /&gt;close: 11358.66&#34;,&#34;date: 2019-07-12&lt;br /&gt;close: 11815.99&#34;,&#34;date: 2019-07-13&lt;br /&gt;close: 11392.38&#34;,&#34;date: 2019-07-14&lt;br /&gt;close: 10256.06&#34;,&#34;date: 2019-07-15&lt;br /&gt;close: 10895.09&#34;,&#34;date: 2019-07-16&lt;br /&gt;close:  9477.64&#34;,&#34;date: 2019-07-17&lt;br /&gt;close:  9693.80&#34;,&#34;date: 2019-07-18&lt;br /&gt;close: 10666.48&#34;,&#34;date: 2019-07-19&lt;br /&gt;close: 10530.73&#34;,&#34;date: 2019-07-20&lt;br /&gt;close: 10767.14&#34;,&#34;date: 2019-07-21&lt;br /&gt;close: 10599.11&#34;,&#34;date: 2019-07-22&lt;br /&gt;close: 10343.11&#34;,&#34;date: 2019-07-23&lt;br /&gt;close:  9900.77&#34;,&#34;date: 2019-07-24&lt;br /&gt;close:  9811.93&#34;,&#34;date: 2019-07-25&lt;br /&gt;close:  9911.84&#34;,&#34;date: 2019-07-26&lt;br /&gt;close:  9870.30&#34;,&#34;date: 2019-07-27&lt;br /&gt;close:  9477.68&#34;,&#34;date: 2019-07-28&lt;br /&gt;close:  9552.86&#34;,&#34;date: 2019-07-29&lt;br /&gt;close:  9519.15&#34;,&#34;date: 2019-07-30&lt;br /&gt;close:  9607.42&#34;,&#34;date: 2019-07-31&lt;br /&gt;close: 10085.63&#34;,&#34;date: 2019-08-01&lt;br /&gt;close: 10399.67&#34;,&#34;date: 2019-08-02&lt;br /&gt;close: 10518.17&#34;,&#34;date: 2019-08-03&lt;br /&gt;close: 10821.73&#34;,&#34;date: 2019-08-04&lt;br /&gt;close: 10970.18&#34;,&#34;date: 2019-08-05&lt;br /&gt;close: 11805.65&#34;,&#34;date: 2019-08-06&lt;br /&gt;close: 11478.17&#34;,&#34;date: 2019-08-07&lt;br /&gt;close: 11941.97&#34;,&#34;date: 2019-08-08&lt;br /&gt;close: 11966.41&#34;,&#34;date: 2019-08-09&lt;br /&gt;close: 11862.94&#34;,&#34;date: 2019-08-10&lt;br /&gt;close: 11354.02&#34;,&#34;date: 2019-08-11&lt;br /&gt;close: 11523.58&#34;,&#34;date: 2019-08-12&lt;br /&gt;close: 11382.62&#34;,&#34;date: 2019-08-13&lt;br /&gt;close: 10895.83&#34;,&#34;date: 2019-08-14&lt;br /&gt;close: 10051.70&#34;,&#34;date: 2019-08-15&lt;br /&gt;close: 10311.55&#34;,&#34;date: 2019-08-16&lt;br /&gt;close: 10374.34&#34;,&#34;date: 2019-08-17&lt;br /&gt;close: 10231.74&#34;,&#34;date: 2019-08-18&lt;br /&gt;close: 10345.81&#34;,&#34;date: 2019-08-19&lt;br /&gt;close: 10916.05&#34;,&#34;date: 2019-08-20&lt;br /&gt;close: 10763.23&#34;,&#34;date: 2019-08-21&lt;br /&gt;close: 10138.05&#34;,&#34;date: 2019-08-22&lt;br /&gt;close: 10131.06&#34;,&#34;date: 2019-08-23&lt;br /&gt;close: 10407.97&#34;,&#34;date: 2019-08-24&lt;br /&gt;close: 10159.96&#34;,&#34;date: 2019-08-25&lt;br /&gt;close: 10138.52&#34;,&#34;date: 2019-08-26&lt;br /&gt;close: 10370.82&#34;,&#34;date: 2019-08-27&lt;br /&gt;close: 10185.50&#34;,&#34;date: 2019-08-28&lt;br /&gt;close:  9754.42&#34;,&#34;date: 2019-08-29&lt;br /&gt;close:  9510.20&#34;,&#34;date: 2019-08-30&lt;br /&gt;close:  9598.17&#34;,&#34;date: 2019-08-31&lt;br /&gt;close:  9630.66&#34;,&#34;date: 2019-09-01&lt;br /&gt;close:  9757.97&#34;,&#34;date: 2019-09-02&lt;br /&gt;close: 10346.76&#34;,&#34;date: 2019-09-03&lt;br /&gt;close: 10623.54&#34;,&#34;date: 2019-09-04&lt;br /&gt;close: 10594.49&#34;,&#34;date: 2019-09-05&lt;br /&gt;close: 10575.53&#34;,&#34;date: 2019-09-06&lt;br /&gt;close: 10353.30&#34;,&#34;date: 2019-09-07&lt;br /&gt;close: 10517.25&#34;,&#34;date: 2019-09-08&lt;br /&gt;close: 10441.28&#34;,&#34;date: 2019-09-09&lt;br /&gt;close: 10334.97&#34;,&#34;date: 2019-09-10&lt;br /&gt;close: 10115.98&#34;,&#34;date: 2019-09-11&lt;br /&gt;close: 10178.37&#34;,&#34;date: 2019-09-12&lt;br /&gt;close: 10410.13&#34;,&#34;date: 2019-09-13&lt;br /&gt;close: 10360.55&#34;,&#34;date: 2019-09-14&lt;br /&gt;close: 10358.05&#34;,&#34;date: 2019-09-15&lt;br /&gt;close: 10347.71&#34;,&#34;date: 2019-09-16&lt;br /&gt;close: 10276.79&#34;,&#34;date: 2019-09-17&lt;br /&gt;close: 10241.27&#34;,&#34;date: 2019-09-18&lt;br /&gt;close: 10198.25&#34;,&#34;date: 2019-09-19&lt;br /&gt;close: 10266.41&#34;,&#34;date: 2019-09-20&lt;br /&gt;close: 10181.64&#34;,&#34;date: 2019-09-21&lt;br /&gt;close: 10019.72&#34;,&#34;date: 2019-09-22&lt;br /&gt;close: 10070.39&#34;,&#34;date: 2019-09-23&lt;br /&gt;close:  9729.32&#34;,&#34;date: 2019-09-24&lt;br /&gt;close:  8620.57&#34;,&#34;date: 2019-09-25&lt;br /&gt;close:  8486.99&#34;,&#34;date: 2019-09-26&lt;br /&gt;close:  8118.97&#34;,&#34;date: 2019-09-27&lt;br /&gt;close:  8251.85&#34;,&#34;date: 2019-09-28&lt;br /&gt;close:  8245.92&#34;,&#34;date: 2019-09-29&lt;br /&gt;close:  8104.19&#34;,&#34;date: 2019-09-30&lt;br /&gt;close:  8293.87&#34;,&#34;date: 2019-10-01&lt;br /&gt;close:  8343.28&#34;,&#34;date: 2019-10-02&lt;br /&gt;close:  8393.04&#34;,&#34;date: 2019-10-03&lt;br /&gt;close:  8259.99&#34;,&#34;date: 2019-10-04&lt;br /&gt;close:  8205.94&#34;,&#34;date: 2019-10-05&lt;br /&gt;close:  8151.50&#34;,&#34;date: 2019-10-06&lt;br /&gt;close:  7988.16&#34;,&#34;date: 2019-10-07&lt;br /&gt;close:  8245.62&#34;,&#34;date: 2019-10-08&lt;br /&gt;close:  8228.78&#34;,&#34;date: 2019-10-09&lt;br /&gt;close:  8595.74&#34;,&#34;date: 2019-10-10&lt;br /&gt;close:  8586.47&#34;,&#34;date: 2019-10-11&lt;br /&gt;close:  8321.76&#34;,&#34;date: 2019-10-12&lt;br /&gt;close:  8336.56&#34;,&#34;date: 2019-10-13&lt;br /&gt;close:  8321.01&#34;,&#34;date: 2019-10-14&lt;br /&gt;close:  8374.69&#34;,&#34;date: 2019-10-15&lt;br /&gt;close:  8205.37&#34;,&#34;date: 2019-10-16&lt;br /&gt;close:  8047.53&#34;,&#34;date: 2019-10-17&lt;br /&gt;close:  8103.91&#34;,&#34;date: 2019-10-18&lt;br /&gt;close:  7973.21&#34;,&#34;date: 2019-10-19&lt;br /&gt;close:  7988.56&#34;,&#34;date: 2019-10-20&lt;br /&gt;close:  8222.08&#34;,&#34;date: 2019-10-21&lt;br /&gt;close:  8243.72&#34;,&#34;date: 2019-10-22&lt;br /&gt;close:  8078.20&#34;,&#34;date: 2019-10-23&lt;br /&gt;close:  7514.67&#34;,&#34;date: 2019-10-24&lt;br /&gt;close:  7493.49&#34;,&#34;date: 2019-10-25&lt;br /&gt;close:  8660.70&#34;,&#34;date: 2019-10-26&lt;br /&gt;close:  9244.97&#34;,&#34;date: 2019-10-27&lt;br /&gt;close:  9551.71&#34;,&#34;date: 2019-10-28&lt;br /&gt;close:  9256.15&#34;,&#34;date: 2019-10-29&lt;br /&gt;close:  9427.69&#34;,&#34;date: 2019-10-30&lt;br /&gt;close:  9205.73&#34;,&#34;date: 2019-10-31&lt;br /&gt;close:  9199.58&#34;,&#34;date: 2019-11-01&lt;br /&gt;close:  9261.10&#34;,&#34;date: 2019-11-02&lt;br /&gt;close:  9324.72&#34;,&#34;date: 2019-11-03&lt;br /&gt;close:  9235.35&#34;,&#34;date: 2019-11-04&lt;br /&gt;close:  9412.61&#34;,&#34;date: 2019-11-05&lt;br /&gt;close:  9342.53&#34;,&#34;date: 2019-11-06&lt;br /&gt;close:  9360.88&#34;,&#34;date: 2019-11-07&lt;br /&gt;close:  9267.56&#34;,&#34;date: 2019-11-08&lt;br /&gt;close:  8804.88&#34;,&#34;date: 2019-11-09&lt;br /&gt;close:  8813.58&#34;,&#34;date: 2019-11-10&lt;br /&gt;close:  9055.53&#34;,&#34;date: 2019-11-11&lt;br /&gt;close:  8757.79&#34;,&#34;date: 2019-11-12&lt;br /&gt;close:  8815.66&#34;,&#34;date: 2019-11-13&lt;br /&gt;close:  8808.26&#34;,&#34;date: 2019-11-14&lt;br /&gt;close:  8708.10&#34;,&#34;date: 2019-11-15&lt;br /&gt;close:  8491.99&#34;,&#34;date: 2019-11-16&lt;br /&gt;close:  8550.76&#34;,&#34;date: 2019-11-17&lt;br /&gt;close:  8577.98&#34;,&#34;date: 2019-11-18&lt;br /&gt;close:  8309.29&#34;,&#34;date: 2019-11-19&lt;br /&gt;close:  8206.15&#34;,&#34;date: 2019-11-20&lt;br /&gt;close:  8027.27&#34;,&#34;date: 2019-11-21&lt;br /&gt;close:  7642.75&#34;,&#34;date: 2019-11-22&lt;br /&gt;close:  7296.58&#34;,&#34;date: 2019-11-23&lt;br /&gt;close:  7397.80&#34;,&#34;date: 2019-11-24&lt;br /&gt;close:  7047.92&#34;,&#34;date: 2019-11-25&lt;br /&gt;close:  7146.13&#34;,&#34;date: 2019-11-26&lt;br /&gt;close:  7218.37&#34;,&#34;date: 2019-11-27&lt;br /&gt;close:  7531.66&#34;,&#34;date: 2019-11-28&lt;br /&gt;close:  7463.11&#34;,&#34;date: 2019-11-29&lt;br /&gt;close:  7761.24&#34;,&#34;date: 2019-11-30&lt;br /&gt;close:  7569.63&#34;,&#34;date: 2019-12-01&lt;br /&gt;close:  7424.29&#34;,&#34;date: 2019-12-02&lt;br /&gt;close:  7321.99&#34;,&#34;date: 2019-12-03&lt;br /&gt;close:  7320.15&#34;,&#34;date: 2019-12-04&lt;br /&gt;close:  7252.03&#34;,&#34;date: 2019-12-05&lt;br /&gt;close:  7448.31&#34;,&#34;date: 2019-12-06&lt;br /&gt;close:  7547.00&#34;,&#34;date: 2019-12-07&lt;br /&gt;close:  7556.24&#34;,&#34;date: 2019-12-08&lt;br /&gt;close:  7564.35&#34;,&#34;date: 2019-12-09&lt;br /&gt;close:  7400.90&#34;,&#34;date: 2019-12-10&lt;br /&gt;close:  7278.12&#34;,&#34;date: 2019-12-11&lt;br /&gt;close:  7217.43&#34;,&#34;date: 2019-12-12&lt;br /&gt;close:  7243.13&#34;,&#34;date: 2019-12-13&lt;br /&gt;close:  7269.68&#34;,&#34;date: 2019-12-14&lt;br /&gt;close:  7124.67&#34;,&#34;date: 2019-12-15&lt;br /&gt;close:  7152.30&#34;,&#34;date: 2019-12-16&lt;br /&gt;close:  6932.48&#34;,&#34;date: 2019-12-17&lt;br /&gt;close:  6640.52&#34;,&#34;date: 2019-12-18&lt;br /&gt;close:  7276.80&#34;,&#34;date: 2019-12-19&lt;br /&gt;close:  7202.84&#34;,&#34;date: 2019-12-20&lt;br /&gt;close:  7218.82&#34;,&#34;date: 2019-12-21&lt;br /&gt;close:  7191.16&#34;,&#34;date: 2019-12-22&lt;br /&gt;close:  7511.59&#34;,&#34;date: 2019-12-23&lt;br /&gt;close:  7355.63&#34;,&#34;date: 2019-12-24&lt;br /&gt;close:  7322.53&#34;,&#34;date: 2019-12-25&lt;br /&gt;close:  7275.16&#34;,&#34;date: 2019-12-26&lt;br /&gt;close:  7238.97&#34;,&#34;date: 2019-12-27&lt;br /&gt;close:  7290.09&#34;,&#34;date: 2019-12-28&lt;br /&gt;close:  7317.99&#34;,&#34;date: 2019-12-29&lt;br /&gt;close:  7422.65&#34;,&#34;date: 2019-12-30&lt;br /&gt;close:  7293.00&#34;,&#34;date: 2019-12-31&lt;br /&gt;close:  7193.60&#34;,&#34;date: 2020-01-01&lt;br /&gt;close:  7200.17&#34;,&#34;date: 2020-01-02&lt;br /&gt;close:  6985.47&#34;,&#34;date: 2020-01-03&lt;br /&gt;close:  7344.88&#34;,&#34;date: 2020-01-04&lt;br /&gt;close:  7410.66&#34;,&#34;date: 2020-01-05&lt;br /&gt;close:  7411.32&#34;,&#34;date: 2020-01-06&lt;br /&gt;close:  7769.22&#34;,&#34;date: 2020-01-07&lt;br /&gt;close:  8163.69&#34;,&#34;date: 2020-01-08&lt;br /&gt;close:  8079.86&#34;,&#34;date: 2020-01-09&lt;br /&gt;close:  7879.07&#34;,&#34;date: 2020-01-10&lt;br /&gt;close:  8166.55&#34;,&#34;date: 2020-01-11&lt;br /&gt;close:  8037.54&#34;,&#34;date: 2020-01-12&lt;br /&gt;close:  8192.49&#34;,&#34;date: 2020-01-13&lt;br /&gt;close:  8144.19&#34;,&#34;date: 2020-01-14&lt;br /&gt;close:  8827.76&#34;,&#34;date: 2020-01-15&lt;br /&gt;close:  8807.01&#34;,&#34;date: 2020-01-16&lt;br /&gt;close:  8723.79&#34;,&#34;date: 2020-01-17&lt;br /&gt;close:  8929.04&#34;,&#34;date: 2020-01-18&lt;br /&gt;close:  8942.81&#34;,&#34;date: 2020-01-19&lt;br /&gt;close:  8706.25&#34;,&#34;date: 2020-01-20&lt;br /&gt;close:  8657.64&#34;,&#34;date: 2020-01-21&lt;br /&gt;close:  8745.89&#34;,&#34;date: 2020-01-22&lt;br /&gt;close:  8680.88&#34;,&#34;date: 2020-01-23&lt;br /&gt;close:  8406.52&#34;,&#34;date: 2020-01-24&lt;br /&gt;close:  8445.43&#34;,&#34;date: 2020-01-25&lt;br /&gt;close:  8367.85&#34;,&#34;date: 2020-01-26&lt;br /&gt;close:  8596.83&#34;,&#34;date: 2020-01-27&lt;br /&gt;close:  8909.82&#34;,&#34;date: 2020-01-28&lt;br /&gt;close:  9358.59&#34;,&#34;date: 2020-01-29&lt;br /&gt;close:  9316.63&#34;,&#34;date: 2020-01-30&lt;br /&gt;close:  9508.99&#34;,&#34;date: 2020-01-31&lt;br /&gt;close:  9350.53&#34;,&#34;date: 2020-02-01&lt;br /&gt;close:  9392.88&#34;,&#34;date: 2020-02-02&lt;br /&gt;close:  9344.37&#34;,&#34;date: 2020-02-03&lt;br /&gt;close:  9293.52&#34;,&#34;date: 2020-02-04&lt;br /&gt;close:  9180.96&#34;,&#34;date: 2020-02-05&lt;br /&gt;close:  9613.42&#34;,&#34;date: 2020-02-06&lt;br /&gt;close:  9729.80&#34;,&#34;date: 2020-02-07&lt;br /&gt;close:  9795.94&#34;,&#34;date: 2020-02-08&lt;br /&gt;close:  9865.12&#34;,&#34;date: 2020-02-09&lt;br /&gt;close: 10116.67&#34;,&#34;date: 2020-02-10&lt;br /&gt;close:  9856.61&#34;,&#34;date: 2020-02-11&lt;br /&gt;close: 10208.24&#34;,&#34;date: 2020-02-12&lt;br /&gt;close: 10326.05&#34;,&#34;date: 2020-02-13&lt;br /&gt;close: 10214.38&#34;,&#34;date: 2020-02-14&lt;br /&gt;close: 10312.12&#34;,&#34;date: 2020-02-15&lt;br /&gt;close:  9889.42&#34;,&#34;date: 2020-02-16&lt;br /&gt;close:  9934.43&#34;,&#34;date: 2020-02-17&lt;br /&gt;close:  9690.14&#34;,&#34;date: 2020-02-18&lt;br /&gt;close: 10142.00&#34;,&#34;date: 2020-02-19&lt;br /&gt;close:  9633.39&#34;,&#34;date: 2020-02-20&lt;br /&gt;close:  9608.48&#34;,&#34;date: 2020-02-21&lt;br /&gt;close:  9686.44&#34;,&#34;date: 2020-02-22&lt;br /&gt;close:  9663.18&#34;,&#34;date: 2020-02-23&lt;br /&gt;close:  9924.52&#34;,&#34;date: 2020-02-24&lt;br /&gt;close:  9650.17&#34;,&#34;date: 2020-02-25&lt;br /&gt;close:  9341.71&#34;,&#34;date: 2020-02-26&lt;br /&gt;close:  8820.52&#34;,&#34;date: 2020-02-27&lt;br /&gt;close:  8784.49&#34;,&#34;date: 2020-02-28&lt;br /&gt;close:  8672.46&#34;,&#34;date: 2020-02-29&lt;br /&gt;close:  8599.51&#34;,&#34;date: 2020-03-01&lt;br /&gt;close:  8562.45&#34;,&#34;date: 2020-03-02&lt;br /&gt;close:  8869.67&#34;,&#34;date: 2020-03-03&lt;br /&gt;close:  8787.79&#34;,&#34;date: 2020-03-04&lt;br /&gt;close:  8755.25&#34;,&#34;date: 2020-03-05&lt;br /&gt;close:  9078.76&#34;,&#34;date: 2020-03-06&lt;br /&gt;close:  9122.55&#34;,&#34;date: 2020-03-07&lt;br /&gt;close:  8909.95&#34;,&#34;date: 2020-03-08&lt;br /&gt;close:  8108.12&#34;,&#34;date: 2020-03-09&lt;br /&gt;close:  7923.64&#34;,&#34;date: 2020-03-10&lt;br /&gt;close:  7909.73&#34;,&#34;date: 2020-03-11&lt;br /&gt;close:  7911.43&#34;,&#34;date: 2020-03-12&lt;br /&gt;close:  4970.79&#34;,&#34;date: 2020-03-13&lt;br /&gt;close:  5563.71&#34;,&#34;date: 2020-03-14&lt;br /&gt;close:  5200.37&#34;,&#34;date: 2020-03-15&lt;br /&gt;close:  5392.31&#34;,&#34;date: 2020-03-16&lt;br /&gt;close:  5014.48&#34;,&#34;date: 2020-03-17&lt;br /&gt;close:  5225.63&#34;,&#34;date: 2020-03-18&lt;br /&gt;close:  5238.44&#34;,&#34;date: 2020-03-19&lt;br /&gt;close:  6191.19&#34;,&#34;date: 2020-03-20&lt;br /&gt;close:  6198.78&#34;,&#34;date: 2020-03-21&lt;br /&gt;close:  6185.07&#34;,&#34;date: 2020-03-22&lt;br /&gt;close:  5830.25&#34;,&#34;date: 2020-03-23&lt;br /&gt;close:  6416.31&#34;,&#34;date: 2020-03-24&lt;br /&gt;close:  6734.80&#34;,&#34;date: 2020-03-25&lt;br /&gt;close:  6681.06&#34;,&#34;date: 2020-03-26&lt;br /&gt;close:  6716.44&#34;,&#34;date: 2020-03-27&lt;br /&gt;close:  6469.80&#34;,&#34;date: 2020-03-28&lt;br /&gt;close:  6242.19&#34;,&#34;date: 2020-03-29&lt;br /&gt;close:  5922.04&#34;,&#34;date: 2020-03-30&lt;br /&gt;close:  6429.84&#34;,&#34;date: 2020-03-31&lt;br /&gt;close:  6438.64&#34;,&#34;date: 2020-04-01&lt;br /&gt;close:  6606.78&#34;,&#34;date: 2020-04-02&lt;br /&gt;close:  6793.62&#34;,&#34;date: 2020-04-03&lt;br /&gt;close:  6733.39&#34;,&#34;date: 2020-04-04&lt;br /&gt;close:  6867.53&#34;,&#34;date: 2020-04-05&lt;br /&gt;close:  6791.13&#34;,&#34;date: 2020-04-06&lt;br /&gt;close:  7271.78&#34;,&#34;date: 2020-04-07&lt;br /&gt;close:  7176.41&#34;,&#34;date: 2020-04-08&lt;br /&gt;close:  7334.10&#34;,&#34;date: 2020-04-09&lt;br /&gt;close:  7302.09&#34;,&#34;date: 2020-04-10&lt;br /&gt;close:  6865.49&#34;,&#34;date: 2020-04-11&lt;br /&gt;close:  6859.08&#34;,&#34;date: 2020-04-12&lt;br /&gt;close:  6971.09&#34;,&#34;date: 2020-04-13&lt;br /&gt;close:  6845.04&#34;,&#34;date: 2020-04-14&lt;br /&gt;close:  6842.43&#34;,&#34;date: 2020-04-15&lt;br /&gt;close:  6642.11&#34;,&#34;date: 2020-04-16&lt;br /&gt;close:  7116.80&#34;,&#34;date: 2020-04-17&lt;br /&gt;close:  7096.18&#34;,&#34;date: 2020-04-18&lt;br /&gt;close:  7257.66&#34;,&#34;date: 2020-04-19&lt;br /&gt;close:  7189.42&#34;,&#34;date: 2020-04-20&lt;br /&gt;close:  6881.96&#34;,&#34;date: 2020-04-21&lt;br /&gt;close:  6880.32&#34;,&#34;date: 2020-04-22&lt;br /&gt;close:  7117.21&#34;,&#34;date: 2020-04-23&lt;br /&gt;close:  7429.72&#34;,&#34;date: 2020-04-24&lt;br /&gt;close:  7550.90&#34;,&#34;date: 2020-04-25&lt;br /&gt;close:  7569.94&#34;,&#34;date: 2020-04-26&lt;br /&gt;close:  7679.87&#34;,&#34;date: 2020-04-27&lt;br /&gt;close:  7795.60&#34;,&#34;date: 2020-04-28&lt;br /&gt;close:  7807.06&#34;,&#34;date: 2020-04-29&lt;br /&gt;close:  8801.04&#34;,&#34;date: 2020-04-30&lt;br /&gt;close:  8658.55&#34;,&#34;date: 2020-05-01&lt;br /&gt;close:  8864.77&#34;,&#34;date: 2020-05-02&lt;br /&gt;close:  8988.60&#34;,&#34;date: 2020-05-03&lt;br /&gt;close:  8897.47&#34;,&#34;date: 2020-05-04&lt;br /&gt;close:  8912.65&#34;,&#34;date: 2020-05-05&lt;br /&gt;close:  9003.07&#34;,&#34;date: 2020-05-06&lt;br /&gt;close:  9268.76&#34;,&#34;date: 2020-05-07&lt;br /&gt;close:  9951.52&#34;,&#34;date: 2020-05-08&lt;br /&gt;close:  9842.67&#34;,&#34;date: 2020-05-09&lt;br /&gt;close:  9593.90&#34;,&#34;date: 2020-05-10&lt;br /&gt;close:  8756.43&#34;,&#34;date: 2020-05-11&lt;br /&gt;close:  8601.80&#34;,&#34;date: 2020-05-12&lt;br /&gt;close:  8804.48&#34;,&#34;date: 2020-05-13&lt;br /&gt;close:  9269.99&#34;,&#34;date: 2020-05-14&lt;br /&gt;close:  9733.72&#34;,&#34;date: 2020-05-15&lt;br /&gt;close:  9328.20&#34;,&#34;date: 2020-05-16&lt;br /&gt;close:  9377.01&#34;,&#34;date: 2020-05-17&lt;br /&gt;close:  9670.74&#34;,&#34;date: 2020-05-18&lt;br /&gt;close:  9726.57&#34;,&#34;date: 2020-05-19&lt;br /&gt;close:  9729.04&#34;,&#34;date: 2020-05-20&lt;br /&gt;close:  9522.98&#34;,&#34;date: 2020-05-21&lt;br /&gt;close:  9081.76&#34;,&#34;date: 2020-05-22&lt;br /&gt;close:  9182.58&#34;,&#34;date: 2020-05-23&lt;br /&gt;close:  9209.29&#34;,&#34;date: 2020-05-24&lt;br /&gt;close:  8790.37&#34;,&#34;date: 2020-05-25&lt;br /&gt;close:  8906.93&#34;,&#34;date: 2020-05-26&lt;br /&gt;close:  8835.05&#34;,&#34;date: 2020-05-27&lt;br /&gt;close:  9181.02&#34;,&#34;date: 2020-05-28&lt;br /&gt;close:  9525.75&#34;,&#34;date: 2020-05-29&lt;br /&gt;close:  9439.12&#34;,&#34;date: 2020-05-30&lt;br /&gt;close:  9700.41&#34;,&#34;date: 2020-05-31&lt;br /&gt;close:  9461.06&#34;,&#34;date: 2020-06-01&lt;br /&gt;close: 10167.27&#34;,&#34;date: 2020-06-02&lt;br /&gt;close:  9529.80&#34;,&#34;date: 2020-06-03&lt;br /&gt;close:  9656.72&#34;,&#34;date: 2020-06-04&lt;br /&gt;close:  9800.64&#34;,&#34;date: 2020-06-05&lt;br /&gt;close:  9665.53&#34;,&#34;date: 2020-06-06&lt;br /&gt;close:  9653.68&#34;,&#34;date: 2020-06-07&lt;br /&gt;close:  9758.85&#34;,&#34;date: 2020-06-08&lt;br /&gt;close:  9771.49&#34;,&#34;date: 2020-06-09&lt;br /&gt;close:  9795.70&#34;,&#34;date: 2020-06-10&lt;br /&gt;close:  9870.09&#34;,&#34;date: 2020-06-11&lt;br /&gt;close:  9321.78&#34;,&#34;date: 2020-06-12&lt;br /&gt;close:  9480.84&#34;,&#34;date: 2020-06-13&lt;br /&gt;close:  9475.28&#34;,&#34;date: 2020-06-14&lt;br /&gt;close:  9386.79&#34;,&#34;date: 2020-06-15&lt;br /&gt;close:  9450.70&#34;,&#34;date: 2020-06-16&lt;br /&gt;close:  9538.02&#34;,&#34;date: 2020-06-17&lt;br /&gt;close:  9480.26&#34;,&#34;date: 2020-06-18&lt;br /&gt;close:  9411.84&#34;,&#34;date: 2020-06-19&lt;br /&gt;close:  9288.02&#34;,&#34;date: 2020-06-20&lt;br /&gt;close:  9332.34&#34;,&#34;date: 2020-06-21&lt;br /&gt;close:  9303.63&#34;,&#34;date: 2020-06-22&lt;br /&gt;close:  9648.72&#34;,&#34;date: 2020-06-23&lt;br /&gt;close:  9629.66&#34;,&#34;date: 2020-06-24&lt;br /&gt;close:  9313.61&#34;,&#34;date: 2020-06-25&lt;br /&gt;close:  9264.81&#34;,&#34;date: 2020-06-26&lt;br /&gt;close:  9162.92&#34;,&#34;date: 2020-06-27&lt;br /&gt;close:  9045.39&#34;,&#34;date: 2020-06-28&lt;br /&gt;close:  9143.58&#34;,&#34;date: 2020-06-29&lt;br /&gt;close:  9190.85&#34;,&#34;date: 2020-06-30&lt;br /&gt;close:  9137.99&#34;,&#34;date: 2020-07-01&lt;br /&gt;close:  9228.33&#34;,&#34;date: 2020-07-02&lt;br /&gt;close:  9123.41&#34;,&#34;date: 2020-07-03&lt;br /&gt;close:  9087.30&#34;,&#34;date: 2020-07-04&lt;br /&gt;close:  9132.49&#34;,&#34;date: 2020-07-05&lt;br /&gt;close:  9073.94&#34;,&#34;date: 2020-07-06&lt;br /&gt;close:  9375.47&#34;,&#34;date: 2020-07-07&lt;br /&gt;close:  9252.28&#34;,&#34;date: 2020-07-08&lt;br /&gt;close:  9428.33&#34;,&#34;date: 2020-07-09&lt;br /&gt;close:  9277.97&#34;,&#34;date: 2020-07-10&lt;br /&gt;close:  9278.81&#34;,&#34;date: 2020-07-11&lt;br /&gt;close:  9240.35&#34;,&#34;date: 2020-07-12&lt;br /&gt;close:  9276.50&#34;,&#34;date: 2020-07-13&lt;br /&gt;close:  9243.61&#34;,&#34;date: 2020-07-14&lt;br /&gt;close:  9243.21&#34;,&#34;date: 2020-07-15&lt;br /&gt;close:  9192.84&#34;,&#34;date: 2020-07-16&lt;br /&gt;close:  9132.23&#34;,&#34;date: 2020-07-17&lt;br /&gt;close:  9151.39&#34;,&#34;date: 2020-07-18&lt;br /&gt;close:  9159.04&#34;,&#34;date: 2020-07-19&lt;br /&gt;close:  9185.82&#34;,&#34;date: 2020-07-20&lt;br /&gt;close:  9164.23&#34;,&#34;date: 2020-07-21&lt;br /&gt;close:  9374.89&#34;,&#34;date: 2020-07-22&lt;br /&gt;close:  9525.36&#34;,&#34;date: 2020-07-23&lt;br /&gt;close:  9581.07&#34;,&#34;date: 2020-07-24&lt;br /&gt;close:  9536.89&#34;,&#34;date: 2020-07-25&lt;br /&gt;close:  9677.11&#34;,&#34;date: 2020-07-26&lt;br /&gt;close:  9905.17&#34;,&#34;date: 2020-07-27&lt;br /&gt;close: 10990.87&#34;,&#34;date: 2020-07-28&lt;br /&gt;close: 10912.82&#34;,&#34;date: 2020-07-29&lt;br /&gt;close: 11100.47&#34;,&#34;date: 2020-07-30&lt;br /&gt;close: 11111.21&#34;,&#34;date: 2020-07-31&lt;br /&gt;close: 11323.47&#34;,&#34;date: 2020-08-01&lt;br /&gt;close: 11759.59&#34;,&#34;date: 2020-08-02&lt;br /&gt;close: 11053.61&#34;,&#34;date: 2020-08-03&lt;br /&gt;close: 11246.35&#34;,&#34;date: 2020-08-04&lt;br /&gt;close: 11205.89&#34;,&#34;date: 2020-08-05&lt;br /&gt;close: 11747.02&#34;,&#34;date: 2020-08-06&lt;br /&gt;close: 11779.77&#34;,&#34;date: 2020-08-07&lt;br /&gt;close: 11601.47&#34;,&#34;date: 2020-08-08&lt;br /&gt;close: 11754.05&#34;,&#34;date: 2020-08-09&lt;br /&gt;close: 11675.74&#34;,&#34;date: 2020-08-10&lt;br /&gt;close: 11878.11&#34;,&#34;date: 2020-08-11&lt;br /&gt;close: 11410.53&#34;,&#34;date: 2020-08-12&lt;br /&gt;close: 11584.93&#34;,&#34;date: 2020-08-13&lt;br /&gt;close: 11784.14&#34;,&#34;date: 2020-08-14&lt;br /&gt;close: 11768.87&#34;,&#34;date: 2020-08-15&lt;br /&gt;close: 11865.70&#34;,&#34;date: 2020-08-16&lt;br /&gt;close: 11892.80&#34;,&#34;date: 2020-08-17&lt;br /&gt;close: 12254.40&#34;,&#34;date: 2020-08-18&lt;br /&gt;close: 11991.23&#34;,&#34;date: 2020-08-19&lt;br /&gt;close: 11758.28&#34;,&#34;date: 2020-08-20&lt;br /&gt;close: 11878.37&#34;,&#34;date: 2020-08-21&lt;br /&gt;close: 11592.49&#34;,&#34;date: 2020-08-22&lt;br /&gt;close: 11681.83&#34;,&#34;date: 2020-08-23&lt;br /&gt;close: 11664.85&#34;,&#34;date: 2020-08-24&lt;br /&gt;close: 11774.60&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(0,0,255,1)&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:43.7625570776256,&#34;r&#34;:7.30593607305936,&#34;b&#34;:40.1826484018265,&#34;l&#34;:54.7945205479452},&#34;plot_bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;paper_bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:{&#34;text&#34;:&#34;Historical data for Bitcoin&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;x&#34;:0,&#34;xref&#34;:&#34;paper&#34;},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[15689.25,18631.75],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;2014&#34;,&#34;2016&#34;,&#34;2018&#34;,&#34;2020&#34;],&#34;tickvals&#34;:[16071,16801,17532,18262],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;2014&#34;,&#34;2016&#34;,&#34;2018&#34;,&#34;2020&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:{&#34;text&#34;:&#34;Date&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187}},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-903.0185,20468.8485],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;5000&#34;,&#34;10000&#34;,&#34;15000&#34;,&#34;20000&#34;],&#34;tickvals&#34;:[-1.13686837721616e-13,5000,10000,15000,20000],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;5000&#34;,&#34;10000&#34;,&#34;15000&#34;,&#34;20000&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:{&#34;text&#34;:&#34;Close&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187}},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:&#34;transparent&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;width&#34;:0.66417600664176,&#34;linetype&#34;:&#34;solid&#34;},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:false,&#34;legend&#34;:{&#34;bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;bordercolor&#34;:&#34;transparent&#34;,&#34;borderwidth&#34;:1.88976377952756,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;showSendToCloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;36803b4a937&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;type&#34;:&#34;scatter&#34;}},&#34;cur_data&#34;:&#34;36803b4a937&#34;,&#34;visdat&#34;:{&#34;36803b4a937&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;shinyEvents&#34;:[&#34;plotly_hover&#34;,&#34;plotly_click&#34;,&#34;plotly_selected&#34;,&#34;plotly_relayout&#34;,&#34;plotly_brushed&#34;,&#34;plotly_brushing&#34;,&#34;plotly_clickannotation&#34;,&#34;plotly_doubleclick&#34;,&#34;plotly_deselect&#34;,&#34;plotly_afterplot&#34;,&#34;plotly_sunburstclick&#34;],&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Sử dụng thống kê để xác định và loại bỏ dữ liệu ngoại lai cho machine learning trong R và Python</title>
      <link>/post/remove-outliers/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/remove-outliers/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://leadupcollective.org/2017/06/02/statistics-high-performers-studying-the-outliers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nguồn ảnh&lt;/a&gt;
&lt;img src=&#34;/img/outliers1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Outliers (dữ liệu ngoại lai hay là nhiễu) là một trong những thuật ngữ được sử dụng rất rộng rãi trong thế giới data science. Trong quá trình xây dựng các mô hình dự đoán, việc xác định và loại bỏ outliers trong dữ liệu là một bước vô cùng quan trọng. Nó giúp tăng cao độ chính xác cho các mô hình dự đoán.&lt;/p&gt;
&lt;p&gt;Khi phân tích, chúng ta thường dùng các tham số như là &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;median&lt;/code&gt; và &lt;code&gt;mode&lt;/code&gt; để biết xu hướng tập trung của dữ liệu. Tuy nhiên, một câu hỏi quan trọng cần phải trả lời khi xem xét chất lượng của một mẫu dữ liệu trong  phân tích  đó là &lt;em&gt;&amp;ldquo;làm sao để đo được độ biến động (hay độ phân tán) của mẫu dữ liệu đó&amp;rdquo;?&lt;/em&gt;.  Vì chúng ta có thể có 2 mẫu dữ liệu với cùng giá trị &lt;code&gt;mean&lt;/code&gt; nhưng độ biến động của chúng lại hoàn toàn khác nhau. Trong thống kê những đại lượng phổ biến nhất để đo lường tiêu chí này là khoảng phần tư (interquartile range, &lt;code&gt;IQR&lt;/code&gt;) (hay còn được gọi là khoảng cách giữa các tứ phân vị), phương sai (&lt;code&gt;variance&lt;/code&gt;) và độ lệch chuẩn (standard deviation, &lt;code&gt;STD&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Ở post này tôi sẽ giới thiệu với các bạn cách sử dụng 2 phương pháp thống kê trong R và Python để xác định và loại bỏ outliers trong dữ liệu đó là:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;STD&lt;/code&gt; có thể sử dụng để xác định outliers trong dữ liệu có dạng/gần như dạng phân phối chuẩn (hay còn gọi là phân phối &lt;code&gt;Gauss&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IQR&lt;/code&gt; có thể sử dụng để xác định và loại bỏ outliers không phụ thuộc vào dạng phân phối của dữ liệu.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Và ở cuối post tôi sẽ hướng dẫn các bạn viết hàm tự động xác định và loại bỏ outliers từ dữ liệu sử dụng hai phương pháp trên.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;1. Tạo dữ liệu  để thực hành&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Để thực hành tôi sử dụng hàm mô phỏng phân phối chuẩn &lt;code&gt;rnorm()&lt;/code&gt; trong R để tạo ra dãy số ngẫu nhiên gồm &lt;code&gt;5000&lt;/code&gt; số với các tham số giá trị trung bình là &lt;code&gt;20&lt;/code&gt; và độ lệnh chuẩn là &lt;code&gt;2&lt;/code&gt; như sau:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# R
data = rnorm(5000, mean = 20, sd = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Với Python thì ta thực hiện như sau:&lt;/p&gt;
&lt;p&gt;Trước hết cần nạp thư viện &lt;code&gt;reticulate&lt;/code&gt; để sử dụng Python trong R:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# R
library(reticulate)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cụ thể về cách sử dụng thư viện &lt;code&gt;reticulate&lt;/code&gt; để kết hợp R và Python tôi đã giới thiệu ở post trước, các bạn có thể đọc ở 
&lt;a href=&#34;https://svcuong.github.io/post/s-d-ng-k-t-h-p-r-va-python-trong-data-science/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;đây&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tạo dữ liệu trong python:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Python
# Tạo dữ liệu tương tự như trong R
from numpy.random import randn
data = 2* randn(5000) + 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trong dữ liệu được tạo ra từ phân phối chuẩn sẽ có một số giá trị nằm cách xa giá trị trung bình &lt;code&gt;mean&lt;/code&gt; mà chúng ta có thể xác định là &lt;code&gt;outliers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Biểu diễn dữ liệu bằng histogam sử dụng hàm &lt;code&gt;hist()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# R
hist(data, breaks= 60, main=&amp;quot;Histogram With breaks=60&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-19-remove-outliers.vn_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Nhân tiện đây tôi cũng xin giới thiệu một số hàm hỗ trợ cho các tính toán thống kê trong R như: &lt;code&gt;summary()&lt;/code&gt;, &lt;code&gt;sample()&lt;/code&gt;, &lt;code&gt;dnorm()&lt;/code&gt;, &lt;code&gt;pnorm()&lt;/code&gt;, &lt;code&gt;qnorm()&lt;/code&gt;, &lt;code&gt;dunif()&lt;/code&gt;, &lt;code&gt;punif()&lt;/code&gt;, &lt;code&gt;qunif()&lt;/code&gt;, &lt;code&gt;runif()&lt;/code&gt;, &lt;code&gt;mean()&lt;/code&gt;, &lt;code&gt;sd()&lt;/code&gt;, &lt;code&gt;cov()&lt;/code&gt;, &lt;code&gt;cor()&lt;/code&gt;,&amp;hellip;&lt;/p&gt;
&lt;p&gt;Hàm &lt;code&gt;summay()&lt;/code&gt; cho phép thực hiện thống kê mô tả (&lt;code&gt;descriptive statistics&lt;/code&gt;) để cung cấp cho chúng ta một số thông tin thống kê cơ bản về một biến số:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# R
summary(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   12.84   18.66   19.99   20.00   21.37   26.96
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ví dụ sử dụng hàm &lt;code&gt;sample()&lt;/code&gt; để tạo mẫu ngẫu nhiên có lặp lại 10 số nguyên từ 0 đến 9:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# R
sample(0:9, replace = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 8 7 4 3 1 6 9 5 3 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ví dụ sử dụng hàm tính mật độ phân phối chuẩn &lt;code&gt;dnorm()&lt;/code&gt; để ước tính xác xuất của học sinh có điểm là &lt;code&gt;16.5&lt;/code&gt;  biết rằng điểm của học sinh tuân theo phân phối chuẩn với giá trị trung bình là &lt;code&gt;15&lt;/code&gt;, độ lệnh chuẩn là &lt;code&gt;2.5&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# R
dnorm(16.5, mean = 15, sd = 2.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1332898
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tiếp theo ví dụ trên để ước tính xác suất học sinh có điểm tối thiểu là
&lt;code&gt;16.5&lt;/code&gt;, ta có thể sử dụng hàm tính xác suất chuẩn tích lũy &lt;code&gt;pnorm()&lt;/code&gt; như sau:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# R
1 - pnorm(16.5, mean = 15, sd = 2.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.2742531
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chức năng của các hàm R còn lại  cũng như các hàm tương tự trong Python các bạn có thể tự tìm hiểu thêm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Phương pháp STD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nếu như biết được rằng dữ liệu có dạng phân phối &lt;code&gt;Gauss&lt;/code&gt; thì chúng ta có thể sử dụng STD trong vài trò là thước đo giới hạn độ phân tán của dữ liệu để xác định outliers.&lt;/p&gt;
&lt;p&gt;Trong phân phối &lt;code&gt;Gauss&lt;/code&gt; dựa vào giá trị trung bình &lt;code&gt;mean&lt;/code&gt; và &lt;code&gt;STD&lt;/code&gt; cho phép chúng ta kiểm tra được độ phân tán (hay là phần trăm bao phủ) của dữ liệu đó như thế nào. Ví dụ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Độ bao phủ với &lt;code&gt;1 STD&lt;/code&gt; từ mean là &lt;code&gt;68%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Độ bao phủ với &lt;code&gt;2 STD&lt;/code&gt; từ mean là &lt;code&gt;95%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Độ bao phủ với &lt;code&gt;3 STD&lt;/code&gt; từ mean là &lt;code&gt;99.7%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-19-remove-outliers.vn_files/std.jpg&#34; alt=&#34;&#34;&gt;

&lt;a href=&#34;https://www.students4bestevidence.net/blog/2018/09/26/a-beginners-guide-to-standard-deviation-and-standard-error/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nguồn ảnh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vậy nên với dữ liệu dạng &lt;code&gt;Gauss&lt;/code&gt; có độ phân tán bình thường thì với &lt;code&gt;3STD&lt;/code&gt;, chúng ta sẽ bao phủ được khoảng &amp;gt; &lt;code&gt;99%&lt;/code&gt; của dữ liệu. Từ đó những điểm dữ liệu nằm ngoài &lt;code&gt;3STD&lt;/code&gt; sẽ được coi là outliers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Các bước xác định outliers bằng phương pháp &lt;code&gt;STD&lt;/code&gt; như sau:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bước 1: Tính &lt;code&gt;mean&lt;/code&gt; và &lt;code&gt;std&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# tính mean và std
# R
mean_data &amp;lt;- mean(data)
std_data &amp;lt;- sd(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Python
from numpy import mean
from numpy import std
mean_data, std_data = mean(data), std(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bước 2: Tính giá trị biên &lt;code&gt;Upper/Lower&lt;/code&gt; để xác định &lt;code&gt;outliers&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# thiết lập giới hạn để xác định outliers
# R
limit_std = 3*std_data
lower_std = mean_data - limit_std
upper_std = mean_data + limit_std
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Python
limit_std = 3*std_data
lower_std, upper_std = mean_data - limit_std, mean_data + limit_std
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bước 3: Xác định và loại bỏ &lt;code&gt;outliers&lt;/code&gt; dựa trên giá trị biên&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# xác định outliers
# R
ouliers_index_std &amp;lt;- which(data &amp;gt; upper_std | data &amp;lt; lower_std)
print(paste(&amp;quot;Number of outliers:&amp;quot;, length(ouliers_index_std)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Number of outliers: 16&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Python
ouliers_index_std = [x for x in data if x &amp;lt; lower_std or x &amp;gt; upper_std]
print(&#39;Number of outliers: %d&#39; % len(ouliers_index_std))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of outliers: 14
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Loại bỏ outliers
# R
data_new_std &amp;lt;- data[-ouliers_index_std]
print(paste(&amp;quot;Number of Non-outliers:&amp;quot;, length(data_new_std)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Number of Non-outliers: 4984&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Python
data_new_std = [x for x in data if x &amp;gt;= lower_std and x &amp;lt;= upper_std]
print(&#39;Number of Non-outliers:: %d&#39; % len(data_new_std))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of Non-outliers:: 4986
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Phương pháp &lt;code&gt;IQR&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tứ phân vị là đại lượng mô tả sự phân bố và sự phân tán của tập dữ liệu. Tứ phân vị có &lt;code&gt;3&lt;/code&gt; giá trị, đó là tứ phân vị thứ nhất &lt;code&gt;Q1&lt;/code&gt; (25th), thứ hai &lt;code&gt;Q2&lt;/code&gt; (50th) hay &lt;code&gt;median&lt;/code&gt;, và thứ ba &lt;code&gt;Q3&lt;/code&gt; (75th). Ba giá trị này chia một tập hợp dữ liệu (đã sắp xếp dữ liệu theo trật từ từ bé đến lớn) thành &lt;code&gt;4&lt;/code&gt; phần có số lượng quan sát đều nhau. Tứ phân vị được xác định như sau:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sắp xếp các số theo thứ tự tăng dần&lt;/li&gt;
&lt;li&gt;Cắt dãy số thành &lt;code&gt;4&lt;/code&gt; phàn bằng nhau&lt;/li&gt;
&lt;li&gt;Tứ phân vị là các giá trị tại vị trí cắt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-19-remove-outliers.vn_files/IQR.png&#34; alt=&#34;&#34;&gt;

&lt;a href=&#34;https://medium.com/@dhwajraj/learning-python-regression-analysis-part-7-handling-outliers-in-data-d36ee9e2130b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nguồn ảnh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IQR&lt;/code&gt; là sự khác biệt giữa tứ phân vị thứ nhất &lt;code&gt;Q1&lt;/code&gt; và tứ phân vị thứ ba &lt;code&gt;Q3&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$$IQR = Q_3 - Q_1$$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Giá trị &lt;code&gt;IQR&lt;/code&gt; có thể sử dụng để xác định &lt;code&gt;outliers&lt;/code&gt; bằng cách thiết lập các giá trị biên &lt;code&gt;Upper/Lower&lt;/code&gt; giống với phương pháp &lt;code&gt;STD&lt;/code&gt; như sau:  Nếu chúng ta trừ đi &lt;code&gt;kxIQR&lt;/code&gt; từ tứ phân vị đầu tiên &lt;code&gt;Q1&lt;/code&gt;, bất kỳ giá trị dữ liệu nào nhỏ hơn con số này được coi là giá trị outliers. Tương tự như vậy, nếu chúng ta thêm &lt;code&gt;kxIQR&lt;/code&gt; đến tứ phân vị thứ ba &lt;code&gt;Q3&lt;/code&gt;, bất kỳ giá trị dữ liệu nào lớn hơn con số này được coi là outliers. Giá trị &lt;code&gt;k&lt;/code&gt;  thường được chọn là &lt;code&gt;1.5&lt;/code&gt;. Trong trường hợp xác định các &lt;code&gt;extreme outliers&lt;/code&gt; có thể dùng giá trị &lt;code&gt;k = 3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Các bước xác định &lt;code&gt;outliers&lt;/code&gt; bằng phương pháp &lt;code&gt;IQR&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bước 1: Tính &lt;code&gt;IQR&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Tính IQR
# R
q25 &amp;lt;- quantile(data, 0.25)
q75 &amp;lt;- quantile(data, 0.75)
iqr &amp;lt;- q75 - q25
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Python
import numpy as np
q25, q75 = np.percentile(data, 25), np.percentile(data, 75)
iqr = q75 - q25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bước 2: Tính giá trị biên &lt;code&gt;Upper/Lower&lt;/code&gt; để xác định &lt;code&gt;outliers&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# thiết lập giới hạn để xác định outliers
# R
limit_iqr = 1.5*iqr
lower_iqr = q25 - limit_iqr
upper_iqr = q75 + limit_iqr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Python
limit_iqr = 1.5*iqr
lower_iqr, upper_iqr = q25 - limit_iqr, q75 + limit_iqr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bước 3: Xác định và loại bỏ &lt;code&gt;outliers&lt;/code&gt; dựa trên giá trị biên&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# xác định outliers
# R
ouliers_index_iqr &amp;lt;- which(data &amp;gt; upper_iqr | data &amp;lt; lower_iqr)
print(paste(&amp;quot;Number of outliers:&amp;quot;, length(ouliers_index_iqr)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Number of outliers: 30&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Python
ouliers_index_iqr = [x for x in data if x &amp;lt; lower_iqr or x &amp;gt; upper_iqr]
print(&#39;Number of outliers: %d&#39; % len(ouliers_index_iqr))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of outliers: 35
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Loại bỏ outliers
# R
data_new_iqr &amp;lt;- data[-ouliers_index_iqr]
print(paste(&amp;quot;Number of Non-outliers:&amp;quot;, length(data_new_iqr)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Number of Non-outliers: 4970&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Python
data_new_iqr = [x for x in data if x &amp;gt;= lower_iqr and x &amp;lt;= upper_iqr]
print(&#39;Non-outlier observations: %d&#39; % len(data_new_iqr))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Non-outlier observations: 4965
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. Xây dựng hàm tự động xác định và loại bỏ &lt;code&gt;outliers&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chúng ta có thể tạo một hàm trên R dựa vào các bước ở trên để tự động xác định và xóa outliers như sau:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# R
# Tạo hàm tự động xác định và loại bỏ outliers bằng phương pháp STD
find_outliers_std &amp;lt;- function(data) {
  # tính giá trị biên Upper/Lower
  mean_data &amp;lt;- mean(data)
  std_data &amp;lt;- sd(data)
  limit = 3*std_data
  lower = mean_data - limit
  upper = mean_data + limit
  # xác định outliers
  ouliers_index &amp;lt;- which(data &amp;gt; upper | data &amp;lt; lower)
  # Thông báo thông tin về các outliers đã xóa
  if (length(ouliers_index) &amp;gt; 0 ) {
    message(paste(&amp;quot;Number of outliers:&amp;quot;, length(ouliers_index)))
    message(paste(&amp;quot;Number of Non-outliers:&amp;quot;, length(data_new_iqr)))
  # return the data with the outliers removed
  return(data[-ouliers_index])
  } else {
    message(&amp;quot;Not outliers&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tương tự ta có thể tạo hàm xác định &lt;code&gt;outliers&lt;/code&gt; bằng phương pháp &lt;code&gt;IQR&lt;/code&gt; như sau:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Python
# Tạo hàm tự động xác định và loại bỏ outliers bằng phương pháp IQR
find_outliers_iqr &amp;lt;- function(data) {
  # Tính IQR
  q25 &amp;lt;- quantile(data)[2]
  q75 &amp;lt;- quantile(data)[4]
  iqr = q75 - q25 
  # Tính giá trị biên Upper/Lower để xác định outliers
  upper = q75 + iqr * 1.5
  lower = q25 - iqr * 1.5
  # xác định outliers
  ouliers_index &amp;lt;- which(data &amp;gt; upper | data &amp;lt; lower)
  # Thông báo thông tin về các outliers đã xóa
  if (length(ouliers_index) &amp;gt; 0 ) {
    message(paste(&amp;quot;Number of outliers:&amp;quot;, length(ouliers_index)))
    message(paste(&amp;quot;Number of Non-outliers:&amp;quot;, length(data_new_iqr)))
  # return the data with the outliers removed
  # return the data with the outliers removed
  return(data[-ouliers_index])
  } else {
    message(&amp;quot;Not outliers&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra kết quả thực hiện của hai hàm này:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;new_data_std &amp;lt;- find_outliers_std(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of outliers: 16
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of Non-outliers: 4970
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;new_data_iqr &amp;lt;- find_outliers_iqr(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of outliers: 30
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of Non-outliers: 4970
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Đối với Python thì các bạn có thể tạo hàm tương tự sử dụng các bước trên&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>So sánh dplyr và pandas cho data manipulation</title>
      <link>/post/data-manipulation/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/data-manipulation/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;dplyr-vs-pandas.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Package &lt;code&gt;dplyr&lt;/code&gt; là một trong những thành phần rất quan trọng trong hệ sinh thái &lt;code&gt;tidyverse&lt;/code&gt; của &lt;a href=&#34;http://hadley.nz/&#34;&gt;Hadley Wickham&lt;/a&gt; - tác giả của các thư viện nổi tiếng trên R như ggplot2, readr, tidyr,…&lt;code&gt;dplyr&lt;/code&gt; cung cấp các công cụ biến đổi giúp cho việc thao tác với dữ liệu trên R dễ dàng và thuận tiện hơn bao giờ hết. Kết hợp với toán tử &lt;code&gt;%&amp;gt;%&lt;/code&gt;, nhiều người cho rằng dplyr đã tạo ra &lt;code&gt;concept&lt;/code&gt; mới cho R.&lt;/p&gt;
&lt;p&gt;Để thực hiện các công việc liên quan đến data manipulation chúng ta có thể sử dụng các hàm thuộc gói &lt;code&gt;base&lt;/code&gt; trong R, tuy nhiêu cú phát của nhiều hàm &lt;code&gt;base&lt;/code&gt; là không nhất quán và khó nhớ, đặc biệt là cho một nhóm công việc đặc biệt tốn thời gian như là data manipulation. Gói hay còn thường được gọi là hệ sinh thái &lt;code&gt;tidyverse&lt;/code&gt; ra đời nhằm đáp ứng các nhu cầu ngày càng tăng của việc biến đổi và làm sạch dữ liệu (data cleaning), nó bao gồm tập hợp của những gói mạnh nhất chuyên cho công việc làm sạch và biến đổi dữ liệu. Ưu điểm của việc sử dụng &lt;code&gt;tidyverse&lt;/code&gt; phải kể đến các lí do sau:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dễ hiểu và có cú pháp nhất quán.&lt;/li&gt;
&lt;li&gt;Hợp nhất và hỗ trợ &lt;code&gt;ggplot2&lt;/code&gt; - một gói chuyên cho data visualization.&lt;/li&gt;
&lt;li&gt;Có thể phân tích, quản lí cơ sở dữ liệu ngoài (external databases) mà không cần biết sâu các chi tiết và kiến thức của các ngôn ngữ truy vấn cơ sở dữ liệu (database query languages) khác như &lt;code&gt;SQL&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nạp gói &lt;code&gt;tidyverse&lt;/code&gt; vào phiên làm việc trên R để thực hiện công việc data manipulation:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Tidyverse&lt;/code&gt; là một hộp công cụ lớn chứa nhiều package nhỏ (trong đó có &lt;code&gt;dplyr&lt;/code&gt;) bên trong và các mảnh nhỏ này kết nối với nhau một cách tiện ích để vận hành một quy trình phân tích dữ liệu hoàn chỉnh. Hiện nay &lt;code&gt;tidyverse&lt;/code&gt; chứa 27 packages bao gồm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
tidyverse_packages()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;broom&amp;quot;      &amp;quot;cli&amp;quot;        &amp;quot;crayon&amp;quot;     &amp;quot;dbplyr&amp;quot;     &amp;quot;dplyr&amp;quot;     
##  [6] &amp;quot;forcats&amp;quot;    &amp;quot;ggplot2&amp;quot;    &amp;quot;haven&amp;quot;      &amp;quot;hms&amp;quot;        &amp;quot;httr&amp;quot;      
## [11] &amp;quot;jsonlite&amp;quot;   &amp;quot;lubridate&amp;quot;  &amp;quot;magrittr&amp;quot;   &amp;quot;modelr&amp;quot;     &amp;quot;pillar&amp;quot;    
## [16] &amp;quot;purrr&amp;quot;      &amp;quot;readr&amp;quot;      &amp;quot;readxl&amp;quot;     &amp;quot;reprex&amp;quot;     &amp;quot;rlang&amp;quot;     
## [21] &amp;quot;rstudioapi&amp;quot; &amp;quot;rvest&amp;quot;      &amp;quot;stringr&amp;quot;    &amp;quot;tibble&amp;quot;     &amp;quot;tidyr&amp;quot;     
## [26] &amp;quot;xml2&amp;quot;       &amp;quot;tidyverse&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trong post này chúng ta hãy cùng so sánh các thao tác data manipulation thường dùng trong data science bằng cách sử dụng R (với &lt;code&gt;dplyr&lt;/code&gt;) và sử dụng Python (với &lt;code&gt;pandas&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter:&lt;/code&gt; Lọc dữ liệu với các điều kiện của biến (thuộc tính)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select:&lt;/code&gt; Chọn thuộc tính hay là tập hợp các thuộc tính&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange:&lt;/code&gt; Sắp xếp dữ liệu theo thứ t&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate&lt;/code&gt; : Tạo thuộc tính mới cho data frameự&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarise:&lt;/code&gt; Thống kê mô tả theo phân nhóm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nạp thư viện &lt;code&gt;reticulate&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
library(reticulate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;reticulate&lt;/code&gt; cho phép chúng ta sử dụng kết hợp R và Python trong môi trường R. Cụ thể về cách sử dụng thư viện này để kết hợp R và Python tôi đã giới thiệu ở post trước, các bạn có thể đọc ở &lt;a href=&#34;https://svcuong.github.io/post/s-d-ng-k-t-h-p-r-va-python-trong-data-science/&#34;&gt;đây&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nạp thư viện &lt;code&gt;pandas&lt;/code&gt; trong môi trường R:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
import pandas as pd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Chú ý&lt;/strong&gt;: Những R code chunks tôi sẽ comment &lt;code&gt;R&lt;/code&gt; và Python là &lt;code&gt;Python&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cũng giống như &lt;code&gt;dplyr&lt;/code&gt; trong R, về cơ bản &lt;code&gt;Pandas&lt;/code&gt; là một thư viện mã nguồn mở, được cộng đồng đánh giá là high-performance, nó hỗ trợ đắc lực trong thao tác với dữ liệu và giúp cho việc xử lý dữ liệu, tính toán sẽ dễ dàng hơn rất nhiều cách truyền thống trong Python.&lt;/p&gt;
&lt;p&gt;Load dữ liệu để demo:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
# Nạp R built-in dataset mtcars
data(mtcars)
# Chuyển dữ dữ liệu về dạng tibble(hay còn gọi là data_frame) - đây là 1 
# kiểu cấu trúc dữ liệu mới trong R nhằm đáp ứng nhu cầu về tốc độ tính toán
# khi xử lí dữ liệu có kích thước lớn
data_r &amp;lt;- as_tibble(mtcars)
data_r&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 11
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;So sánh &lt;code&gt;dplyr&lt;/code&gt; và &lt;code&gt;pandas&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Filter dữ liệu theo điều kiện của thuộc tính&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
filter(data_r, cyl &amp;gt;=6 &amp;amp; am == 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 11
##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4
## 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4
## 3  15.8     8   351   264  4.22  3.17  14.5     0     1     5     4
## 4  19.7     6   145   175  3.62  2.77  15.5     0     1     5     6
## 5  15       8   301   335  3.54  3.57  14.6     0     1     5     8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
# chuyển dữ liệu từ R cho Python:
data_py = r.data_r
data_py[(data_py[&amp;#39;cyl&amp;#39;] &amp;gt;=6) &amp;amp; (data_py[&amp;#39;am&amp;#39;] == 1)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      mpg  cyl   disp     hp  drat     wt   qsec   vs   am  gear  carb
## 0   21.0  6.0  160.0  110.0  3.90  2.620  16.46  0.0  1.0   4.0   4.0
## 1   21.0  6.0  160.0  110.0  3.90  2.875  17.02  0.0  1.0   4.0   4.0
## 28  15.8  8.0  351.0  264.0  4.22  3.170  14.50  0.0  1.0   5.0   4.0
## 29  19.7  6.0  145.0  175.0  3.62  2.770  15.50  0.0  1.0   5.0   6.0
## 30  15.0  8.0  301.0  335.0  3.54  3.570  14.60  0.0  1.0   5.0   8.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
data_r %&amp;gt;% filter(am != 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 13 x 11
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21       6 160     110  3.9   2.62  16.5     0     1     4     4
##  2  21       6 160     110  3.9   2.88  17.0     0     1     4     4
##  3  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
##  4  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
##  5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
##  6  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
##  7  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
##  8  26       4 120.     91  4.43  2.14  16.7     0     1     5     2
##  9  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2
## 10  15.8     8 351     264  4.22  3.17  14.5     0     1     5     4
## 11  19.7     6 145     175  3.62  2.77  15.5     0     1     5     6
## 12  15       8 301     335  3.54  3.57  14.6     0     1     5     8
## 13  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
data_py[data_py[&amp;#39;am&amp;#39;] != 0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      mpg  cyl   disp     hp  drat     wt   qsec   vs   am  gear  carb
## 0   21.0  6.0  160.0  110.0  3.90  2.620  16.46  0.0  1.0   4.0   4.0
## 1   21.0  6.0  160.0  110.0  3.90  2.875  17.02  0.0  1.0   4.0   4.0
## 2   22.8  4.0  108.0   93.0  3.85  2.320  18.61  1.0  1.0   4.0   1.0
## 17  32.4  4.0   78.7   66.0  4.08  2.200  19.47  1.0  1.0   4.0   1.0
## 18  30.4  4.0   75.7   52.0  4.93  1.615  18.52  1.0  1.0   4.0   2.0
## 19  33.9  4.0   71.1   65.0  4.22  1.835  19.90  1.0  1.0   4.0   1.0
## 25  27.3  4.0   79.0   66.0  4.08  1.935  18.90  1.0  1.0   4.0   1.0
## 26  26.0  4.0  120.3   91.0  4.43  2.140  16.70  0.0  1.0   5.0   2.0
## 27  30.4  4.0   95.1  113.0  3.77  1.513  16.90  1.0  1.0   5.0   2.0
## 28  15.8  8.0  351.0  264.0  4.22  3.170  14.50  0.0  1.0   5.0   4.0
## 29  19.7  6.0  145.0  175.0  3.62  2.770  15.50  0.0  1.0   5.0   6.0
## 30  15.0  8.0  301.0  335.0  3.54  3.570  14.60  0.0  1.0   5.0   8.0
## 31  21.4  4.0  121.0  109.0  4.11  2.780  18.60  1.0  1.0   4.0   2.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
data_r %&amp;gt;% group_by(cyl) %&amp;gt;% filter(sum(hp) &amp;gt; 2000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 14 x 11
## # Groups:   cyl [1]
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  2  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  3  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3
##  4  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3
##  5  15.2     8  276.   180  3.07  3.78  18       0     0     3     3
##  6  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4
##  7  10.4     8  460    215  3     5.42  17.8     0     0     3     4
##  8  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4
##  9  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2
## 10  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2
## 11  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4
## 12  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2
## 13  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4
## 14  15       8  301    335  3.54  3.57  14.6     0     1     5     8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
data_py.groupby(&amp;#39;cyl&amp;#39;).filter(lambda x: sum(x[&amp;#39;hp&amp;#39;]) &amp;gt; 2000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      mpg  cyl   disp     hp  drat     wt   qsec   vs   am  gear  carb
## 4   18.7  8.0  360.0  175.0  3.15  3.440  17.02  0.0  0.0   3.0   2.0
## 6   14.3  8.0  360.0  245.0  3.21  3.570  15.84  0.0  0.0   3.0   4.0
## 11  16.4  8.0  275.8  180.0  3.07  4.070  17.40  0.0  0.0   3.0   3.0
## 12  17.3  8.0  275.8  180.0  3.07  3.730  17.60  0.0  0.0   3.0   3.0
## 13  15.2  8.0  275.8  180.0  3.07  3.780  18.00  0.0  0.0   3.0   3.0
## 14  10.4  8.0  472.0  205.0  2.93  5.250  17.98  0.0  0.0   3.0   4.0
## 15  10.4  8.0  460.0  215.0  3.00  5.424  17.82  0.0  0.0   3.0   4.0
## 16  14.7  8.0  440.0  230.0  3.23  5.345  17.42  0.0  0.0   3.0   4.0
## 21  15.5  8.0  318.0  150.0  2.76  3.520  16.87  0.0  0.0   3.0   2.0
## 22  15.2  8.0  304.0  150.0  3.15  3.435  17.30  0.0  0.0   3.0   2.0
## 23  13.3  8.0  350.0  245.0  3.73  3.840  15.41  0.0  0.0   3.0   4.0
## 24  19.2  8.0  400.0  175.0  3.08  3.845  17.05  0.0  0.0   3.0   2.0
## 28  15.8  8.0  351.0  264.0  4.22  3.170  14.50  0.0  1.0   5.0   4.0
## 30  15.0  8.0  301.0  335.0  3.54  3.570  14.60  0.0  1.0   5.0   8.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Select thuộc tính&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
head(select(data_r, cyl, hp, wt), 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
##     cyl    hp    wt
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     6   110  2.62
## 2     6   110  2.88
## 3     4    93  2.32
## 4     6   110  3.22
## 5     8   175  3.44&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
data_py[[&amp;#39;cyl&amp;#39;, &amp;#39;hp&amp;#39;, &amp;#39;wt&amp;#39;]].head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    cyl     hp     wt
## 0  6.0  110.0  2.620
## 1  6.0  110.0  2.875
## 2  4.0   93.0  2.320
## 3  6.0  110.0  3.215
## 4  8.0  175.0  3.440&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
head(select(data_r, -mpg), 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 10
##     cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     6   160   110  3.9   2.62  16.5     0     1     4     4
## 2     6   160   110  3.9   2.88  17.0     0     1     4     4
## 3     4   108    93  3.85  2.32  18.6     1     1     4     1
## 4     6   258   110  3.08  3.22  19.4     1     0     3     1
## 5     8   360   175  3.15  3.44  17.0     0     0     3     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
data_py.drop(&amp;#39;mpg&amp;#39;, 1).head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    cyl   disp     hp  drat     wt   qsec   vs   am  gear  carb
## 0  6.0  160.0  110.0  3.90  2.620  16.46  0.0  1.0   4.0   4.0
## 1  6.0  160.0  110.0  3.90  2.875  17.02  0.0  1.0   4.0   4.0
## 2  4.0  108.0   93.0  3.85  2.320  18.61  1.0  1.0   4.0   1.0
## 3  6.0  258.0  110.0  3.08  3.215  19.44  1.0  0.0   3.0   1.0
## 4  8.0  360.0  175.0  3.15  3.440  17.02  0.0  0.0   3.0   2.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3.Sắp Xếp dữ liệu theo thứ tự&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
# Sắp xếp dữ liệu theo giá trị tăng dần của cột cyl
arrange(data_r, cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 11
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
##  2  24.4     4 147.     62  3.69  3.19  20       1     0     4     2
##  3  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
##  4  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
##  5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
##  6  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
##  7  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1
##  8  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
##  9  26       4 120.     91  4.43  2.14  16.7     0     1     5     2
## 10  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
data_py.sort_values(&amp;#39;cyl&amp;#39;).head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      mpg  cyl   disp     hp  drat     wt   qsec   vs   am  gear  carb
## 31  21.4  4.0  121.0  109.0  4.11  2.780  18.60  1.0  1.0   4.0   2.0
## 2   22.8  4.0  108.0   93.0  3.85  2.320  18.61  1.0  1.0   4.0   1.0
## 27  30.4  4.0   95.1  113.0  3.77  1.513  16.90  1.0  1.0   5.0   2.0
## 26  26.0  4.0  120.3   91.0  4.43  2.140  16.70  0.0  1.0   5.0   2.0
## 25  27.3  4.0   79.0   66.0  4.08  1.935  18.90  1.0  1.0   4.0   1.0
## 20  21.5  4.0  120.1   97.0  3.70  2.465  20.01  1.0  0.0   3.0   1.0
## 7   24.4  4.0  146.7   62.0  3.69  3.190  20.00  1.0  0.0   4.0   2.0
## 8   22.8  4.0  140.8   95.0  3.92  3.150  22.90  1.0  0.0   4.0   2.0
## 19  33.9  4.0   71.1   65.0  4.22  1.835  19.90  1.0  1.0   4.0   1.0
## 18  30.4  4.0   75.7   52.0  4.93  1.615  18.52  1.0  1.0   4.0   2.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
# Sắp xếp dữ liệu theo giá trị giảm dần của cột cyl
arrange(data_r, desc(cyl))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 11
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  2  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  3  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3
##  4  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3
##  5  15.2     8  276.   180  3.07  3.78  18       0     0     3     3
##  6  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4
##  7  10.4     8  460    215  3     5.42  17.8     0     0     3     4
##  8  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4
##  9  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2
## 10  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
data_py.sort_values(&amp;#39;cyl&amp;#39;, ascending=False).head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      mpg  cyl   disp     hp  drat     wt   qsec   vs   am  gear  carb
## 16  14.7  8.0  440.0  230.0  3.23  5.345  17.42  0.0  0.0   3.0   4.0
## 30  15.0  8.0  301.0  335.0  3.54  3.570  14.60  0.0  1.0   5.0   8.0
## 4   18.7  8.0  360.0  175.0  3.15  3.440  17.02  0.0  0.0   3.0   2.0
## 28  15.8  8.0  351.0  264.0  4.22  3.170  14.50  0.0  1.0   5.0   4.0
## 6   14.3  8.0  360.0  245.0  3.21  3.570  15.84  0.0  0.0   3.0   4.0
## 24  19.2  8.0  400.0  175.0  3.08  3.845  17.05  0.0  0.0   3.0   2.0
## 23  13.3  8.0  350.0  245.0  3.73  3.840  15.41  0.0  0.0   3.0   4.0
## 22  15.2  8.0  304.0  150.0  3.15  3.435  17.30  0.0  0.0   3.0   2.0
## 21  15.5  8.0  318.0  150.0  2.76  3.520  16.87  0.0  0.0   3.0   2.0
## 11  16.4  8.0  275.8  180.0  3.07  4.070  17.40  0.0  0.0   3.0   3.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. Tạo thuộc tính mới&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
# Tạo và thêm biến mới có tên cyl2
mutate(data_r, cyl2 = mean(cyl))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 12
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb  cyl2
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4  6.19
##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4  6.19
##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1  6.19
##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1  6.19
##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2  6.19
##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1  6.19
##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4  6.19
##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2  6.19
##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2  6.19
## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4  6.19
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
import numpy as np
data_py.assign(cyl2 = lambda x: np.mean(x.cyl)).head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     mpg  cyl   disp     hp  drat     wt   qsec   vs   am  gear  carb    cyl2
## 0  21.0  6.0  160.0  110.0  3.90  2.620  16.46  0.0  1.0   4.0   4.0  6.1875
## 1  21.0  6.0  160.0  110.0  3.90  2.875  17.02  0.0  1.0   4.0   4.0  6.1875
## 2  22.8  4.0  108.0   93.0  3.85  2.320  18.61  1.0  1.0   4.0   1.0  6.1875
## 3  21.4  6.0  258.0  110.0  3.08  3.215  19.44  1.0  0.0   3.0   1.0  6.1875
## 4  18.7  8.0  360.0  175.0  3.15  3.440  17.02  0.0  0.0   3.0   2.0  6.1875
## 5  18.1  6.0  225.0  105.0  2.76  3.460  20.22  1.0  0.0   3.0   1.0  6.1875
## 6  14.3  8.0  360.0  245.0  3.21  3.570  15.84  0.0  0.0   3.0   4.0  6.1875
## 7  24.4  4.0  146.7   62.0  3.69  3.190  20.00  1.0  0.0   4.0   2.0  6.1875
## 8  22.8  4.0  140.8   95.0  3.92  3.150  22.90  1.0  0.0   4.0   2.0  6.1875
## 9  19.2  6.0  167.6  123.0  3.92  3.440  18.30  1.0  0.0   4.0   4.0  6.1875&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5. Thống kê mô tả theo phân nhóm&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
data_r %&amp;gt;% 
  group_by(cyl, am) %&amp;gt;% 
  summarise(mean_cyl = mean(cyl),
            sum_cyl = sum(cyl),
            count_cyl = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` regrouping output by &amp;#39;cyl&amp;#39; (override with `.groups` argument)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
## # Groups:   cyl [3]
##     cyl    am mean_cyl sum_cyl count_cyl
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;
## 1     4     0        4      12         3
## 2     4     1        4      32         8
## 3     6     0        6      24         4
## 4     6     1        6      18         3
## 5     8     0        8      96        12
## 6     8     1        8      16         2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
data_py.groupby([&amp;#39;cyl&amp;#39;, &amp;#39;am&amp;#39;])[&amp;#39;cyl&amp;#39;].agg([&amp;#39;mean&amp;#39;, &amp;#39;sum&amp;#39;, &amp;#39;count&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          mean   sum  count
## cyl am                    
## 4.0 0.0   4.0  12.0      3
##     1.0   4.0  32.0      8
## 6.0 0.0   6.0  24.0      4
##     1.0   6.0  18.0      3
## 8.0 0.0   8.0  96.0     12
##     1.0   8.0  16.0      2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;6. Tóm tắt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dưới đây là tóm tắt so sánh một số thao tác với dữ liệu hay dùng nhất trong Python và R&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Querying, Filtering, Sampling&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;dim(df)&lt;/td&gt;
&lt;td&gt;df.shape&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;head(df)&lt;/td&gt;
&lt;td&gt;df.head()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;slice(df, 1:10)&lt;/td&gt;
&lt;td&gt;df.iloc[:9]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;filter(df, col1 == 1, col2 ==1)&lt;/td&gt;
&lt;td&gt;df.query(‘col1 == 1 &amp;amp; col2 == 1’)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;df[df&lt;span class=&#34;math inline&#34;&gt;\(col1 == 1 &amp;amp; df\)&lt;/span&gt;col2 == 1]&lt;/td&gt;
&lt;td&gt;df[(df.col1 == 1) &amp;amp; (df.col2 == 1)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;select(df, col1, col2)&lt;/td&gt;
&lt;td&gt;df[[‘col1’, ‘col2’]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;select(df, col1:col3)&lt;/td&gt;
&lt;td&gt;df.loc[:, ‘col1’:‘col3’]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;select(df, -(col1:col3))&lt;/td&gt;
&lt;td&gt;df.drop(cols_to_drop, axis=1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;distinct(select(df, col1))&lt;/td&gt;
&lt;td&gt;df[[‘col1’]].drop_duplicates()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;distinct(select(df, col1, col2))&lt;/td&gt;
&lt;td&gt;df[[‘col1’, ‘col2’]].drop_duplicates()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;sample_n(df, 10)&lt;/td&gt;
&lt;td&gt;df.sample(n=10)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;sample_frac(df, 0.01)&lt;/td&gt;
&lt;td&gt;df.sample(frac=0.01)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Sorting&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;arrange(df, col1, col2)&lt;/td&gt;
&lt;td&gt;df.sort_values([‘col1’, ‘col2’])&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;arrange(df, desc(col1))&lt;/td&gt;
&lt;td&gt;df.sort_values(‘col1’, ascending=False)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Grouping and Summarizing&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;50%&#34; /&gt;
&lt;col width=&#34;50%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;summary(df)&lt;/td&gt;
&lt;td&gt;df.describe()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;gdf &amp;lt;- group_by(df, col1)&lt;/td&gt;
&lt;td&gt;gdf = df.groupby(‘col1’)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;summarise(gdf, avg=mean(col1, na.rm=TRUE))&lt;/td&gt;
&lt;td&gt;df.groupby(‘col1’).agg({‘col1’: ‘mean’})&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;summarise(gdf, total=sum(col1))&lt;/td&gt;
&lt;td&gt;df.groupby(‘col1’).sum()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>А classification approach based on a combination of deep neural networks for predicting failures of complex multi-object systems</title>
      <link>/publication/moit2020/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/publication/moit2020/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Фреймворка для предсказательного моделирования отказов сложных многообъектных систем</title>
      <link>/publication/paten4/</link>
      <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/publication/paten4/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>STATISTICAL AND MACHINE LEARNING HIGH-FREQUENCY TIME SERIES FORECASTING METHODS IN AUTOMATIC MODE</title>
      <link>/publication/vkit2020/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/publication/vkit2020/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Failure prediction of complex multiple-component systems based on a combination of neural networks&#39;:&#39; Ways to improve the accuracy of forecasting</title>
      <link>/publication/hi-tech2020/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/publication/hi-tech2020/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Architecture of predictive maintenance system of complex multi-object systems in Industry 4.0 concept</title>
      <link>/publication/swsys2020/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/publication/swsys2020/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>PdM&#39;:&#39; A predictive maintenance modeling tool implemented as R-package and web-application</title>
      <link>/publication/soict2019/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/publication/soict2019/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>DEEP NEURAL NETWORKS FOR PREDICTIVE MAINTENANCE</title>
      <link>/publication/moit2019/</link>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/publication/moit2019/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data-Driven Framework for Predictive Maintenance in Industry 4.0 Concept</title>
      <link>/publication/citds2019/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/publication/citds2019/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The PdM Project</title>
      <link>/project/pdm-project/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/project/pdm-project/</guid>
      <description>&lt;p&gt;Sử dụng &lt;code&gt;R Shiny&lt;/code&gt; để phát triển ứng dụng &lt;code&gt;web&lt;/code&gt; tương tác (interactive web app), cho phép  &lt;code&gt;tracking&lt;/code&gt;   và   &lt;code&gt;visualization&lt;/code&gt;  luồng dữ liệu đa cảm biến, phát hiện bất thường, dự đoán hỏng hóc và tuổi thọ của máy móc trong thời gian thực.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/3Ir7xnPMX8o?autoplay=1&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Data Formats and Visual Tools for Forecast Evaluation</title>
      <link>/publication/preprint/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Data-driven method for remaining useful life prediction of complex multiple-component systems</title>
      <link>/publication/hi-tech2019/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/publication/hi-tech2019/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-academic&#34;&gt;Create slides in Markdown with Academic&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic&lt;/a&gt; | 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
&lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
Three
&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://spectrum.chat/academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Schemas for Forecasting (with Examples in R)</title>
      <link>/publication/smart2018/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      <guid>/publication/smart2018/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Generating Proactive Decisions Using a Method Based on LSTM and Classification</title>
      <link>/publication/%D0%BC%D0%BCe%D1%822018/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      <guid>/publication/%D0%BC%D0%BCe%D1%822018/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>On-the-Fly Multiple Sources Data Analysis in AR-Based Decision Support Systems</title>
      <link>/publication/dcnn2018/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      <guid>/publication/dcnn2018/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grammar for queries for heterogeneous data storage in proactive systems</title>
      <link>/publication/swsys2018/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <guid>/publication/swsys2018/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sử dụng kết hợp R và Python trong data science</title>
      <link>/post/s-d-ng-k-t-h-p-r-va-python-trong-data-science/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      <guid>/post/s-d-ng-k-t-h-p-r-va-python-trong-data-science/</guid>
      <description>


&lt;p&gt;Một câu hỏi thường hay đặt ra bởi nhiều nhà khoa học dữ liệu, đặc biệt là những người mới trong lĩnh vực này đó là: Python hay R tốt hơn cho khoa học dữ liệu? Thực ra còn nhiều ngôn ngữ khác cho khoa học dữ liệu như là: Java, C, Scala, Matlab, Julia,…nhưng Python và R đang dẫn đầu trong phần lớn thế giới khoa học dữ liệu.&lt;/p&gt;
&lt;p&gt;R vốn được thiết kế bởi các nhà thống kê và đã trở thành lựa chọn hàng đầu cho những ai bước vào lĩnh vực khoa học dữ liệu. Một trong những thế mạnh chính của R là số lượng khổng lồ các packages chuyên dụng và cộng đồng support vô cùng lớn. Tuy nhiên, độ phổ biến của nó gần đây đã giảm đi một chút.&lt;/p&gt;
&lt;p&gt;Trong khi đó, Python là ngôn ngữ đa mục đích có thể sử dụng trong nhiều lĩnh vực khác nhau từ lập trình ứng dụng web đến viết game. Có thể thấy là hiện nay Python đang thách thức ngôi vị lâu đầu của R như là một ngôn ngữ chung cho các nhà khoa học dữ liệu.&lt;/p&gt;
&lt;p&gt;Tuy nhiên các doanh nghiệp sẽ không ưu tiên ngôn ngữ nào khi xem xét các kỹ năng của một nhà khoa học dữ liệu, vì vậy các bạn phải biết cách linh hoạt trong việc sử dụng các ngôn ngữ này làm công cụ cho khoa học dữ liệu làm sao hiệu quả nhất.&lt;/p&gt;
&lt;p&gt;Cả R và Python đều có sử dụng để giải quyết các bài toán tương tự nhau trong khoa học dữ liệu. Cả hai đều có những packages hoặc libraries để giải quyết những vấn đề trong phân tích dữ liệu như tiền xủ lý, ứng dụng machine learning cho dữ liệu. Cả hai đều là lựa chọn tốt cho nghiên cứu khả lặp - một kỹ năng đòi hỏi trong rất nhiều lĩnh vực khác nhau. Tuy nhiên hai ngôn ngữ này lại có những tính năng tuyệt vời và điểm mạnh riêng vì vậy chúng ta nên kết hợp chúng để tận dụng những lợi thế của nhau, chỗ nào tiện và mạnh cái gì thì dùng cái đó. Hình dưới đây mô tả tóm tắt những điểm nổi trội của hai ngôn ngữ này:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-python.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ở post này tôi sẽ giới thiệu với các bạn cách kết hợp hai ngôn ngữ này trong môi trường R bằng cách sử dụng package &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34;&gt;reticulate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Trước hết để tiến hành làm việc với Python và R chúng ta cần cài đặt chúng:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python:&lt;/strong&gt; Nếu bạn muốn đơn giản hóa việc tạo môi trường khi thực hiện các dự án bằng Python, đặc biệt liên quan đến các lĩnh vực khoa học dữ liệu, AI, Data, … Anaconda sẽ là lựa chọn bạn nên cân nhắc. Bạn có thể tải và cài Anaconda tại &lt;a href=&#34;https://www.anaconda.com/products/individual#macos&#34;&gt;đây&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;R:&lt;/strong&gt; Để làm việc với R các bạn cần tải R và Rstudio. Tải và cài phiên bản R mới nhất tại &lt;a href=&#34;https://cran.r-project.org/bin/windows/base/&#34;&gt;đây&lt;/a&gt;. Tải và cài đặt RStudion tại &lt;a href=&#34;https://rstudio.com/products/rstudio/download/&#34;&gt;đây&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Để kết hợp R và Python trong môi trường R chúng ta cần cài R package &lt;code&gt;reticulate&lt;/code&gt; bằng câu lệnh sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;reticulate&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tuy nhiên cách cài đặt như các bạn vừa thực hiện ở trên là không khuyến khích. Nguyên nhân là một
số gói của R để sử dụng được còn phụ thuộc vào một hoặc một số gói khác. Do vậy an toàn nhất là cài
đặt với lựa chọn &lt;code&gt;dependencies = TRUE&lt;/code&gt; với hàm ý rằng chúng ta sẽ cài đặt luôn tất cả các gói phụ
thuộc:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;reticulate&amp;quot;, dependencies = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Package &lt;code&gt;reticulate&lt;/code&gt; gồm các công cụ hỗ trợ tương tác giữa R và Python. Cụ thể package này giải quyết được những việc sau:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gọi Python từ R bằng những phương pháp khác nhau: từ R Markdown, từ mã nguồn Python, import các Python modules, và sử dụng tương tác trực tiếp trên R session.&lt;/li&gt;
&lt;li&gt;Chuyển đổi các đối tượng R và Python với nhau (ví dụ giữa các data frames R và Pandas, giữa các R matrices và NumPy arrays)&lt;/li&gt;
&lt;li&gt;Liên kết linh hoạt giữa các phiên bản Python khác nhau bao gồm cả virtual environments và Conda environments.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Kêt hợp R và Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Để có thể dùng Python trong môi trường R chúng ta cần nạp thư thư viện &lt;code&gt;reticulate&lt;/code&gt; theo câu lệnh sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Để kiểm tra môi trường Python có trong máy, các bạn dùng câu lệnh sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda_list()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    name                                               python
## 1 r-env C:\\Users\\svcuo\\Anaconda3\\envs\\r-env\\python.exe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dùng hàm &lt;code&gt;use_python()&lt;/code&gt; cho phép bạn chỉ định rõ phiên bản Python cần thiết:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;use_python(&amp;quot;C:/Users/svcuo/Anaconda3/python.exe&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sử dụng hàm &lt;code&gt;use_virtualenv()&lt;/code&gt; và &lt;code&gt;use_condaenv()&lt;/code&gt; cho phép bạn chỉ định phiên bản Python của bạn làm việc trong môi trường virtual hay là Conda:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;use_virtualenv(&amp;quot;myenv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;py_config()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## python:         C:/Users/svcuo/Anaconda3/python.exe
## libpython:      C:/Users/svcuo/Anaconda3/python36.dll
## pythonhome:     C:/Users/svcuo/Anaconda3
## version:        3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 14:00:49) [MSC v.1915 64 bit (AMD64)]
## Architecture:   64bit
## numpy:          C:/Users/svcuo/Anaconda3/Lib/site-packages/numpy
## numpy_version:  1.16.5
## 
## python versions found: 
##  C:/Users/svcuo/Anaconda3/python.exe
##  C:/Users/svcuo/AppData/Local/Programs/Python/Python38-32/python.exe
##  C:/Users/svcuo/Anaconda3/envs/r-env/python.exe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ta có thể cài đặt bất kỳ python library nào trong R bằng cách dùng hàm &lt;code&gt;py_install()&lt;/code&gt; như sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;py_install(&amp;quot;pandas&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Các cách sử dụng kết hợp Python và R trong môi trường R&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Import các python modules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sử dụng hàm &lt;code&gt;import()&lt;/code&gt; cho phép bạn có thể gọi mọi python library và sử dụng trong R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;os &amp;lt;- import(&amp;quot;os&amp;quot;)
os$listdir(&amp;quot;.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; [1] &amp;quot;.RData&amp;quot;       &amp;quot;.Rhistory&amp;quot;    &amp;quot;.Rproj.user&amp;quot;  &amp;quot;assets&amp;quot;       &amp;quot;config&amp;quot;      
 [6] &amp;quot;config.toml&amp;quot;  &amp;quot;content&amp;quot;      &amp;quot;index.Rmd&amp;quot;    &amp;quot;myblog.Rproj&amp;quot; &amp;quot;public&amp;quot;      
[11] &amp;quot;resources&amp;quot;    &amp;quot;static&amp;quot;       &amp;quot;themes&amp;quot;     &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Sourcing Python scripts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bạn có thể nạp bất kỳ một Python scripts nào vào R sử dụng hàm &lt;code&gt;source_python()&lt;/code&gt;. Ví dụ bạn có một Python script tên là &lt;code&gt;flights.py&lt;/code&gt; có dạng:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas as pd

def read_flights(file):
  flights = pd.read_csv(file)
  flights = flights[flights[&amp;#39;dest&amp;#39;] == &amp;quot;ORD&amp;quot;]
  flights = flights[[&amp;#39;carrier&amp;#39;, &amp;#39;dep_delay&amp;#39;, &amp;#39;arr_delay&amp;#39;]]
  flights = flights.dropna()
  return flights&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Và các bạn có thể nạp và thực thi nó trên R như sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;source_python(&amp;quot;RPython/flights.py&amp;quot;)
flights &amp;lt;- read_flights(&amp;quot;flights.csv&amp;quot;)

library(ggplot2)
ggplot(flights, aes(carrier, arr_delay)) + geom_point() + geom_jitter()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. Python REPL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hàm &lt;code&gt;repl_python()&lt;/code&gt; cho phép các bạn có thể làm việc trực tiếp với Python trên R session. Các đối tượng được tạo ra từ Python REPL có thể được truy cập từ R bằng cách sử dụng &lt;em&gt;py$object&lt;/em&gt;. Ví dụ:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/python-repl.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Dùng lệnh &lt;code&gt;exit&lt;/code&gt; để thoát python REPL&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chú ý:&lt;/strong&gt; Trong Python code có thể sử dụng mọi đối tượng được tạo ra từ R bằng các sử dụng đối tượng &lt;code&gt;r.object&lt;/code&gt; (ví dụ &lt;code&gt;r.flights&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Sử dụng python trong R markdown&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Package &lt;code&gt;reticulate&lt;/code&gt; hỗ trợ Python engine cho R Markdown với những thuộc tính sau:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chạy Python code chunks tích hợp trong R session( cho phép trao đổi các đối tượng với nhau)&lt;/li&gt;
&lt;li&gt;Hiển thị Python output, bao gồm cả output từ matplotlib&lt;/li&gt;
&lt;li&gt;Truy cập tới các đối tượng được tạo ra từ Python chunks và ngược lại từ R chunks (sử dụng &lt;code&gt;py$object&lt;/code&gt; và &lt;code&gt;r.object&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Chúng ta hãy cùng xem ví dụ kết hợp R và Python đơn giản sau:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nạp dữ liệu vào Python:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Python
import pandas as pd
dataset_url = &amp;#39;https://raw.githubusercontent.com/svcuong/Datasets/master/pima-indians-diabetes.data.csv&amp;#39;

names = [&amp;#39;preg&amp;#39;, &amp;#39;plas&amp;#39;, &amp;#39;pres&amp;#39;, &amp;#39;skin&amp;#39;, &amp;#39;test&amp;#39;, &amp;#39;mass&amp;#39;, &amp;#39;pedi&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;class&amp;#39;]
data = pd.read_csv(dataset_url, names = names)
print(data.head())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    preg  plas  pres  skin  test  mass   pedi  age  class
## 0     6   148    72    35     0  33.6  0.627   50      1
## 1     1    85    66    29     0  26.6  0.351   31      0
## 2     8   183    64     0     0  23.3  0.672   32      1
## 3     1    89    66    23    94  28.1  0.167   21      0
## 4     0   137    40    35   168  43.1  2.288   33      1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sau đó chuyển dữ liệu và thao tác với dữ liệu bằng R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
table(py$data$preg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  17 
## 111 135 103  75  68  57  50  45  38  28  24  11   9  10   2   1   1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thực hiện data visualization trong R vơi base function &lt;code&gt;boxplot()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
x &amp;lt;- py$data[,1:8]
y &amp;lt;- py$data[,9]

# Boxplot for first 4 attribute
names = c(&amp;#39;preg&amp;#39;, &amp;#39;plas&amp;#39;, &amp;#39;pres&amp;#39;, &amp;#39;skin&amp;#39;)
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(x[,i], main=names[i])
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-ket-hop-r-va-python_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Thực hiện data visualization trong R với &lt;code&gt;ggplot2&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# R
library(ggplot2)
py$data$class &amp;lt;- factor(py$data$class)
ggplot(data = py$data,aes(x = preg)) +
  geom_histogram(binwidth = 0.5,aes(fill = class),position = &amp;quot;dodge&amp;quot;) +
  ggtitle(&amp;quot;Pregnancies Data Distribution&amp;quot;) + ylab(&amp;quot;class Counts&amp;quot;) +
  theme_gray() +
  theme_update(plot.title = element_text(hjust = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-ket-hop-r-va-python_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Tham khảo:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;&lt;a href=&#34;https://rstudio.github.io/reticulate/&#34;&gt;R Interface to Python&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Forvision Project</title>
      <link>/project/forvision-project/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      <guid>/project/forvision-project/</guid>
      <description>&lt;p&gt;The project’s aim is to develop effective means for forecast evaluation and visualization. Based on our experience of implementing data science solutions for forecasting, we outline a typical forecast evaluation setup. Especially, we focus on handling rolling-origin forecasts made across many series over multiple horizons when many alternative methods are used.&lt;/p&gt;
&lt;p&gt;We developed a general framework containing of the following components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Forecast data formats - simple yet flexible enough data structures designed to store data needed for rolling-origin forecast evaluation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exploratory analysis tools needed to make sure that data is of acceptable quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance measurement tools - techniques and graphs for accuracy and comparison.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Generally, the workflow we propose involves the following steps: 1) data preparation, 2) exploratory analysis, 3) performance measurement using appropriate metrics. The project&amp;rsquo;s website describes this process in more detail 
&lt;a href=&#34;https://forvis.github.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Распределенная система слияния и преобработки разнородных данных с разных источников</title>
      <link>/publication/paten3/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      <guid>/publication/paten3/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mở đầu về khoa học dữ liệu. So sánh các khái niệm khái niệm Artificial Intelligence, Machine Learning và Deep Learning</title>
      <link>/post/2020-08-17-khai-niem-co-ban/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      <guid>/post/2020-08-17-khai-niem-co-ban/</guid>
      <description>&lt;p&gt;Khoa học dữ liệu (&lt;code&gt;data science&lt;/code&gt;, DS) là một trong những ngành đang có nhu cầu tuyển dụng cao ở thời điểm hiện tại cũng như trong tương lai xa. Nhà khoa học dữ liệu (data scientist) được 
&lt;a href=&#34;https://hbr.org/2012/10/data-scientist-the-sexiest-job-of-the-21st-century&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Harvard Business Review&lt;/a&gt; đánh giá là “công việc hấp dẫn nhất thế kỷ 21”.&lt;/p&gt;
&lt;p&gt;Vậy DS là gì? Trong thực tế một định nghĩa chính xác về DS không tồn tại, đây là một khái niệm liên ngành và rất rộng. DS là một lĩnh vực về các quá trình và các hệ thống trích rút tri thức hoặc hiểu biết dữ liệu ở các dạng khác nhau với biên độ rộng của các ngành như: Toán học, khoa học thống kê, khoa học thông tin, khoa học máy tính và lĩnh vực chuyên môn cụ thể. Bao gồm xử lý tín hiệu, lý thuyết xác suất thống kê, học máy, khai phá dữ liệu, cơ sở dữ liệu, kỹ thuật thông tin, nhận dạng mẫu, trực quan dữ liệu, các phân tích dự đoán, lý thuyết quyết định, kho dữ liệu, nén dữ liệu, lập trình máy tính, trí tuệ nhân tạo và siêu máy tính. Có thể nói &amp;ldquo;Một nhà khoa học dữ liệu là người giỏi hơn về thống kê so với những kỹ sư phát triển phần mềm và giỏi hơn về lập trình so với những nhà thống kê học.&amp;rdquo;  Về bản chất có thể hiểu khoa học dữ liệu là ngành giúp chúng ta tạo ra giá trị từ dữ liệu với hai nhiệm vụ chính:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thu thập  và xử lý dữ liệu để tìm ra những insights có giá trị.&lt;/li&gt;
&lt;li&gt;Giải thích, trình bày những insights đó cho các bên có liên quan để chuyển hóa isights thành hành động.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Xuât phát từ tên gọi DS ta có hai thành phần cấu thành là &lt;em&gt;data&lt;/em&gt; và &lt;em&gt;science&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data:&lt;/strong&gt; Là thành phần thứ nhất của cụm từ data science, thiếu nó thì tất cả các quá trình tiếp theo đều không thể thực hiện. Sau khi đã có đầy đủ dữ liệu cần thiết, trước khi sử dụng, công việc đầu tiên bạn cần làm là làm sạch và biến đổi dữ liệu - bước quan trọng nhất trong phân tích dữ liệu, nó chiếm đến 80% tổng số thời gian thực hiện phân tích.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Science:&lt;/strong&gt; Chúng ta đã có dữ liệu vậy bây giờ làm gì với chúng? Đó là phân tích, trích rút các quy luật có ích và làm sao có để có thể sử dụng chúng một cách hiệu quả. Ở đây các lĩnh vực sẽ giúp chúng ta như là thống kê, máy học, học sâu, tối ưu. Máy học giúp chúng ta tìm ra các quy luật trong dữ liệu để có thể dự báo thông tin cần thiết với đối tượng mói sau đó.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DS và trí tuệ nhân tạo (&lt;code&gt;Artificial Intelligence&lt;/code&gt;, AI) thường bị đánh tráo khái niệm. Để phân biệt chính xác khái niệm về hai công nghệ này cũng như các khái niệm trong AI, các bạn hãy cùng tham khảo bài viết nhé! Cuối bài tôi sẽ giới thiệu 1 số ngôn ngữ lập trình cho khoa học dữ liệu.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;1 Phân biệt các khái niệm Data Scinece, Artificial Intelligence, machine learning và deep learning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thực ra các lĩnh vực này đều có sự liên quan, chồng chéo đan xen với nhau. &lt;code&gt;AI&lt;/code&gt; là một trong các công cụ cho DS. &lt;code&gt;DS&lt;/code&gt; sử dụng &lt;code&gt;AI&lt;/code&gt; trong các hoạt động của mình, tuy nhiên chắc chắn nó không bao hàm AI. Hay nói cách khác trong DS có sự đóng góp bởi một số khía cạnh của AI nhưng lại không phản ánh tất cả về &lt;code&gt;AI&lt;/code&gt;. Hình dưới đây mô tả mối quan hệ của các khái niệm này:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-17-khai-niem-co-ban_files/1_-XKVI5SAEpffNR7BusdvNQ.png&#34; alt=&#34;&#34;&gt;

&lt;a href=&#34;https://medium.com/ai-in-plain-english/data-science-vs-artificial-intelligence-vs-machine-learning-vs-deep-learning-50d3718d51e5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source: Gmggroup.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AI&lt;/code&gt; là một ngành khoa học được sinh ra với mục đích nhằm làm cho máy móc do con người tạo ra có những khả năng của trí tuệ và trí thông  minh của con người - &lt;code&gt;thông minh nhân tạo&lt;/code&gt;, tiêu biểu như biết suy nghĩ và lập luận để giải quyết vấn đề, biết giao tiếp do hiểu ngôn ngữ và tiếng nói, biết học và tự thích nghi,&amp;hellip;. Ý tưởng về &lt;code&gt;AI&lt;/code&gt; xuất hiện vào những năm 1950 khi một nhóm những người tiên phong trong lĩnh vực khoa học máy tính non trẻ tự đặt ra cho mình câu hỏi, liệu có thể làm cho máy tính biết &lt;code&gt;suy nghĩ&lt;/code&gt;? - hệ quả của câu hỏi đó chính là những gì chúng ta đang học trong ngày hôm nay. &lt;code&gt;Machine Learning&lt;/code&gt; và &lt;code&gt;Deep Learning&lt;/code&gt; chính là phương tiện, công cụ để đạt được mục tiêu của &lt;code&gt;AI&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Để hiểu về  &lt;code&gt;Machine Learning&lt;/code&gt; và &lt;code&gt;Deep Learning&lt;/code&gt; trước hết chúng ta hãy cùng tìm hiểu khái niệm  học biểu diễn (&lt;code&gt;representation learning&lt;/code&gt;) từ dữ liệu. Trong cuộc sống hàng ngày, hầu hết chúng ta đã quen thuộc với việc mô tả các sự vật, hiện tượng của thế giới bên ngoài qua các khái niệm, các con số, các giác quan,&amp;hellip; Nhưng mô tả đó được gọi là các biểu diễn (&lt;code&gt;representation&lt;/code&gt;) của sự vật, hiện tượng. Máy học (&lt;code&gt;machine learning&lt;/code&gt;) cũng vậy, mục đích của nó là tìm cách biến đổi dữ liệu đầu vào thành các đầu ra có ý nghĩa. Hay nói một cách khoa học, một mô hình &lt;code&gt;machine learning&lt;/code&gt; sẽ ánh xạ dữ liệu từ một không gian biểu diễn vào một không gian biểu diễn khác mà trên đó chúng ta có thể hiểu rõ hơn về dữ liệu ban đầu. Chính vì vậy &lt;code&gt;machine learning&lt;/code&gt; được gọi là học biểu diễn (&lt;code&gt;representation learning&lt;/code&gt;). Cách học này đã tạo ra một &lt;code&gt;new programming paradigm&lt;/code&gt;. Trong lập trình truyền thống, con người nhập các quy tắc &lt;code&gt;rules&lt;/code&gt; (program) và dữ liệu để xử lý theo các quy tắc đó để thu được &lt;code&gt;answers&lt;/code&gt;. Còn trong &lt;code&gt;Machine learning&lt;/code&gt; thì con người sẽ nhập dữ liệu và &lt;code&gt;answers&lt;/code&gt; tương ứng với dữ liệu đó, còn ở đầu ra sẽ thu được các &lt;code&gt;rules&lt;/code&gt; - các mô hình &lt;code&gt;machine learning&lt;/code&gt;. Các mô hình này sau đó có thể sử dụng cho dữ liệu mới để thu được các &lt;code&gt;answers&lt;/code&gt;. Trong &lt;code&gt;machine learning&lt;/code&gt; hệ thống sẽ được huấn luyện thay vì lập trình rõ ràng. Nhiệm vụ chính của &lt;code&gt;Machine learning&lt;/code&gt; chính là tự động tìm các phương pháp biến đổi dữ liệu đầu vào. Các phương pháp này có thể là thay đổi hệ tọa độ, hay là xử dụng các phép chiếu,&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/ml-dl-1.PNG&#34; alt=&#34;Machine Learning - A new programming paradim&#34;&gt;&lt;/p&gt;
&lt;p&gt;Cùng một sự vật, hiện tượng có thể có nhiều cách biểu diễn khác nhau. &lt;code&gt;Deep Learning&lt;/code&gt; ở đây cũng vậy, nó chính là một ngành nhỏ của &lt;code&gt;Machine Learning&lt;/code&gt;: xử dụng cách tiếp cận mởi để tìm kiếm phương thức biểu diễn dữ liệu - bằng cách học liên tiếp các qua các lớp (&lt;code&gt;layers&lt;/code&gt;) hay gọi là mạng thần kinh nhân tạo (&lt;code&gt;Neural Network&lt;/code&gt;). Chữ &lt;code&gt;Deep&lt;/code&gt; trong &lt;code&gt;Deep Learning&lt;/code&gt; không có nghĩa là phương pháp này cho phép hiểu sâu hơn, mà chỉ để thể hiện cách biểu diễn dữ liệu qua nhiều lớp. Số lượng các lớp tạo thành một mô hình deep learning được gọi là chiều sâu (&lt;code&gt;depth&lt;/code&gt;) của mô hình đó.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;2 Ngôn ngữ lập trình cho khoa học dữ liệu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chọn ngôn ngữ nào để bắt đầu sự nghiệp Khoa học dữ liệu sẽ có nhiều thử thách đối với bạn. Có một số ngôn ngữ phục vụ cho ngành này phải kể đến những ngôn ngữ lập trình sau:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;: là một trong những platforms mạnh cho học máy, thống kê và phân tích dữ liệu được phát triển và sử dụng bởi các nhà khoa học thống kê và phân tích dữ liệu hàng đầu trên thế giới. Nếu bạn muốn đi sâu vào phân tích dữ liệu và thống kê, thì R là ngôn ngữ dành cho bạn.Ngôn ngữ này đã có sự tăng trưởng vượt bậc khi phân tích dữ liệu và khoa học dữ liệu trở nên phổ biến hơn trong những năm gần đây. Hàng năm, số lượng người dùng R tăng hơn 40% và ngày càng có nhiều cơ quan và tổ chức sử dụng R trong hoạt động phân tích thường nhật Tuy nhiên trong thời rian gần đây độ phổ biến của nó đã giảm đi một chút.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt; là một ngôn ngữ lập trình đa mục đích, khá mạnh và bao gồm các công cụ có thể ứng dụng vào các môi trường yêu cầu hình tượng hoá mà có thể xuất hiện trên các trang web hoặc trên điện thoại.  Python cung cấp hỗ trợ cho một số lượng lớn các thư viện học sâu như Pandas, Matplotlib, Tensorflow, Keras, scikit-learn, v.v. Để bắt đầu với ngành Data Science. Python là một trong những ngôn ngữ lập trình lý tưởng và nó cũng dễ đọc hơn R.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java:&lt;/strong&gt; Ngôn ngữ lập trình Java gần đây được xếp hạng một trong những ngôn ngữ được yêu thích và đa năng nhất để viết, dựa vào bản khảo sát từ WP Engine. Nó cũng là một ngôn ngữ lập trình đa mục đích, được thiết kế riêng để càng ít phụ thuộc vào việc thực thi càng tốt. Nó có thể được sử dụng để xây dựng mọi thứ, đặc biệt là các nền tảng có thể mở rộng, nền tảng đa luồng (multithread) và có nền tảng người dùng mạnh mẽ. ác framework như Apache Spark, Hadoop và Hive ngày càng phổ biến trong môi trường thương mại, làm cho Java trở thành một trong những ngôn ngữ được các nhà khoa học dữ liệu yêu cầu. Kiến thức về Java sẽ tạo điều kiện cho bạn điều chỉnh và duy trì các nền tảng dữ liệu lớn như Hadoop được viết bằng cùng một ngôn ngữ.&lt;/p&gt;
&lt;p&gt;Ngoài ra còn một số ngôn ngữ khác như là Julia, Scala, &amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Tham khảo:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;
&lt;a href=&#34;https://medium.com/ai-in-plain-english/data-science-vs-artificial-intelligence-vs-machine-learning-vs-deep-learning-50d3718d51e5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The differences between Data Science, Artificial Intelligence, Machine Learning, and Deep Learning&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Программа расчета асимптотических оценок показателей эффективностей системы эксплуатационного котроля объекта авиационной техники</title>
      <link>/publication/paten2/</link>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      <guid>/publication/paten2/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Программа расчета статистических оценок показателей эффективностей системы эксплуатационного котроля объекта авиационной техники</title>
      <link>/publication/paten1/</link>
      <pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate>
      <guid>/publication/paten1/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to cite this work.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mở đầu với R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>LICENSE: CC BY-SA</title>
      <link>/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/license/</guid>
      <description>&lt;p&gt;My blog posts are under an 
&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/deed.en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Attribution-ShareAlike 4.0 International Creative Commons License&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;
&lt;i class=&#34;fab fa-creative-commons fa-2x mr-1&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fab fa-creative-commons-by fa-2x mr-1&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fab fa-creative-commons-sa fa-2x&#34;&gt;&lt;/i&gt;
&lt;/center&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>/about-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/about-me/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
