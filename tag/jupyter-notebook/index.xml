<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jupyter Notebook | Khoa Học Dữ Liệu</title>
    <link>/tag/jupyter-notebook/</link>
      <atom:link href="/tag/jupyter-notebook/index.xml" rel="self" type="application/rss+xml" />
    <description>Jupyter Notebook</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>vi-en</language><copyright>© 2020 Cuong Sai. All Rights Reserved</copyright><lastBuildDate>Mon, 31 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu47efca792e1e7000f9078d7b8f1dac48_31011_512x512_fill_lanczos_center_2.PNG</url>
      <title>Jupyter Notebook</title>
      <link>/tag/jupyter-notebook/</link>
    </image>
    
    <item>
      <title>Cách thêm và sử dụng R trong Jupyter Notebook</title>
      <link>/post/r-jupyter/r-jupyter/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/r-jupyter/r-jupyter/</guid>
      <description>


&lt;p&gt;Để cài đặt và sử dụng &lt;code&gt;R&lt;/code&gt; + &lt;code&gt;r-essentials packages&lt;/code&gt; trong Jupyter Notebook có 2 cách sau:&lt;/p&gt;
&lt;div id=&#34;cách-1-dùng-anaconda-navigation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cách 1: Dùng Anaconda Navigation&lt;/h2&gt;
&lt;p&gt;Bước 1. Mở Anaconda &lt;code&gt;Navigator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-jupyter1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Bước 2. Chọn &lt;code&gt;Environments&lt;/code&gt; để tạo môi trường Anaconda mới. Click &lt;code&gt;Create&lt;/code&gt; và tích chọn &lt;code&gt;r&lt;/code&gt; cũng như phiên bản &lt;code&gt;Python&lt;/code&gt; cần thiết:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-jupyter2.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Bước 3. Mở &lt;code&gt;Jupyter Notebook&lt;/code&gt; trong môi trường mới tạo có chứa &lt;code&gt;R package&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-jupyter3.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cách-2-sử-dụng-anaconda-prompt&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cách 2: Sử dụng Anaconda &lt;code&gt;Prompt&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Bước 1. Mở Anaconda &lt;code&gt;Prompt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-python3.png&#34; /&gt;
Bước 2. Tạo và &lt;code&gt;active&lt;/code&gt; môi trường anaconda mới bằng lệnh sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda create -n ENV_NAME
conda activate ENV_NAME&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bước 3. Cài &lt;code&gt;r-irkernel&lt;/code&gt; cho môi trường anaconda mới tạo bằng lệnh sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda install -c r r-irkernel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bước 4. Mở Jupyter Notebook trong môi trường anaconda chứa R mới khởi tạo bằng lệnh:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jupyter notebook&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sau khi đã mở &lt;code&gt;Jupyter Notebook&lt;/code&gt; trong môi trường Anaconda mới tạo có chứa &lt;code&gt;R&lt;/code&gt;, để tạo một &lt;code&gt;notebook&lt;/code&gt; mới cho ngôn ngữ &lt;code&gt;R&lt;/code&gt;, chọn &lt;code&gt;New&lt;/code&gt; rồi chọn &lt;code&gt;R&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r-jupyter4.PNG&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tips-cho-cài-r-packages-trong-môi-trường-anaconda&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tips cho cài &lt;code&gt;R packages&lt;/code&gt; trong môi trường Anaconda:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Active&lt;/code&gt; môi trường Anaconda có chứa R từ &lt;code&gt;Anaconda Prompt&lt;/code&gt; và gõ lệnh cài &lt;code&gt;R package&lt;/code&gt; như sau:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda install r-NAME_PACKAGE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ví dụ cài gói &lt;code&gt;ggplot2&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conda install r-ggplot2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nếu không cài được thì chúng ta có thể:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Launching R&lt;/code&gt; trực tiếp trong &lt;code&gt;Anaconda Prompt&lt;/code&gt; và dùng lệnh &lt;code&gt;install.packages(&#34;NAME_PACKAGE&#34;)&lt;/code&gt; để cài đặt package như khi sử dụng R.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hoặc dùng cách sau:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;conda install conda-build
conda skeleton cran &amp;lt;something_on_cran&amp;gt;
conda build r-&amp;lt;something_on_cran_lowercased&amp;gt;
conda install -c local r-&amp;lt;something_on_cran_lowercased&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Download và trực quan hóa dữ liệu Covid-19 từ John Hopkins database (sử dụng Python code)</title>
      <link>/post/covid-19-python/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/covid-19-python/</guid>
      <description>&lt;p&gt;&lt;code&gt;Covid-19&lt;/code&gt; là một đại dịch bệnh truyền nhiễm với tác nhân là virus &lt;code&gt;SARS-CoV-2&lt;/code&gt;, hiện đang ảnh hưởng và gây thiệt hại nặng nề trên phạm vi toàn cầu. Kể từ khi đại dịch &lt;code&gt;Covid-19&lt;/code&gt; bắt đầu xuất hiện ở Vũ Hán - Trung Quốc đến nay, cái tên trường Đại học Jonhs Hopkins (Mỹ) được nhắc đi nhắc lại hằng ngày trên các phương tiện truyền thông và là một trong những cụm từ được trích dẫn nhiều nhất. Lý do đó là Đại học Johns Hopkins đã phát triển một trong những hệ thống theo dõi dữ liệu COVID-19 bền bỉ và đáng tin cậy nhất trên thế giới cho đến nay.&lt;/p&gt;
&lt;p&gt;Dữ liệu Covid-19 được đại học &lt;code&gt;John Hopkins&lt;/code&gt; thu thập và cập nhật hàng ngày tại đây 
&lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Hopkins database&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Trong bài này để hiểu hơn về đại dịch này tôi sẽ hướng dẫn các bạn cách download dữ liệu Covid-19 từ 
&lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Hopkins database&lt;/a&gt; và thực hành các thao tác chuẩn bị dữ liệu (làm sạch và biến đổi) với thư viện &lt;code&gt;pandas&lt;/code&gt; và trực quan hóa dữ liệu với thư viện &lt;code&gt;maplotlib&lt;/code&gt; sử dụng ngôn ngữ Python. Sau khi đọc xong bài này các bạn sẽ nắm được:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cách download dữ liệu Covid-19 từ &lt;code&gt;Jonh Hopkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cách làm sạch và biến đổi dữ liệu dạng &lt;code&gt;data frame&lt;/code&gt; với thư viện &lt;code&gt;pandas&lt;/code&gt;: xử lý dữ liệu bị thiếu, gộp các dataframes, chuyển đổi dữ liệu từ dạng &lt;code&gt;wide format&lt;/code&gt; sang dạng &lt;code&gt;long fromat&lt;/code&gt;, subset,&amp;hellip;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cách trực quan hóa dữ liệu &lt;code&gt;Covid-19&lt;/code&gt; sử dụng thư viện &lt;code&gt;matplotlib&lt;/code&gt;: Pie chart, Bar chart, Line chart, Multi-Line Chart, xử lý dữ liệu &lt;code&gt;date&lt;/code&gt; trong vẽ biểu đồ,&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Từ đó các bạn có thể phát triển các kỹ thuật trên thành các &lt;code&gt;Data visualization Dashboards&lt;/code&gt; hoặc là web tương tác để &lt;code&gt;tracking&lt;/code&gt; tình hình &lt;code&gt;Covid-19&lt;/code&gt; trên toàn thế giới tương tự như 
&lt;a href=&#34;https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Hopkins University Dashboard&lt;/a&gt;, 
&lt;a href=&#34;https://covid19.who.int/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WHO COVID-19 Dashboard&lt;/a&gt;,&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;nội-dung-chính-của-bài-bao-gồm&#34;&gt;Nội dung chính của bài bao gồm:&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;#prepare-data&#34;&gt;1. Download &amp;amp; chuẩn bị dữ liệu Covid-19 sử dụng thư viện pandas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;#data-visualization&#34;&gt;2. Trực quan hóa dữ liệu Covid-19 sử dụng thư viện matploblib&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;prepare-data&#34;&gt;1. Download và chuẩn bị dữ liệu&lt;/h2&gt;
&lt;p&gt;Trước hết để thực hành chúng ta cần nạp các thư viện cần thiết trên &lt;code&gt;Python&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime, timedelta
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Để thực hành tôi sẽ load 3 tập dữ liệu sau từ kho dữ liệu qua &lt;code&gt;url_links&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Confirmed:&lt;/code&gt; (Số trường hợp mới phát hiện)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Deaths:&lt;/code&gt; (Số trường hợp tử vong)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Recovered:&lt;/code&gt; (Số trường hợp hồi phục)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url_confd = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39;
url_death = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39;
url_recvd = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&#39;
df_confd = pd.read_csv(url_confd)
df_death = pd.read_csv(url_death)
df_recvd = pd.read_csv(url_recvd)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra thông tin các tập dữ liệu này:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df_confd.info())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 266 entries, 0 to 265
Columns: 224 entries, Province/State to 8/28/20
dtypes: float64(2), int64(220), object(2)
memory usage: 465.6+ KB
None
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df_death.info())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 266 entries, 0 to 265
Columns: 224 entries, Province/State to 8/28/20
dtypes: float64(2), int64(220), object(2)
memory usage: 465.6+ KB
None
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df_recvd.info())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 253 entries, 0 to 252
Columns: 223 entries, Province/State to 8/27/20
dtypes: float64(2), int64(219), object(2)
memory usage: 440.9+ KB
None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra 5 hàng đầu tiên của tập dữ liệu &lt;code&gt;df_confd&lt;/code&gt; (2 tập còn lại tương tự):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df_confd.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long  1/22/20  1/23/20  \
0            NaN    Afghanistan  33.93911  67.709953        0        0   
1            NaN        Albania  41.15330  20.168300        0        0   
2            NaN        Algeria  28.03390   1.659600        0        0   
3            NaN        Andorra  42.50630   1.521800        0        0   
4            NaN         Angola -11.20270  17.873900        0        0   

   1/24/20  1/25/20  1/26/20  1/27/20  ...  8/19/20  8/20/20  8/21/20  \
0        0        0        0        0  ...    37599    37856    37894   
1        0        0        0        0  ...     7812     7967     8119   
2        0        0        0        0  ...    39847    40258    40667   
3        0        0        0        0  ...     1024     1024     1045   
4        0        0        0        0  ...     2015     2044     2068   

   8/22/20  8/23/20  8/24/20  8/25/20  8/26/20  8/27/20  8/28/20  
0    37953    37999    38054    38070    38113    38129    38140  
1     8275     8427     8605     8759     8927     9083     9195  
2    41068    41460    41858    42228    42619    43016    43403  
3     1045     1045     1060     1060     1098     1098     1124  
4     2134     2171     2222     2283     2332     2415     2471  

[5 rows x 224 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trích xuất thông tin về ngày từ tập dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dates = df_confd.columns[4:]
print(dates)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Index([&#39;1/22/20&#39;, &#39;1/23/20&#39;, &#39;1/24/20&#39;, &#39;1/25/20&#39;, &#39;1/26/20&#39;, &#39;1/27/20&#39;,
       &#39;1/28/20&#39;, &#39;1/29/20&#39;, &#39;1/30/20&#39;, &#39;1/31/20&#39;,
       ...
       &#39;8/19/20&#39;, &#39;8/20/20&#39;, &#39;8/21/20&#39;, &#39;8/22/20&#39;, &#39;8/23/20&#39;, &#39;8/24/20&#39;,
       &#39;8/25/20&#39;, &#39;8/26/20&#39;, &#39;8/27/20&#39;, &#39;8/28/20&#39;],
      dtype=&#39;object&#39;, length=220)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Các tập dữ liệu này được lưu ở dạng &lt;code&gt;wide format&lt;/code&gt; do đó chúng ta cần chuyển chúng dạng &lt;code&gt;long fromat&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dates = df_confd.columns[4:]
long_df_confd = df_confd.melt(id_vars=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;], 
                            value_vars=dates, var_name=&#39;Date&#39;, value_name=&#39;Confirmed&#39;)

long_df_death = df_death.melt(id_vars=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;], 
                            value_vars=dates, var_name=&#39;Date&#39;, value_name=&#39;Deaths&#39;)

long_df_recvd = df_recvd.melt(id_vars=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;], 
                            value_vars=dates, var_name=&#39;Date&#39;, value_name=&#39;Recovered&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra dữ liệu sau khi đã chuyển:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(long_df_confd.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long     Date  Confirmed
0            NaN    Afghanistan  33.93911  67.709953  1/22/20          0
1            NaN        Albania  41.15330  20.168300  1/22/20          0
2            NaN        Algeria  28.03390   1.659600  1/22/20          0
3            NaN        Andorra  42.50630   1.521800  1/22/20          0
4            NaN         Angola -11.20270  17.873900  1/22/20          0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(long_df_death.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long     Date  Deaths
0            NaN    Afghanistan  33.93911  67.709953  1/22/20       0
1            NaN        Albania  41.15330  20.168300  1/22/20       0
2            NaN        Algeria  28.03390   1.659600  1/22/20       0
3            NaN        Andorra  42.50630   1.521800  1/22/20       0
4            NaN         Angola -11.20270  17.873900  1/22/20       0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(long_df_recvd.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long     Date  Recovered
0            NaN    Afghanistan  33.93911  67.709953  1/22/20          0
1            NaN        Albania  41.15330  20.168300  1/22/20          0
2            NaN        Algeria  28.03390   1.659600  1/22/20          0
3            NaN        Andorra  42.50630   1.521800  1/22/20          0
4            NaN         Angola -11.20270  17.873900  1/22/20          0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gộp 3 tập dữ liệu này thành 1 dataframe:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df = pd.merge(left=long_df_confd, right=long_df_death, how=&#39;left&#39;,
                      on=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Date&#39;, &#39;Lat&#39;, &#39;Long&#39;])
final_df = pd.merge(left=final_df, right=long_df_recvd, how=&#39;left&#39;,
                      on=[&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Date&#39;, &#39;Lat&#39;, &#39;Long&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chuyển cột dữ liệu ngày về dạng &lt;code&gt;date&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df[&#39;Date&#39;] = pd.to_datetime(final_df[&#39;Date&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra bảng dữ liệu thu được:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(final_df.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long       Date  Confirmed  \
0            NaN    Afghanistan  33.93911  67.709953 2020-01-22          0   
1            NaN        Albania  41.15330  20.168300 2020-01-22          0   
2            NaN        Algeria  28.03390   1.659600 2020-01-22          0   
3            NaN        Andorra  42.50630   1.521800 2020-01-22          0   
4            NaN         Angola -11.20270  17.873900 2020-01-22          0   

   Deaths  Recovered  
0       0        0.0  
1       0        0.0  
2       0        0.0  
3       0        0.0  
4       0        0.0  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra kích thước của bảng dữ liệu thu được:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(final_df.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(58520, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra khoảng thời gian của dữ liệu được thu thập:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = final_df.Date.value_counts().sort_index()
print(&#39;Ngày bắt đầu là:&#39;,a.index[0])
print(&#39;Ngày hiện tại là:&#39;,a.index[-1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Ngày bắt đầu là: 2020-01-22 00:00:00
Ngày hiện tại là: 2020-08-28 00:00:00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra &lt;code&gt;missing values (NaN)&lt;/code&gt; trong tập dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df.isna().sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Province/State    40515
Country/Region        0
Lat                   0
Long                  0
Date                  0
Confirmed             0
Deaths                0
Recovered          4161
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Đánh giá phần trăm &lt;code&gt;missing values&lt;/code&gt; của từng cột dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;NAN = [(c, final_df[c].isna().mean()*100) for c in final_df]
NAN = pd.DataFrame(NAN, columns=[&amp;quot;column_name&amp;quot;, &amp;quot;percentage&amp;quot;])
print(NAN)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;      column_name  percentage
0  Province/State   69.548872
1  Country/Region    0.000000
2             Lat    0.000000
3            Long    0.000000
4            Date    0.000000
5       Confirmed    0.000000
6          Deaths    0.000000
7       Recovered    7.142857
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ta thấy cột &lt;code&gt;Province/State&lt;/code&gt; có gần &lt;code&gt;69.55%&lt;/code&gt; dữ liệu bị thiếu và cột &lt;code&gt;Recovered&lt;/code&gt; có &lt;code&gt;7,14%&lt;/code&gt;. Vì vậy chúng ta cần xử lý các giá trị thiếu này:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Thay thế nan thành 0 cho cột Recovered
final_df[&#39;Recovered&#39;] = final_df[&#39;Recovered&#39;].fillna(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Thay thế nan thành Unknown cho cột Province/State
final_df[&amp;quot;Province/State&amp;quot;]= final_df[&amp;quot;Province/State&amp;quot;].fillna(&#39;Unknown&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra xem trong dữ liệu còn &lt;code&gt;missing values&lt;/code&gt; không:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df.isna().sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Province/State    0
Country/Region    0
Lat               0
Long              0
Date              0
Confirmed         0
Deaths            0
Recovered         0
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kiểm tra kiểu dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(final_df.dtypes)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Province/State            object
Country/Region            object
Lat                      float64
Long                     float64
Date              datetime64[ns]
Confirmed                  int64
Deaths                     int64
Recovered                float64
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thay đổi kiểu dữ liệu cho các cột &lt;code&gt;Confirmed, Deaths và Recovered&lt;/code&gt; thành &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df[[&amp;quot;Confirmed&amp;quot;,&amp;quot;Deaths&amp;quot;,&amp;quot;Recovered&amp;quot;]] = final_df[[&amp;quot;Confirmed&amp;quot;,&amp;quot;Deaths&amp;quot;,&amp;quot;Recovered&amp;quot;]].astype(int)
print(final_df.dtypes)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Province/State            object
Country/Region            object
Lat                      float64
Long                     float64
Date              datetime64[ns]
Confirmed                  int32
Deaths                     int32
Recovered                  int32
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tạo thuộc tính mới &lt;code&gt;Active&lt;/code&gt; (Số trường hợp còn đang nhiễm sau khi đã trừ đi số trường hợp tử vong và hồi phục): 
$$Active = Confirmed - Deaths - Recovered$$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_df[&#39;Active&#39;] = final_df[&#39;Confirmed&#39;] - final_df[&#39;Deaths&#39;] - final_df[&#39;Recovered&#39;]
print(final_df.head(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Province/State Country/Region       Lat       Long       Date  Confirmed  \
0        Unknown    Afghanistan  33.93911  67.709953 2020-01-22          0   
1        Unknown        Albania  41.15330  20.168300 2020-01-22          0   
2        Unknown        Algeria  28.03390   1.659600 2020-01-22          0   
3        Unknown        Andorra  42.50630   1.521800 2020-01-22          0   
4        Unknown         Angola -11.20270  17.873900 2020-01-22          0   

   Deaths  Recovered  Active  
0       0          0       0  
1       0          0       0  
2       0          0       0  
3       0          0       0  
4       0          0       0  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data-visualization&#34;&gt;2. Trực quan hóa dữ liệu&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2.1 Tổng quan tình hình Covid -19 trên toàn thế giới tính tới thời điểm đang viết bài này:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kiểm tra tổng số nước trên toàn thế giới trong tập dữ liệu:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(final_df[&#39;Country/Region&#39;].unique())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;188
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tổng các cases trên toàn thế giới:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(pd.to_numeric(final_df[[&#39;Confirmed&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;, &#39;Active&#39;]].sum()),dtype=np.float64).transpose()
df[&#39;Last date&#39;] = max(final_df[&#39;Date&#39;])
print(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;      Confirmed      Deaths    Recovered       Active  Last date
0  1.492646e+09  67290986.0  798778726.0  626576735.0 2020-08-28
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tạo &lt;code&gt;Pie chart&lt;/code&gt; so sánh các cases trên toàn thế giới:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cases = [&#39;Confirmed&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;, &#39;Active&#39;]
colors = [&#39;gold&#39;, &#39;yellowgreen&#39;, &#39;lightcoral&#39;, &#39;lightskyblue&#39;]
explode = (0.1, 0, 0, 0)  # explode 1st slice
sizes = sum(df.loc[:, &#39;Confirmed&#39;:&#39;Active&#39;].values)
explode = (0.1, 0, 0, 0)  # explode 1st slice

# Plot
f = plt.figure(figsize=(8,8))
plt.pie(sizes, explode=explode, 
        textprops=dict(size=15,color=&#39;black&#39;),
        labels=cases, 
        colors=colors,
        autopct=&#39;%1.1f%%&#39;, 
        shadow=True, 
        startangle=140)
plt.axis(&#39;equal&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_54_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 Top 10 nước có số trường hợp (confirmed, deaths, recovered and active cases) lớn nhất&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tính tổng các &lt;code&gt;cases&lt;/code&gt; của từng nước tính đến thười điểm hiện tại:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_countries = final_df.copy().drop([&#39;Lat&#39;,&#39;Long&#39;,&#39;Province/State&#39;, &#39;Date&#39;],axis =1)
df_countries = df_countries.groupby([&amp;quot;Country/Region&amp;quot;]).sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;confirmed cases&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = plt.figure(figsize=(10,5))
f.add_subplot(111)
plt.axes(axisbelow=True)
plt.barh(df_countries.sort_values(&#39;Confirmed&#39;)[&amp;quot;Confirmed&amp;quot;].index[-10:],df_countries.sort_values(&#39;Confirmed&#39;)[&amp;quot;Confirmed&amp;quot;].values[-10:],color=&amp;quot;darkcyan&amp;quot;)
plt.tick_params(size=5,labelsize = 13)
plt.xlabel(&amp;quot;Confirmed Cases&amp;quot;,fontsize=18)
plt.title(&amp;quot;Top 10 Countries (Confirmed Cases)&amp;quot;,fontsize=20)
plt.grid(alpha=0.3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_59_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;Deaths&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = plt.figure(figsize=(10,5))
f.add_subplot(111)

plt.axes(axisbelow=True)
plt.barh(df_countries.sort_values(&#39;Deaths&#39;)[&amp;quot;Deaths&amp;quot;].index[-10:],df_countries.sort_values(&#39;Deaths&#39;)[&amp;quot;Deaths&amp;quot;].values[-10:],color=&amp;quot;crimson&amp;quot;)
plt.tick_params(size=5,labelsize = 13)
plt.xlabel(&amp;quot;Deaths Cases&amp;quot;,fontsize=18)
plt.title(&amp;quot;Top 10 Countries (Deaths)&amp;quot;,fontsize=20)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_61_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;Recovered Cases&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = plt.figure(figsize=(10,5))
f.add_subplot(111)

plt.axes(axisbelow=True)
plt.barh(df_countries.sort_values(&#39;Recovered&#39;)[&amp;quot;Recovered&amp;quot;].index[-10:],df_countries.sort_values(&#39;Recovered&#39;)[&amp;quot;Recovered&amp;quot;].values[-10:],color=&amp;quot;limegreen&amp;quot;)
plt.tick_params(size=5,labelsize = 13)
plt.xlabel(&amp;quot;Recovered Cases&amp;quot;,fontsize=18)
plt.title(&amp;quot;Top 10 Countries (Recovered Cases)&amp;quot;,fontsize=20)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_63_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Top 10 nước có &lt;code&gt;Active Cases&lt;/code&gt; lớn nhất:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = plt.figure(figsize=(10,5))
f.add_subplot(111)

plt.axes(axisbelow=True)
plt.barh(df_countries.sort_values(&#39;Active&#39;)[&amp;quot;Active&amp;quot;].index[-10:],df_countries.sort_values(&#39;Active&#39;)[&amp;quot;Active&amp;quot;].values[-10:],color=&amp;quot;darkorange&amp;quot;)
plt.tick_params(size=5,labelsize = 13)
plt.xlabel(&amp;quot;Active Cases&amp;quot;,fontsize=18)
plt.title(&amp;quot;Top 10 Countries (Active Cases)&amp;quot;,fontsize=20)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_65_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3 Mức độ phát triển của Covid-19 theo thời gian trên toàn thế giới&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tính tổng các &lt;code&gt;cases&lt;/code&gt; trên toàn thế giới theo thời gian&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_world = final_df.groupby([&amp;quot;Date&amp;quot;])[[&amp;quot;Confirmed&amp;quot;,&amp;quot;Active&amp;quot;,&amp;quot;Recovered&amp;quot;,&amp;quot;Deaths&amp;quot;]].sum().reset_index()
df_world.set_index(&#39;Date&#39;,inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Confirmed cases&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(10, 6))

# Add x-axis and y-axis
ax.bar(df_world.index.values,
        df_world[&#39;Confirmed&#39;],
        color=&#39;blue&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Confirmed cases&amp;quot;,
       title=&amp;quot;Confirmed Cases In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_70_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Deaths&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(10, 6))

# Add x-axis and y-axis
ax.bar(df_world.index.values,
        df_world[&#39;Deaths&#39;],
        color=&#39;red&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Deaths&amp;quot;,
       title=&amp;quot;Deaths In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_72_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Recovered cases&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(10, 6))

# Add x-axis and y-axis
ax.bar(df_world.index.values,
        df_world[&#39;Recovered&#39;],
        color=&#39;purple&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Recovered cases&amp;quot;,
       title=&amp;quot;Recovered Cases In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_74_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Mức độ phát triển của &lt;code&gt;Active Cases&lt;/code&gt; trên toàn thế giới theo thời gian:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(10, 6))

# Add x-axis and y-axis
ax.bar(df_world.index.values,
        df_world[&#39;Active&#39;],
        color= &#39;green&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Active Cases&amp;quot;,
       title=&amp;quot;Active Cases In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_76_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.4 Hiển thị tất cả các cases trên thế giới theo thời gian&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(12, 6))

# Add x-axis and y-axis
ax.plot(df_world.index.values,
        df_world[&#39;Confirmed&#39;],
        color=&#39;blue&#39;, label = &#39;Confirmed Cases&#39;)

ax.plot(df_world.index.values,
        df_world[&#39;Deaths&#39;],
        color=&#39;red&#39;, label = &#39;Deaths&#39;)

ax.plot(df_world.index.values,
        df_world[&#39;Recovered&#39;],
        color=&#39;purple&#39;, label = &#39;Recovered Cases&#39;)


ax.plot(df_world.index.values,
        df_world[&#39;Active&#39;],
        color= &#39;green&#39;,  label= &#39;Active Cases&#39;)


# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Cases&amp;quot;,
       title=&amp;quot;COVID-19 Cases In Each Day&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.legend(loc=&amp;quot;upper left&amp;quot;)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_78_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.5 Tổng số lượng các quốc gia trên thế giới xuất hiện dịch bệnh Covid-19 theo thời gian&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Tính tổng số lượng các nước xuất hiện dịch Covid-19 theo thời gian
case_nums_country = df_confd.groupby(&amp;quot;Country/Region&amp;quot;).sum().drop([&#39;Lat&#39;,&#39;Long&#39;],axis =1).apply(lambda x: x[x &amp;gt; 0].count(), axis =0)
d = [datetime.strptime(date,&#39;%m/%d/%y&#39;).strftime(&amp;quot;%d %b&amp;quot;) for date in case_nums_country.index]

f = plt.figure(figsize=(10,5))
f.add_subplot(111)
marker_style = dict(c=&amp;quot;crimson&amp;quot;,linewidth=1, linestyle=&#39;-&#39;, marker=&#39;o&#39;,markersize=4, markerfacecolor=&#39;blue&#39;)
plt.plot(df_world.index.values, case_nums_country,**marker_style)
plt.setp(ax.get_xticklabels(), rotation=90)
plt.xlabel(&amp;quot;Dates&amp;quot;,fontsize=10)
plt.grid(alpha = 0.3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_80_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.6 So sánh sự phát triển của COVID-19 theo thời gian giữa các nước&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So sánh Việt Nam, Mỹ, Nga:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Vietnam = final_df[final_df[&#39;Country/Region&#39;] == &#39;Vietnam&#39;]
df_Russia = final_df[final_df[&#39;Country/Region&#39;] == &#39;Russia&#39;]
df_US = final_df[final_df[&#39;Country/Region&#39;] == &#39;US&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do Mỹ và Nga cùng có số lượng các &lt;code&gt;cases&lt;/code&gt; lớn nên biểu thị vào cùng một biểu đồ:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create figure and plot space
fig, ax = plt.subplots(figsize=(12, 6))

# Add x-axis and y-axis
ax.plot(df_US[&#39;Date&#39;],
        df_US[&#39;Confirmed&#39;],
        color=&#39;blue&#39;, label = &#39;Confirmed Cases of US&#39;)

ax.plot(df_US[&#39;Date&#39;],
        df_US[&#39;Active&#39;],
        &#39;-.&#39;,
        color=&#39;blue&#39;, label = &#39;Active Cases of US&#39;)

ax.plot(df_US[&#39;Date&#39;],
        df_US[&#39;Recovered&#39;],
        &#39;--&#39;,
        color=&#39;blue&#39;, label = &#39;Recovered Cases of US&#39;)

ax.plot(df_Russia[&#39;Date&#39;],
        df_Russia[&#39;Confirmed&#39;],
        color=&#39;red&#39;, label = &#39;Confirmed Cases of Russia&#39;)

ax.plot(df_Russia[&#39;Date&#39;],
        df_Russia[&#39;Active&#39;],
        &#39;-.&#39;,
        color=&#39;red&#39;, label = &#39;Active Cases of Russia&#39;)

ax.plot(df_Russia[&#39;Date&#39;],
        df_Russia[&#39;Recovered&#39;],
        &#39;--&#39;,
        color=&#39;red&#39;, label = &#39;Recovered Cases of Russia&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Cases&amp;quot;,
       title=&amp;quot;Confirmed Cases of COVID-19 of Russia vs US&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.legend(loc=&amp;quot;upper left&amp;quot;)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_84_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Việt nam có tổng số các &lt;code&gt;cases&lt;/code&gt; nhỏ hơn rất nhiều so với Russia và Mỹ nên nếu biểu thị vào cùng 1 biểu đồ thì sẽ rất khó nhìn. Do vậy tôi biểu diễn Việt Nam riêng:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(figsize=(12, 6))

# Add x-axis and y-axis


ax.plot(df_Vietnam[&#39;Date&#39;],
        df_Vietnam[&#39;Confirmed&#39;],
        color=&amp;quot;red&amp;quot;, label = &#39;Confirmed Cases of Vietnam&#39;)

ax.plot(df_Vietnam[&#39;Date&#39;],
        df_Vietnam[&#39;Deaths&#39;],
        &#39;-.&#39;,
        color=&amp;quot;black&amp;quot;, label = &#39;Death Case of Vietnam&#39;)

ax.plot(df_Vietnam[&#39;Date&#39;],
        df_Vietnam[&#39;Active&#39;],
        &#39;-.&#39;,
        color=&amp;quot;blue&amp;quot;, label = &#39;Active Cases of Vietnam&#39;)

ax.plot(df_Vietnam[&#39;Date&#39;],
        df_Vietnam[&#39;Recovered&#39;],
        &#39;--&#39;,
        color=&amp;quot;green&amp;quot;, label = &#39;Recovered Cases of Vietnam&#39;)

# Set title and labels for axes
ax.set(xlabel=&amp;quot;Date&amp;quot;,
       ylabel=&amp;quot;Cases&amp;quot;,
       title=&amp;quot;COVID-19 cases of Vietnam&amp;quot;)

# Rotate tick marks on x-axis
plt.setp(ax.get_xticklabels(), rotation=45)
plt.legend(loc=&amp;quot;upper left&amp;quot;)
plt.grid(alpha=0.3,which=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_86_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Thử sử dụng jupyter notebook để viết posts cho blog. Machine Learning Project Template với Python</title>
      <link>/post/jupyter/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/jupyter/</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Note lại các bước để viết posts cho blog sử dụng jupyter notebook&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bước 1: Tạo Jupyter notebook&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Tạo thư mục chứa post mới
mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/

# chuyển đến thư mục mới tạo
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/

# Tạo một jupyter notebook với tên là index
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bước 2: Tạo post metadata&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cần tạo metadata cho post  ở cell đầu tiên của jupyter notebook như sau:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other metadata here...
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bước 3: Convert notebook to Markdown&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.  Machine Learning Project Template với Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 Một Machine Learning Project sẽ gồm các bước cơ bản sau:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bước 1: Chuẩn bị vấn đề:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nạp các thư viện cần thiết&lt;/li&gt;
&lt;li&gt;Load tập dữ liệu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bước 2: Thăm dò dữ liệu (data exploring)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thống kê mô tả&lt;/li&gt;
&lt;li&gt;Trực quan hóa dữ liệu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bước 3. Chuẩn bị dữ liệu&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Làm sạch dữ liệu (data cleaning)&lt;/li&gt;
&lt;li&gt;Lựa chọn và biến đổi thuộc tính&lt;/li&gt;
&lt;li&gt;Chuẩn hóa dữ liệu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bước 4. Đánh giá các algorithms&lt;/p&gt;
&lt;p&gt;Bước 5. Impove accuracy&lt;/p&gt;
&lt;p&gt;Bước 6. Final model&lt;/p&gt;
&lt;h3 id=&#34;22-thực-hành-với-bài-toán-regresion&#34;&gt;2.2 Thực hành với bài toán Regresion&lt;/h3&gt;
&lt;h3 id=&#34;bước-1-chuẩn-bị-vấn-đề&#34;&gt;Bước 1. Chuẩn bị vấn đề&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Nạp các thư viện cần thiết
import numpy as np
from numpy import arange
import matplotlib.pyplot as plt
from pandas import read_csv
from pandas import set_option
#from pandas.tools.plotting import scatter_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.metrics import mean_squared_error
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load dữ liệu
url = &#39;https://raw.githubusercontent.com/svcuong/Datasets/master/boston.csv&#39;
dataset = read_csv(url, index_col=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bước 2. Thăm dò dữ liệu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bước 2.1: Thống kê mô tả&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Kiểm tra kích thước dữ liệu
dataset.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(506, 14)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Kiểm tra kiểu dữ liệu của thuộc tính
dataset.dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;crim       float64
zn         float64
indus      float64
chas         int64
nox        float64
rm         float64
age        float64
dis        float64
rad          int64
tax          int64
ptratio    float64
black      float64
lstat      float64
medv       float64
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hiển thị 10 hàng dữ liệu đầu tiên
print(dataset.head(10))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;       crim    zn  indus  chas    nox     rm    age     dis  rad  tax  \
1   0.00632  18.0   2.31     0  0.538  6.575   65.2  4.0900    1  296   
2   0.02731   0.0   7.07     0  0.469  6.421   78.9  4.9671    2  242   
3   0.02729   0.0   7.07     0  0.469  7.185   61.1  4.9671    2  242   
4   0.03237   0.0   2.18     0  0.458  6.998   45.8  6.0622    3  222   
5   0.06905   0.0   2.18     0  0.458  7.147   54.2  6.0622    3  222   
6   0.02985   0.0   2.18     0  0.458  6.430   58.7  6.0622    3  222   
7   0.08829  12.5   7.87     0  0.524  6.012   66.6  5.5605    5  311   
8   0.14455  12.5   7.87     0  0.524  6.172   96.1  5.9505    5  311   
9   0.21124  12.5   7.87     0  0.524  5.631  100.0  6.0821    5  311   
10  0.17004  12.5   7.87     0  0.524  6.004   85.9  6.5921    5  311   

    ptratio   black  lstat  medv  
1      15.3  396.90   4.98  24.0  
2      17.8  396.90   9.14  21.6  
3      17.8  392.83   4.03  34.7  
4      18.7  394.63   2.94  33.4  
5      18.7  396.90   5.33  36.2  
6      18.7  394.12   5.21  28.7  
7      15.2  395.60  12.43  22.9  
8      15.2  396.90  19.15  27.1  
9      15.2  386.63  29.93  16.5  
10     15.2  386.71  17.10  18.9  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# kiểm tra phân bố dữ liệu của từng thuộc tính
print(dataset.describe())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;             crim          zn       indus        chas         nox          rm  \
count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   
mean     3.613524   11.363636   11.136779    0.069170    0.554695    6.284634   
std      8.601545   23.322453    6.860353    0.253994    0.115878    0.702617   
min      0.006320    0.000000    0.460000    0.000000    0.385000    3.561000   
25%      0.082045    0.000000    5.190000    0.000000    0.449000    5.885500   
50%      0.256510    0.000000    9.690000    0.000000    0.538000    6.208500   
75%      3.677082   12.500000   18.100000    0.000000    0.624000    6.623500   
max     88.976200  100.000000   27.740000    1.000000    0.871000    8.780000   

              age         dis         rad         tax     ptratio       black  \
count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   
mean    68.574901    3.795043    9.549407  408.237154   18.455534  356.674032   
std     28.148861    2.105710    8.707259  168.537116    2.164946   91.294864   
min      2.900000    1.129600    1.000000  187.000000   12.600000    0.320000   
25%     45.025000    2.100175    4.000000  279.000000   17.400000  375.377500   
50%     77.500000    3.207450    5.000000  330.000000   19.050000  391.440000   
75%     94.075000    5.188425   24.000000  666.000000   20.200000  396.225000   
max    100.000000   12.126500   24.000000  711.000000   22.000000  396.900000   

            lstat        medv  
count  506.000000  506.000000  
mean    12.653063   22.532806  
std      7.141062    9.197104  
min      1.730000    5.000000  
25%      6.950000   17.025000  
50%     11.360000   21.200000  
75%     16.955000   25.000000  
max     37.970000   50.000000  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Kiểm tra độ tương quan giữa các biến dạng numeric
print(dataset.corr(method = &#39;pearson&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;             crim        zn     indus      chas       nox        rm       age  \
crim     1.000000 -0.200469  0.406583 -0.055892  0.420972 -0.219247  0.352734   
zn      -0.200469  1.000000 -0.533828 -0.042697 -0.516604  0.311991 -0.569537   
indus    0.406583 -0.533828  1.000000  0.062938  0.763651 -0.391676  0.644779   
chas    -0.055892 -0.042697  0.062938  1.000000  0.091203  0.091251  0.086518   
nox      0.420972 -0.516604  0.763651  0.091203  1.000000 -0.302188  0.731470   
rm      -0.219247  0.311991 -0.391676  0.091251 -0.302188  1.000000 -0.240265   
age      0.352734 -0.569537  0.644779  0.086518  0.731470 -0.240265  1.000000   
dis     -0.379670  0.664408 -0.708027 -0.099176 -0.769230  0.205246 -0.747881   
rad      0.625505 -0.311948  0.595129 -0.007368  0.611441 -0.209847  0.456022   
tax      0.582764 -0.314563  0.720760 -0.035587  0.668023 -0.292048  0.506456   
ptratio  0.289946 -0.391679  0.383248 -0.121515  0.188933 -0.355501  0.261515   
black   -0.385064  0.175520 -0.356977  0.048788 -0.380051  0.128069 -0.273534   
lstat    0.455621 -0.412995  0.603800 -0.053929  0.590879 -0.613808  0.602339   
medv    -0.388305  0.360445 -0.483725  0.175260 -0.427321  0.695360 -0.376955   

              dis       rad       tax   ptratio     black     lstat      medv  
crim    -0.379670  0.625505  0.582764  0.289946 -0.385064  0.455621 -0.388305  
zn       0.664408 -0.311948 -0.314563 -0.391679  0.175520 -0.412995  0.360445  
indus   -0.708027  0.595129  0.720760  0.383248 -0.356977  0.603800 -0.483725  
chas    -0.099176 -0.007368 -0.035587 -0.121515  0.048788 -0.053929  0.175260  
nox     -0.769230  0.611441  0.668023  0.188933 -0.380051  0.590879 -0.427321  
rm       0.205246 -0.209847 -0.292048 -0.355501  0.128069 -0.613808  0.695360  
age     -0.747881  0.456022  0.506456  0.261515 -0.273534  0.602339 -0.376955  
dis      1.000000 -0.494588 -0.534432 -0.232471  0.291512 -0.496996  0.249929  
rad     -0.494588  1.000000  0.910228  0.464741 -0.444413  0.488676 -0.381626  
tax     -0.534432  0.910228  1.000000  0.460853 -0.441808  0.543993 -0.468536  
ptratio -0.232471  0.464741  0.460853  1.000000 -0.177383  0.374044 -0.507787  
black    0.291512 -0.444413 -0.441808 -0.177383  1.000000 -0.366087  0.333461  
lstat   -0.496996  0.488676  0.543993  0.374044 -0.366087  1.000000 -0.737663  
medv     0.249929 -0.381626 -0.468536 -0.507787  0.333461 -0.737663  1.000000  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Bước 2.2: Trực quan hóa dữ liệu&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Histograms cho từng thuộc tính
dataset.hist(figsize=(12,8))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_21_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Boxplot cho từng thuộc tính
dataset.plot(kind=&#39;box&#39;, figsize=(12,5))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_22_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# correlation matrix
fig = plt.figure(figsize=(14, 6))
ax = fig.add_subplot(111)
cax = ax.matshow(dataset.corr(), vmin=-1, vmax=1, interpolation=&#39;none&#39;)
fig.colorbar(cax)
ticks = numpy.arange(0,14,1)
ax.set_xticks(ticks)
ax.set_yticks(ticks)
ax.set_xticklabels(names)
ax.set_yticklabels(names)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_23_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bước 3: Chuẩn bị dữ liệu&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Split-out validation dataset
array = dataset.values
X = array[:,0:13]
Y = array[:,13]
validation_size = 0.20
seed = 7
X_train, X_validation, Y_train, Y_validation = train_test_split(X, Y,
test_size=validation_size, random_state=seed)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Bước 4: Đánh giá algorithms&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Test options and evaluation metric
num_folds = 10
seed = 7
scoring = &#39;neg_mean_squared_error&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Spot-Check Algorithms
models = []
models.append((&#39;LR&#39;, LinearRegression()))
models.append((&#39;LASSO&#39;, Lasso()))
models.append((&#39;EN&#39;, ElasticNet()))
models.append((&#39;KNN&#39;, KNeighborsRegressor()))
models.append((&#39;CART&#39;, DecisionTreeRegressor()))
models.append((&#39;SVR&#39;, SVR()))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import warnings
warnings.filterwarnings(&#39;ignore&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# evaluate each model in turn
results = []
names = []
for name, model in models:
    kfold = KFold(n_splits=num_folds, random_state=seed)
    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)
    results.append(cv_results)
    names.append(name)
    msg = &amp;quot;%s: %f (%f)&amp;quot; % (name, cv_results.mean(), cv_results.std())
    print(msg)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;LR: -21.379856 (9.414264)
LASSO: -26.423561 (11.651110)
EN: -27.502259 (12.305022)
KNN: -41.896488 (13.901688)
CART: -26.016351 (15.164680)
SVR: -67.827886 (29.049138)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Compare Algorithms
fig = pyplot.figure(figsize=(10, 6))
fig.suptitle(&#39;Algorithm Comparison&#39;)
ax = fig.add_subplot(111)
pyplot.boxplot(results)
ax.set_xticklabels(names)
pyplot.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_31_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bước 5: Improve Results With Tuning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tôi sẽ hướng dẫn ở một bài khác&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bước 6: Finalize model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tôi sẽ hướng dẫn ở một bài khác&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
